
RTOS_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005434  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080055e4  080055e4  000065e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a4  080057a4  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080057a4  080057a4  000067a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ac  080057ac  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ac  080057ac  000067ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057b0  080057b0  000067b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080057b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00004068  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004078  20004078  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013587  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e59  00000000  00000000  0001a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  0001d420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ddb  00000000  00000000  0001e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d79  00000000  00000000  0001f3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135cb  00000000  00000000  00044144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e36b2  00000000  00000000  0005770f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013adc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a38  00000000  00000000  0013ae04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0013f83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080055cc 	.word	0x080055cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080055cc 	.word	0x080055cc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4a07      	ldr	r2, [pc, #28]	@ (800051c <vApplicationGetIdleTaskMemory+0x2c>)
 8000500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <vApplicationGetIdleTaskMemory+0x30>)
 8000506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2280      	movs	r2, #128	@ 0x80
 800050c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	2000002c 	.word	0x2000002c
 8000520:	20000080 	.word	0x20000080

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b098      	sub	sp, #96	@ 0x60
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fd83 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f85d 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8f5 	bl	8000720 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000536:	f000 f8c9 	bl	80006cc <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySem01 */
  osSemaphoreDef(BinarySem01);
 800053a:	2300      	movs	r3, #0
 800053c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800053e:	2300      	movs	r3, #0
 8000540:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BinarySem01Handle = osSemaphoreCreate(osSemaphore(BinarySem01), 1);
 8000542:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000546:	2101      	movs	r1, #1
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fcce 	bl	8002eea <osSemaphoreCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a1f      	ldr	r2, [pc, #124]	@ (80005d0 <main+0xac>)
 8000552:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, Startnormaltask, osPriorityNormal, 0, 128);
 8000554:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <main+0xb0>)
 8000556:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 8000568:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fc5b 	bl	8002e2a <osThreadCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <main+0xb4>)
 8000578:	6013      	str	r3, [r2, #0]

   /* definition and creation of HighTask */
   osThreadDef(HighTask, Starthightask, osPriorityAboveNormal, 0, 128);
 800057a:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <main+0xb8>)
 800057c:	f107 0420 	add.w	r4, r7, #32
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fc48 	bl	8002e2a <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a10      	ldr	r2, [pc, #64]	@ (80005e0 <main+0xbc>)
 800059e:	6013      	str	r3, [r2, #0]

   /* definition and creation of LowTask */
   osThreadDef(LowTask, Startlowtask, osPriorityBelowNormal, 0, 128);
 80005a0:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <main+0xc0>)
 80005a2:	1d3c      	adds	r4, r7, #4
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fc37 	bl	8002e2a <osThreadCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <main+0xc4>)
 80005c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c2:	f002 fc2b 	bl	8002e1c <osKernelStart>
 80005c6:	2300      	movs	r3, #0
//	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
//	  HAL_Delay(2000);
//    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3760      	adds	r7, #96	@ 0x60
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bdb0      	pop	{r4, r5, r7, pc}
 80005d0:	200002d4 	.word	0x200002d4
 80005d4:	080055f0 	.word	0x080055f0
 80005d8:	200002c8 	.word	0x200002c8
 80005dc:	08005618 	.word	0x08005618
 80005e0:	200002cc 	.word	0x200002cc
 80005e4:	0800563c 	.word	0x0800563c
 80005e8:	200002d0 	.word	0x200002d0

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 ffac 	bl	8005558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b2b      	ldr	r3, [pc, #172]	@ (80006c4 <SystemClock_Config+0xd8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a2a      	ldr	r2, [pc, #168]	@ (80006c4 <SystemClock_Config+0xd8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <SystemClock_Config+0xd8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <SystemClock_Config+0xdc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemClock_Config+0xdc>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <SystemClock_Config+0xdc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000660:	23b4      	movs	r3, #180	@ 0xb4
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f831 	bl	80016d8 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 fb82 	bl	8000d84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000680:	f000 ffda 	bl	8001638 <HAL_PWREx_EnableOverDrive>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800068a:	f000 fb7b 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2105      	movs	r1, #5
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fa8b 	bl	8001bc8 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b8:	f000 fb64 	bl	8000d84 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	@ 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <MX_USART1_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_USART1_UART_Init+0x4c>)
 8000704:	f001 ff54 	bl	80025b0 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 fb39 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000280 	.word	0x20000280
 800071c:	40011000 	.word	0x40011000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	@ 0x38
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	4bb2      	ldr	r3, [pc, #712]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4ab1      	ldr	r2, [pc, #708]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4baf      	ldr	r3, [pc, #700]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	623b      	str	r3, [r7, #32]
 8000750:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	4bab      	ldr	r3, [pc, #684]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4aaa      	ldr	r2, [pc, #680]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4ba8      	ldr	r3, [pc, #672]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	61fb      	str	r3, [r7, #28]
 800076c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4ba4      	ldr	r3, [pc, #656]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4aa3      	ldr	r2, [pc, #652]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4ba1      	ldr	r3, [pc, #644]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b9d      	ldr	r3, [pc, #628]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a9c      	ldr	r2, [pc, #624]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b9a      	ldr	r3, [pc, #616]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b96      	ldr	r3, [pc, #600]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a95      	ldr	r2, [pc, #596]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b93      	ldr	r3, [pc, #588]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b8f      	ldr	r3, [pc, #572]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a8e      	ldr	r2, [pc, #568]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b8c      	ldr	r3, [pc, #560]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b88      	ldr	r3, [pc, #544]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a87      	ldr	r2, [pc, #540]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b85      	ldr	r3, [pc, #532]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b81      	ldr	r3, [pc, #516]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a80      	ldr	r2, [pc, #512]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a04 <MX_GPIO_Init+0x2e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2116      	movs	r1, #22
 800081a:	487b      	ldr	r0, [pc, #492]	@ (8000a08 <MX_GPIO_Init+0x2e8>)
 800081c:	f000 fef2 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	4879      	ldr	r0, [pc, #484]	@ (8000a0c <MX_GPIO_Init+0x2ec>)
 8000826:	f000 feed 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000830:	4877      	ldr	r0, [pc, #476]	@ (8000a10 <MX_GPIO_Init+0x2f0>)
 8000832:	f000 fee7 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800083c:	4875      	ldr	r0, [pc, #468]	@ (8000a14 <MX_GPIO_Init+0x2f4>)
 800083e:	f000 fee1 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000842:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000854:	230c      	movs	r3, #12
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	486e      	ldr	r0, [pc, #440]	@ (8000a18 <MX_GPIO_Init+0x2f8>)
 8000860:	f000 fd0c 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000864:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000876:	2305      	movs	r3, #5
 8000878:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	4619      	mov	r1, r3
 8000880:	4865      	ldr	r0, [pc, #404]	@ (8000a18 <MX_GPIO_Init+0x2f8>)
 8000882:	f000 fcfb 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000898:	230e      	movs	r3, #14
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a0:	4619      	mov	r1, r3
 80008a2:	485d      	ldr	r0, [pc, #372]	@ (8000a18 <MX_GPIO_Init+0x2f8>)
 80008a4:	f000 fcea 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008a8:	2301      	movs	r3, #1
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	4851      	ldr	r0, [pc, #324]	@ (8000a08 <MX_GPIO_Init+0x2e8>)
 80008c4:	f000 fcda 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008c8:	2316      	movs	r3, #22
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	484a      	ldr	r0, [pc, #296]	@ (8000a08 <MX_GPIO_Init+0x2e8>)
 80008e0:	f000 fccc 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e4:	2301      	movs	r3, #1
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4845      	ldr	r0, [pc, #276]	@ (8000a0c <MX_GPIO_Init+0x2ec>)
 80008f8:	f000 fcc0 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008fc:	f248 0306 	movw	r3, #32774	@ 0x8006
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000902:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	483e      	ldr	r0, [pc, #248]	@ (8000a0c <MX_GPIO_Init+0x2ec>)
 8000914:	f000 fcb2 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000918:	f641 0358 	movw	r3, #6232	@ 0x1858
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800092a:	230e      	movs	r3, #14
 800092c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	4835      	ldr	r0, [pc, #212]	@ (8000a0c <MX_GPIO_Init+0x2ec>)
 8000936:	f000 fca1 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800093a:	2380      	movs	r3, #128	@ 0x80
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	482e      	ldr	r0, [pc, #184]	@ (8000a0c <MX_GPIO_Init+0x2ec>)
 8000952:	f000 fc93 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000956:	2320      	movs	r3, #32
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000968:	4619      	mov	r1, r3
 800096a:	4827      	ldr	r0, [pc, #156]	@ (8000a08 <MX_GPIO_Init+0x2e8>)
 800096c:	f000 fc86 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000970:	2303      	movs	r3, #3
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000980:	2309      	movs	r3, #9
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	4824      	ldr	r0, [pc, #144]	@ (8000a1c <MX_GPIO_Init+0x2fc>)
 800098c:	f000 fc76 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000990:	2304      	movs	r3, #4
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	481e      	ldr	r0, [pc, #120]	@ (8000a1c <MX_GPIO_Init+0x2fc>)
 80009a4:	f000 fc6a 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009a8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ba:	230c      	movs	r3, #12
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <MX_GPIO_Init+0x2f4>)
 80009c6:	f000 fc59 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009ca:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009dc:	230c      	movs	r3, #12
 80009de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	480e      	ldr	r0, [pc, #56]	@ (8000a20 <MX_GPIO_Init+0x300>)
 80009e8:	f000 fc48 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009ec:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009fe:	230e      	movs	r3, #14
 8000a00:	e010      	b.n	8000a24 <MX_GPIO_Init+0x304>
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40021800 	.word	0x40021800
 8000a18:	40021400 	.word	0x40021400
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40021000 	.word	0x40021000
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	486a      	ldr	r0, [pc, #424]	@ (8000bd8 <MX_GPIO_Init+0x4b8>)
 8000a2e:	f000 fc25 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a32:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a44:	230c      	movs	r3, #12
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4862      	ldr	r0, [pc, #392]	@ (8000bd8 <MX_GPIO_Init+0x4b8>)
 8000a50:	f000 fc14 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	485b      	ldr	r0, [pc, #364]	@ (8000bd8 <MX_GPIO_Init+0x4b8>)
 8000a6a:	f000 fc07 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a6e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a80:	230c      	movs	r3, #12
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4854      	ldr	r0, [pc, #336]	@ (8000bdc <MX_GPIO_Init+0x4bc>)
 8000a8c:	f000 fbf6 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	484d      	ldr	r0, [pc, #308]	@ (8000bdc <MX_GPIO_Init+0x4bc>)
 8000aa6:	f000 fbe9 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000aaa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4846      	ldr	r0, [pc, #280]	@ (8000bdc <MX_GPIO_Init+0x4bc>)
 8000ac4:	f000 fbda 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ac8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ada:	230e      	movs	r3, #14
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	483e      	ldr	r0, [pc, #248]	@ (8000be0 <MX_GPIO_Init+0x4c0>)
 8000ae6:	f000 fbc9 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000aea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000afc:	230e      	movs	r3, #14
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4837      	ldr	r0, [pc, #220]	@ (8000be4 <MX_GPIO_Init+0x4c4>)
 8000b08:	f000 fbb8 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b12:	2312      	movs	r3, #18
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	482e      	ldr	r0, [pc, #184]	@ (8000be4 <MX_GPIO_Init+0x4c4>)
 8000b2a:	f000 fba7 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b40:	2304      	movs	r3, #4
 8000b42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4827      	ldr	r0, [pc, #156]	@ (8000be8 <MX_GPIO_Init+0x4c8>)
 8000b4c:	f000 fb96 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b50:	2348      	movs	r3, #72	@ 0x48
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b60:	230e      	movs	r3, #14
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x4bc>)
 8000b6c:	f000 fb86 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b70:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b82:	2309      	movs	r3, #9
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4814      	ldr	r0, [pc, #80]	@ (8000be0 <MX_GPIO_Init+0x4c0>)
 8000b8e:	f000 fb75 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b92:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_GPIO_Init+0x4c0>)
 8000bac:	f000 fb66 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bb0:	2360      	movs	r3, #96	@ 0x60
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <MX_GPIO_Init+0x4b8>)
 8000bcc:	f000 fb56 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3738      	adds	r7, #56	@ 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	40021800 	.word	0x40021800
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020000 	.word	0x40020000

08000bec <Startnormaltask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startnormaltask */
void Startnormaltask(void const * argument)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered MediumTask\n\r";
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <Startnormaltask+0x44>)
 8000bf6:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen (str1), 100);
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff faf9 	bl	80001f0 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	2364      	movs	r3, #100	@ 0x64
 8000c04:	68f9      	ldr	r1, [r7, #12]
 8000c06:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <Startnormaltask+0x48>)
 8000c08:	f001 fd22 	bl	8002650 <HAL_UART_Transmit>


		char *str2 = "Leaving MediumTask\n\n\r";
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <Startnormaltask+0x4c>)
 8000c0e:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen (str2), 100);
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f7ff faed 	bl	80001f0 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	2364      	movs	r3, #100	@ 0x64
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <Startnormaltask+0x48>)
 8000c20:	f001 fd16 	bl	8002650 <HAL_UART_Transmit>
		osDelay(500);
 8000c24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c28:	f002 f94b 	bl	8002ec2 <osDelay>
  {
 8000c2c:	bf00      	nop
 8000c2e:	e7e1      	b.n	8000bf4 <Startnormaltask+0x8>
 8000c30:	08005658 	.word	0x08005658
 8000c34:	20000280 	.word	0x20000280
 8000c38:	08005670 	.word	0x08005670

08000c3c <Starthightask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Starthightask */
void Starthightask(void const * argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Starthightask */

  /* Infinite loop */
  for(;;)
  {
	char *str1 = "Entered HighTask and waiting for Semaphore\n \r";
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <Starthightask+0x74>)
 8000c46:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen (str1), 100);
 8000c48:	6978      	ldr	r0, [r7, #20]
 8000c4a:	f7ff fad1 	bl	80001f0 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	2364      	movs	r3, #100	@ 0x64
 8000c54:	6979      	ldr	r1, [r7, #20]
 8000c56:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <Starthightask+0x78>)
 8000c58:	f001 fcfa 	bl	8002650 <HAL_UART_Transmit>

	osSemaphoreWait(BinarySem01Handle, osWaitForever);
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <Starthightask+0x7c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 f973 	bl	8002f50 <osSemaphoreWait>

	char *str3 = "Semaphore acquired by HIGH Task\n\r";
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <Starthightask+0x80>)
 8000c6c:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart1, (uint8_t *) str3, strlen (str3), 100);
 8000c6e:	6938      	ldr	r0, [r7, #16]
 8000c70:	f7ff fabe 	bl	80001f0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	2364      	movs	r3, #100	@ 0x64
 8000c7a:	6939      	ldr	r1, [r7, #16]
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <Starthightask+0x78>)
 8000c7e:	f001 fce7 	bl	8002650 <HAL_UART_Transmit>

	char *str2 = "Leaving HighTask and releasing Semaphore\n\n\r";
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <Starthightask+0x84>)
 8000c84:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen (str2), 100);
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff fab2 	bl	80001f0 <strlen>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	2364      	movs	r3, #100	@ 0x64
 8000c92:	68f9      	ldr	r1, [r7, #12]
 8000c94:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <Starthightask+0x78>)
 8000c96:	f001 fcdb 	bl	8002650 <HAL_UART_Transmit>

	osSemaphoreRelease(BinarySem01Handle);
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <Starthightask+0x7c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 f9a4 	bl	8002fec <osSemaphoreRelease>
    osDelay(500);
 8000ca4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca8:	f002 f90b 	bl	8002ec2 <osDelay>
  {
 8000cac:	bf00      	nop
 8000cae:	e7c9      	b.n	8000c44 <Starthightask+0x8>
 8000cb0:	08005688 	.word	0x08005688
 8000cb4:	20000280 	.word	0x20000280
 8000cb8:	200002d4 	.word	0x200002d4
 8000cbc:	080056b8 	.word	0x080056b8
 8000cc0:	080056dc 	.word	0x080056dc

08000cc4 <Startlowtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlowtask */
void Startlowtask(void const * argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startlowtask */
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered LOWTask and waiting for semaphore\n\r";
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <Startlowtask+0x84>)
 8000cce:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen (str1), 100);
 8000cd0:	6978      	ldr	r0, [r7, #20]
 8000cd2:	f7ff fa8d 	bl	80001f0 <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	2364      	movs	r3, #100	@ 0x64
 8000cdc:	6979      	ldr	r1, [r7, #20]
 8000cde:	481b      	ldr	r0, [pc, #108]	@ (8000d4c <Startlowtask+0x88>)
 8000ce0:	f001 fcb6 	bl	8002650 <HAL_UART_Transmit>

		osSemaphoreWait(BinarySem01Handle, osWaitForever);
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <Startlowtask+0x8c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 f92f 	bl	8002f50 <osSemaphoreWait>

		char *str3 = "Semaphore acquired by LOW Task\n\r";
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <Startlowtask+0x90>)
 8000cf4:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *) str3, strlen (str3), 100);
 8000cf6:	6938      	ldr	r0, [r7, #16]
 8000cf8:	f7ff fa7a 	bl	80001f0 <strlen>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	2364      	movs	r3, #100	@ 0x64
 8000d02:	6939      	ldr	r1, [r7, #16]
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <Startlowtask+0x88>)
 8000d06:	f001 fca3 	bl	8002650 <HAL_UART_Transmit>

		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));  // wait till the pin go low
 8000d0a:	bf00      	nop
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <Startlowtask+0x94>)
 8000d10:	f000 fc60 	bl	80015d4 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f8      	bne.n	8000d0c <Startlowtask+0x48>

		char *str2 = "Leaving LOWTask and releasing Semaphore\n\n\r";
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <Startlowtask+0x98>)
 8000d1c:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen (str2), 100);
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f7ff fa66 	bl	80001f0 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	2364      	movs	r3, #100	@ 0x64
 8000d2a:	68f9      	ldr	r1, [r7, #12]
 8000d2c:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <Startlowtask+0x88>)
 8000d2e:	f001 fc8f 	bl	8002650 <HAL_UART_Transmit>

		osSemaphoreRelease(BinarySem01Handle);
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <Startlowtask+0x8c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 f958 	bl	8002fec <osSemaphoreRelease>
		osDelay(500);
 8000d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d40:	f002 f8bf 	bl	8002ec2 <osDelay>
  {
 8000d44:	e7c2      	b.n	8000ccc <Startlowtask+0x8>
 8000d46:	bf00      	nop
 8000d48:	08005708 	.word	0x08005708
 8000d4c:	20000280 	.word	0x20000280
 8000d50:	200002d4 	.word	0x200002d4
 8000d54:	08005734 	.word	0x08005734
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	08005758 	.word	0x08005758

08000d60 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END Startlowtask */
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d72:	f000 f981 	bl	8001078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40000c00 	.word	0x40000c00

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <Error_Handler+0x8>

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_MspInit+0x54>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <HAL_MspInit+0x54>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x54>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <HAL_MspInit+0x54>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <HAL_MspInit+0x54>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_MspInit+0x54>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	f06f 0001 	mvn.w	r0, #1
 8000dd6:	f000 fa27 	bl	8001228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	@ (8000e6c <HAL_UART_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	4a17      	ldr	r2, [pc, #92]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a10      	ldr	r2, [pc, #64]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e54:	2307      	movs	r3, #7
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <HAL_UART_MspInit+0x8c>)
 8000e60:	f000 fa0c 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	@ 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000

08000e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	@ 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <HAL_InitTick+0xe4>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	4a32      	ldr	r2, [pc, #200]	@ (8000f5c <HAL_InitTick+0xe4>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e98:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <HAL_InitTick+0xe4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea4:	f107 0210 	add.w	r2, r7, #16
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 f8aa 	bl	8002008 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ebe:	f001 f87b 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8000ec2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ec4:	e004      	b.n	8000ed0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ec6:	f001 f877 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed2:	4a23      	ldr	r2, [pc, #140]	@ (8000f60 <HAL_InitTick+0xe8>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	0c9b      	lsrs	r3, r3, #18
 8000eda:	3b01      	subs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ede:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <HAL_InitTick+0xec>)
 8000ee0:	4a21      	ldr	r2, [pc, #132]	@ (8000f68 <HAL_InitTick+0xf0>)
 8000ee2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <HAL_InitTick+0xec>)
 8000ee6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eea:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000eec:	4a1d      	ldr	r2, [pc, #116]	@ (8000f64 <HAL_InitTick+0xec>)
 8000eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <HAL_InitTick+0xec>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <HAL_InitTick+0xec>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <HAL_InitTick+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000f04:	4817      	ldr	r0, [pc, #92]	@ (8000f64 <HAL_InitTick+0xec>)
 8000f06:	f001 f8b1 	bl	800206c <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d11b      	bne.n	8000f50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <HAL_InitTick+0xec>)
 8000f1a:	f001 f901 	bl	8002120 <HAL_TIM_Base_Start_IT>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d111      	bne.n	8000f50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f2c:	2032      	movs	r0, #50	@ 0x32
 8000f2e:	f000 f997 	bl	8001260 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d808      	bhi.n	8000f4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	2032      	movs	r0, #50	@ 0x32
 8000f3e:	f000 f973 	bl	8001228 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_InitTick+0xf4>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	e002      	b.n	8000f50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3738      	adds	r7, #56	@ 0x38
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	431bde83 	.word	0x431bde83
 8000f64:	200002d8 	.word	0x200002d8
 8000f68:	40000c00 	.word	0x40000c00
 8000f6c:	20000004 	.word	0x20000004

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <NMI_Handler+0x4>

08000f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <MemManage_Handler+0x4>

08000f88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <TIM5_IRQHandler+0x10>)
 8000fae:	f001 f927 	bl	8002200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002d8 	.word	0x200002d8

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe4:	f7ff ffea 	bl	8000fbc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800100e:	f004 faab 	bl	8005568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fa87 	bl	8000524 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001018:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001024:	080057b4 	.word	0x080057b4
  ldr r2, =_sbss
 8001028:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800102c:	20004078 	.word	0x20004078

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f8d8 	bl	8001212 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f7ff ff08 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fe92 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	20000320 	.word	0x20000320

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000320 	.word	0x20000320

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	@ (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff4c 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123a:	f7ff ff61 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800123e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	6978      	ldr	r0, [r7, #20]
 8001246:	f7ff ffb1 	bl	80011ac <NVIC_EncodePriority>
 800124a:	4602      	mov	r2, r0
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff80 	bl	8001158 <__NVIC_SetPriority>
}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff54 	bl	800111c <__NVIC_EnableIRQ>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e177      	b.n	8001588 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 8166 	bne.w	8001582 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d005      	beq.n	80012ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d130      	bne.n	8001330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 0201 	and.w	r2, r3, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b03      	cmp	r3, #3
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0203 	and.w	r2, r3, #3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80c0 	beq.w	8001582 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b66      	ldr	r3, [pc, #408]	@ (80015a0 <HAL_GPIO_Init+0x324>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	4a65      	ldr	r2, [pc, #404]	@ (80015a0 <HAL_GPIO_Init+0x324>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001410:	6453      	str	r3, [r2, #68]	@ 0x44
 8001412:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <HAL_GPIO_Init+0x324>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141e:	4a61      	ldr	r2, [pc, #388]	@ (80015a4 <HAL_GPIO_Init+0x328>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a58      	ldr	r2, [pc, #352]	@ (80015a8 <HAL_GPIO_Init+0x32c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d037      	beq.n	80014ba <HAL_GPIO_Init+0x23e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a57      	ldr	r2, [pc, #348]	@ (80015ac <HAL_GPIO_Init+0x330>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d031      	beq.n	80014b6 <HAL_GPIO_Init+0x23a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a56      	ldr	r2, [pc, #344]	@ (80015b0 <HAL_GPIO_Init+0x334>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d02b      	beq.n	80014b2 <HAL_GPIO_Init+0x236>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a55      	ldr	r2, [pc, #340]	@ (80015b4 <HAL_GPIO_Init+0x338>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x232>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a54      	ldr	r2, [pc, #336]	@ (80015b8 <HAL_GPIO_Init+0x33c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x22e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a53      	ldr	r2, [pc, #332]	@ (80015bc <HAL_GPIO_Init+0x340>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x22a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	@ (80015c0 <HAL_GPIO_Init+0x344>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a51      	ldr	r2, [pc, #324]	@ (80015c4 <HAL_GPIO_Init+0x348>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x222>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a50      	ldr	r2, [pc, #320]	@ (80015c8 <HAL_GPIO_Init+0x34c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x21e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	@ (80015cc <HAL_GPIO_Init+0x350>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x21a>
 8001492:	2309      	movs	r3, #9
 8001494:	e012      	b.n	80014bc <HAL_GPIO_Init+0x240>
 8001496:	230a      	movs	r3, #10
 8001498:	e010      	b.n	80014bc <HAL_GPIO_Init+0x240>
 800149a:	2308      	movs	r3, #8
 800149c:	e00e      	b.n	80014bc <HAL_GPIO_Init+0x240>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00c      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	@ (80015a4 <HAL_GPIO_Init+0x328>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <HAL_GPIO_Init+0x354>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fe:	4a34      	ldr	r2, [pc, #208]	@ (80015d0 <HAL_GPIO_Init+0x354>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001504:	4b32      	ldr	r3, [pc, #200]	@ (80015d0 <HAL_GPIO_Init+0x354>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001528:	4a29      	ldr	r2, [pc, #164]	@ (80015d0 <HAL_GPIO_Init+0x354>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152e:	4b28      	ldr	r3, [pc, #160]	@ (80015d0 <HAL_GPIO_Init+0x354>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001552:	4a1f      	ldr	r2, [pc, #124]	@ (80015d0 <HAL_GPIO_Init+0x354>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <HAL_GPIO_Init+0x354>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <HAL_GPIO_Init+0x354>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f ae84 	bls.w	8001298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40021c00 	.word	0x40021c00
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40022400 	.word	0x40022400
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a1f      	ldr	r2, [pc, #124]	@ (80016c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_PWREx_EnableOverDrive+0x94>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff fd1c 	bl	80010a0 <HAL_GetTick>
 8001668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800166a:	e009      	b.n	8001680 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800166c:	f7ff fd18 	bl	80010a0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800167a:	d901      	bls.n	8001680 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e01f      	b.n	80016c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800168c:	d1ee      	bne.n	800166c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001694:	f7ff fd04 	bl	80010a0 <HAL_GetTick>
 8001698:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800169a:	e009      	b.n	80016b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800169c:	f7ff fd00 	bl	80010a0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016aa:	d901      	bls.n	80016b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e007      	b.n	80016c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016b0:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016bc:	d1ee      	bne.n	800169c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	420e0040 	.word	0x420e0040
 80016d0:	40007000 	.word	0x40007000
 80016d4:	420e0044 	.word	0x420e0044

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e267      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d075      	beq.n	80017e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f6:	4b88      	ldr	r3, [pc, #544]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d00c      	beq.n	800171c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	4b85      	ldr	r3, [pc, #532]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800170a:	2b08      	cmp	r3, #8
 800170c:	d112      	bne.n	8001734 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170e:	4b82      	ldr	r3, [pc, #520]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800171a:	d10b      	bne.n	8001734 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	4b7e      	ldr	r3, [pc, #504]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d05b      	beq.n	80017e0 <HAL_RCC_OscConfig+0x108>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d157      	bne.n	80017e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e242      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x74>
 800173e:	4b76      	ldr	r3, [pc, #472]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a75      	ldr	r2, [pc, #468]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001756:	4b70      	ldr	r3, [pc, #448]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6f      	ldr	r2, [pc, #444]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b6d      	ldr	r3, [pc, #436]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6c      	ldr	r2, [pc, #432]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
 8001770:	4b69      	ldr	r3, [pc, #420]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a68      	ldr	r2, [pc, #416]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b66      	ldr	r3, [pc, #408]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a65      	ldr	r2, [pc, #404]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fc86 	bl	80010a0 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fc82 	bl	80010a0 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e207      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xc0>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fc72 	bl	80010a0 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fc6e 	bl	80010a0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1f3      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	4b51      	ldr	r3, [pc, #324]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0xe8>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d063      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fa:	4b47      	ldr	r3, [pc, #284]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001806:	4b44      	ldr	r3, [pc, #272]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x152>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1c7      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b3b      	ldr	r3, [pc, #236]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4937      	ldr	r1, [pc, #220]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	e03a      	b.n	80018b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b34      	ldr	r3, [pc, #208]	@ (800191c <HAL_RCC_OscConfig+0x244>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fc27 	bl	80010a0 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fc23 	bl	80010a0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1a8      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4925      	ldr	r1, [pc, #148]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b24      	ldr	r3, [pc, #144]	@ (800191c <HAL_RCC_OscConfig+0x244>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fc06 	bl	80010a0 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fc02 	bl	80010a0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e187      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d036      	beq.n	8001930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d016      	beq.n	80018f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_RCC_OscConfig+0x248>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff fbe6 	bl	80010a0 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fbe2 	bl	80010a0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e167      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_RCC_OscConfig+0x240>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x200>
 80018f6:	e01b      	b.n	8001930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_RCC_OscConfig+0x248>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fbcf 	bl	80010a0 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	e00e      	b.n	8001924 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff fbcb 	bl	80010a0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d907      	bls.n	8001924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e150      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
 8001918:	40023800 	.word	0x40023800
 800191c:	42470000 	.word	0x42470000
 8001920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	4b88      	ldr	r3, [pc, #544]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ea      	bne.n	8001906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8097 	beq.w	8001a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001942:	4b81      	ldr	r3, [pc, #516]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b7d      	ldr	r3, [pc, #500]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4a7c      	ldr	r2, [pc, #496]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	@ 0x40
 800195e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b77      	ldr	r3, [pc, #476]	@ (8001b4c <HAL_RCC_OscConfig+0x474>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	4b74      	ldr	r3, [pc, #464]	@ (8001b4c <HAL_RCC_OscConfig+0x474>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a73      	ldr	r2, [pc, #460]	@ (8001b4c <HAL_RCC_OscConfig+0x474>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff fb8b 	bl	80010a0 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff fb87 	bl	80010a0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e10c      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b4c <HAL_RCC_OscConfig+0x474>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x2ea>
 80019b4:	4b64      	ldr	r3, [pc, #400]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b8:	4a63      	ldr	r2, [pc, #396]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c0:	e01c      	b.n	80019fc <HAL_RCC_OscConfig+0x324>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x30c>
 80019ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019da:	4a5b      	ldr	r2, [pc, #364]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0x324>
 80019e4:	4b58      	ldr	r3, [pc, #352]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e8:	4a57      	ldr	r2, [pc, #348]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f0:	4b55      	ldr	r3, [pc, #340]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f4:	4a54      	ldr	r2, [pc, #336]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 80019f6:	f023 0304 	bic.w	r3, r3, #4
 80019fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d015      	beq.n	8001a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff fb4c 	bl	80010a0 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb48 	bl	80010a0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0cb      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a22:	4b49      	ldr	r3, [pc, #292]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0ee      	beq.n	8001a0c <HAL_RCC_OscConfig+0x334>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff fb36 	bl	80010a0 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb32 	bl	80010a0 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0b5      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ee      	bne.n	8001a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b39      	ldr	r3, [pc, #228]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	4a38      	ldr	r2, [pc, #224]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a1 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a76:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d05c      	beq.n	8001b3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d141      	bne.n	8001b0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fb06 	bl	80010a0 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff fb02 	bl	80010a0 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e087      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	4b27      	ldr	r3, [pc, #156]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	491b      	ldr	r1, [pc, #108]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fadb 	bl	80010a0 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fad7 	bl	80010a0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e05c      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x416>
 8001b0c:	e054      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fac4 	bl	80010a0 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff fac0 	bl	80010a0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e045      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_RCC_OscConfig+0x470>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x444>
 8001b3a:	e03d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e038      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x4ec>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d028      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d121      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d11a      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d111      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0cc      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b68      	ldr	r3, [pc, #416]	@ (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d90c      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b65      	ldr	r3, [pc, #404]	@ (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	@ (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b8      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b59      	ldr	r3, [pc, #356]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a58      	ldr	r2, [pc, #352]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c34:	4b53      	ldr	r3, [pc, #332]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a52      	ldr	r2, [pc, #328]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b50      	ldr	r3, [pc, #320]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	494d      	ldr	r1, [pc, #308]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d044      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d119      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	4b3f      	ldr	r3, [pc, #252]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e067      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4934      	ldr	r1, [pc, #208]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f9f2 	bl	80010a0 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7ff f9ee 	bl	80010a0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e04f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d20c      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e032      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4916      	ldr	r1, [pc, #88]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d3a:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	490e      	ldr	r1, [pc, #56]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d4e:	f000 f821 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	490a      	ldr	r1, [pc, #40]	@ (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	5ccb      	ldrb	r3, [r1, r3]
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f882 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00
 8001d84:	40023800 	.word	0x40023800
 8001d88:	0800578c 	.word	0x0800578c
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d98:	b094      	sub	sp, #80	@ 0x50
 8001d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001da0:	2300      	movs	r3, #0
 8001da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001da4:	2300      	movs	r3, #0
 8001da6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dac:	4b79      	ldr	r3, [pc, #484]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d00d      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	f200 80e1 	bhi.w	8001f80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x3a>
 8001dc6:	e0db      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc8:	4b73      	ldr	r3, [pc, #460]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001dcc:	e0db      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dce:	4b73      	ldr	r3, [pc, #460]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x208>)
 8001dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dd2:	e0d8      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ddc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dde:	4b6d      	ldr	r3, [pc, #436]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d063      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dea:	4b6a      	ldr	r3, [pc, #424]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	099b      	lsrs	r3, r3, #6
 8001df0:	2200      	movs	r2, #0
 8001df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001df4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e06:	4622      	mov	r2, r4
 8001e08:	462b      	mov	r3, r5
 8001e0a:	f04f 0000 	mov.w	r0, #0
 8001e0e:	f04f 0100 	mov.w	r1, #0
 8001e12:	0159      	lsls	r1, r3, #5
 8001e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e18:	0150      	lsls	r0, r2, #5
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4621      	mov	r1, r4
 8001e20:	1a51      	subs	r1, r2, r1
 8001e22:	6139      	str	r1, [r7, #16]
 8001e24:	4629      	mov	r1, r5
 8001e26:	eb63 0301 	sbc.w	r3, r3, r1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e38:	4659      	mov	r1, fp
 8001e3a:	018b      	lsls	r3, r1, #6
 8001e3c:	4651      	mov	r1, sl
 8001e3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e42:	4651      	mov	r1, sl
 8001e44:	018a      	lsls	r2, r1, #6
 8001e46:	4651      	mov	r1, sl
 8001e48:	ebb2 0801 	subs.w	r8, r2, r1
 8001e4c:	4659      	mov	r1, fp
 8001e4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e66:	4690      	mov	r8, r2
 8001e68:	4699      	mov	r9, r3
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	eb18 0303 	adds.w	r3, r8, r3
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	462b      	mov	r3, r5
 8001e74:	eb49 0303 	adc.w	r3, r9, r3
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e86:	4629      	mov	r1, r5
 8001e88:	024b      	lsls	r3, r1, #9
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e90:	4621      	mov	r1, r4
 8001e92:	024a      	lsls	r2, r1, #9
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ea4:	f7fe f9ac 	bl	8000200 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4613      	mov	r3, r2
 8001eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001eb0:	e058      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb2:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ecc:	4642      	mov	r2, r8
 8001ece:	464b      	mov	r3, r9
 8001ed0:	f04f 0000 	mov.w	r0, #0
 8001ed4:	f04f 0100 	mov.w	r1, #0
 8001ed8:	0159      	lsls	r1, r3, #5
 8001eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ede:	0150      	lsls	r0, r2, #5
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4641      	mov	r1, r8
 8001ee6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eea:	4649      	mov	r1, r9
 8001eec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001efc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f04:	ebb2 040a 	subs.w	r4, r2, sl
 8001f08:	eb63 050b 	sbc.w	r5, r3, fp
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	00eb      	lsls	r3, r5, #3
 8001f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f1a:	00e2      	lsls	r2, r4, #3
 8001f1c:	4614      	mov	r4, r2
 8001f1e:	461d      	mov	r5, r3
 8001f20:	4643      	mov	r3, r8
 8001f22:	18e3      	adds	r3, r4, r3
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	464b      	mov	r3, r9
 8001f28:	eb45 0303 	adc.w	r3, r5, r3
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	028b      	lsls	r3, r1, #10
 8001f3e:	4621      	mov	r1, r4
 8001f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f44:	4621      	mov	r1, r4
 8001f46:	028a      	lsls	r2, r1, #10
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	61fa      	str	r2, [r7, #28]
 8001f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f58:	f7fe f952 	bl	8000200 <__aeabi_uldivmod>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4613      	mov	r3, r2
 8001f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f7e:	e002      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3750      	adds	r7, #80	@ 0x50
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	00f42400 	.word	0x00f42400
 8001f9c:	007a1200 	.word	0x007a1200

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fbc:	f7ff fff0 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	0800579c 	.word	0x0800579c

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fe4:	f7ff ffdc 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0b5b      	lsrs	r3, r3, #13
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	@ (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	0800579c 	.word	0x0800579c

08002008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	220f      	movs	r2, #15
 8002016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800204a:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <HAL_RCC_GetClockConfig+0x60>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 020f 	and.w	r2, r3, #15
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40023c00 	.word	0x40023c00

0800206c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e041      	b.n	8002102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f839 	bl	800210a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f000 f9c0 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d001      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e04e      	b.n	80021d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	@ (80021e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x80>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002162:	d01d      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x80>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1f      	ldr	r2, [pc, #124]	@ (80021e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x80>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1e      	ldr	r2, [pc, #120]	@ (80021ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x80>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x80>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x80>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a19      	ldr	r2, [pc, #100]	@ (80021f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x80>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a18      	ldr	r2, [pc, #96]	@ (80021fc <HAL_TIM_Base_Start_IT+0xdc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d111      	bne.n	80021c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d010      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c2:	e007      	b.n	80021d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40000800 	.word	0x40000800
 80021f0:	40000c00 	.word	0x40000c00
 80021f4:	40010400 	.word	0x40010400
 80021f8:	40014000 	.word	0x40014000
 80021fc:	40001800 	.word	0x40001800

08002200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d020      	beq.n	8002264 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0202 	mvn.w	r2, #2
 8002234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8d2 	bl	80023f4 <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8c4 	bl	80023e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f8d5 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d020      	beq.n	80022b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01b      	beq.n	80022b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0204 	mvn.w	r2, #4
 8002280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8ac 	bl	80023f4 <HAL_TIM_IC_CaptureCallback>
 800229c:	e005      	b.n	80022aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f89e 	bl	80023e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8af 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d020      	beq.n	80022fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0208 	mvn.w	r2, #8
 80022cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f886 	bl	80023f4 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f878 	bl	80023e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f889 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d020      	beq.n	8002348 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01b      	beq.n	8002348 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0210 	mvn.w	r2, #16
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2208      	movs	r2, #8
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f860 	bl	80023f4 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f852 	bl	80023e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f863 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0201 	mvn.w	r2, #1
 8002364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fcfa 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00c      	beq.n	8002390 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f906 	bl	800259c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f834 	bl	800241c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00c      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0220 	mvn.w	r2, #32
 80023d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8d8 	bl	8002588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a46      	ldr	r2, [pc, #280]	@ (800255c <TIM_Base_SetConfig+0x12c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800244e:	d00f      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a43      	ldr	r2, [pc, #268]	@ (8002560 <TIM_Base_SetConfig+0x130>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00b      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a42      	ldr	r2, [pc, #264]	@ (8002564 <TIM_Base_SetConfig+0x134>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a41      	ldr	r2, [pc, #260]	@ (8002568 <TIM_Base_SetConfig+0x138>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a40      	ldr	r2, [pc, #256]	@ (800256c <TIM_Base_SetConfig+0x13c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a35      	ldr	r2, [pc, #212]	@ (800255c <TIM_Base_SetConfig+0x12c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02b      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002490:	d027      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a32      	ldr	r2, [pc, #200]	@ (8002560 <TIM_Base_SetConfig+0x130>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d023      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a31      	ldr	r2, [pc, #196]	@ (8002564 <TIM_Base_SetConfig+0x134>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01f      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a30      	ldr	r2, [pc, #192]	@ (8002568 <TIM_Base_SetConfig+0x138>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01b      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a2f      	ldr	r2, [pc, #188]	@ (800256c <TIM_Base_SetConfig+0x13c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d017      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002570 <TIM_Base_SetConfig+0x140>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002574 <TIM_Base_SetConfig+0x144>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00f      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002578 <TIM_Base_SetConfig+0x148>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00b      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	@ (800257c <TIM_Base_SetConfig+0x14c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002580 <TIM_Base_SetConfig+0x150>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a29      	ldr	r2, [pc, #164]	@ (8002584 <TIM_Base_SetConfig+0x154>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d108      	bne.n	80024f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a10      	ldr	r2, [pc, #64]	@ (800255c <TIM_Base_SetConfig+0x12c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a12      	ldr	r2, [pc, #72]	@ (800256c <TIM_Base_SetConfig+0x13c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d103      	bne.n	8002530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f023 0201 	bic.w	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]
  }
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40010000 	.word	0x40010000
 8002560:	40000400 	.word	0x40000400
 8002564:	40000800 	.word	0x40000800
 8002568:	40000c00 	.word	0x40000c00
 800256c:	40010400 	.word	0x40010400
 8002570:	40014000 	.word	0x40014000
 8002574:	40014400 	.word	0x40014400
 8002578:	40014800 	.word	0x40014800
 800257c:	40001800 	.word	0x40001800
 8002580:	40001c00 	.word	0x40001c00
 8002584:	40002000 	.word	0x40002000

08002588 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e042      	b.n	8002648 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fc06 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	@ 0x24
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f973 	bl	80028e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	@ 0x28
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b20      	cmp	r3, #32
 800266e:	d175      	bne.n	800275c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_UART_Transmit+0x2c>
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e06e      	b.n	800275e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2221      	movs	r2, #33	@ 0x21
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800268e:	f7fe fd07 	bl	80010a0 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a8:	d108      	bne.n	80026bc <HAL_UART_Transmit+0x6c>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d104      	bne.n	80026bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	e003      	b.n	80026c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026c4:	e02e      	b.n	8002724 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	2180      	movs	r1, #128	@ 0x80
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f848 	bl	8002766 <UART_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e03a      	b.n	800275e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	3302      	adds	r3, #2
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e007      	b.n	8002716 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3301      	adds	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1cb      	bne.n	80026c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	2140      	movs	r1, #64	@ 0x40
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f814 	bl	8002766 <UART_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e006      	b.n	800275e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e000      	b.n	800275e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
  }
}
 800275e:	4618      	mov	r0, r3
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	4613      	mov	r3, r2
 8002774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002776:	e03b      	b.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800277e:	d037      	beq.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7fe fc8e 	bl	80010a0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	6a3a      	ldr	r2, [r7, #32]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <UART_WaitOnFlagUntilTimeout+0x30>
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e03a      	b.n	8002810 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d023      	beq.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b80      	cmp	r3, #128	@ 0x80
 80027ac:	d020      	beq.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b40      	cmp	r3, #64	@ 0x40
 80027b2:	d01d      	beq.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d116      	bne.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f81d 	bl	8002818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2208      	movs	r2, #8
 80027e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e00f      	b.n	8002810 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	429a      	cmp	r2, r3
 800280c:	d0b4      	beq.n	8002778 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002818:	b480      	push	{r7}
 800281a:	b095      	sub	sp, #84	@ 0x54
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	330c      	adds	r3, #12
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282a:	e853 3f00 	ldrex	r3, [r3]
 800282e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002840:	643a      	str	r2, [r7, #64]	@ 0x40
 8002842:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002848:	e841 2300 	strex	r3, r2, [r1]
 800284c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e5      	bne.n	8002820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	61fb      	str	r3, [r7, #28]
   return(result);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800287a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e5      	bne.n	8002854 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	2b01      	cmp	r3, #1
 800288e:	d119      	bne.n	80028c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	e853 3f00 	ldrex	r3, [r3]
 800289e:	60bb      	str	r3, [r7, #8]
   return(result);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f023 0310 	bic.w	r3, r3, #16
 80028a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b0:	61ba      	str	r2, [r7, #24]
 80028b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b4:	6979      	ldr	r1, [r7, #20]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	e841 2300 	strex	r3, r2, [r1]
 80028bc:	613b      	str	r3, [r7, #16]
   return(result);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e5      	bne.n	8002890 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028d2:	bf00      	nop
 80028d4:	3754      	adds	r7, #84	@ 0x54
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b0c0      	sub	sp, #256	@ 0x100
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	68d9      	ldr	r1, [r3, #12]
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	ea40 0301 	orr.w	r3, r0, r1
 8002908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	431a      	orrs	r2, r3
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002938:	f021 010c 	bic.w	r1, r1, #12
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002946:	430b      	orrs	r3, r1
 8002948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295a:	6999      	ldr	r1, [r3, #24]
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	ea40 0301 	orr.w	r3, r0, r1
 8002966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b8f      	ldr	r3, [pc, #572]	@ (8002bac <UART_SetConfig+0x2cc>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d005      	beq.n	8002980 <UART_SetConfig+0xa0>
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb0 <UART_SetConfig+0x2d0>)
 800297c:	429a      	cmp	r2, r3
 800297e:	d104      	bne.n	800298a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002980:	f7ff fb2e 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8002984:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002988:	e003      	b.n	8002992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800298a:	f7ff fb15 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 800298e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800299c:	f040 810c 	bne.w	8002bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029b2:	4622      	mov	r2, r4
 80029b4:	462b      	mov	r3, r5
 80029b6:	1891      	adds	r1, r2, r2
 80029b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029ba:	415b      	adcs	r3, r3
 80029bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029c2:	4621      	mov	r1, r4
 80029c4:	eb12 0801 	adds.w	r8, r2, r1
 80029c8:	4629      	mov	r1, r5
 80029ca:	eb43 0901 	adc.w	r9, r3, r1
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e2:	4690      	mov	r8, r2
 80029e4:	4699      	mov	r9, r3
 80029e6:	4623      	mov	r3, r4
 80029e8:	eb18 0303 	adds.w	r3, r8, r3
 80029ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029f0:	462b      	mov	r3, r5
 80029f2:	eb49 0303 	adc.w	r3, r9, r3
 80029f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a0e:	460b      	mov	r3, r1
 8002a10:	18db      	adds	r3, r3, r3
 8002a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a14:	4613      	mov	r3, r2
 8002a16:	eb42 0303 	adc.w	r3, r2, r3
 8002a1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a24:	f7fd fbec 	bl	8000200 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4b61      	ldr	r3, [pc, #388]	@ (8002bb4 <UART_SetConfig+0x2d4>)
 8002a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	011c      	lsls	r4, r3, #4
 8002a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	1891      	adds	r1, r2, r2
 8002a4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a50:	415b      	adcs	r3, r3
 8002a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a58:	4641      	mov	r1, r8
 8002a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a5e:	4649      	mov	r1, r9
 8002a60:	eb43 0b01 	adc.w	fp, r3, r1
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a78:	4692      	mov	sl, r2
 8002a7a:	469b      	mov	fp, r3
 8002a7c:	4643      	mov	r3, r8
 8002a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a86:	464b      	mov	r3, r9
 8002a88:	eb4b 0303 	adc.w	r3, fp, r3
 8002a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	18db      	adds	r3, r3, r3
 8002aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aaa:	4613      	mov	r3, r2
 8002aac:	eb42 0303 	adc.w	r3, r2, r3
 8002ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002aba:	f7fd fba1 	bl	8000200 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <UART_SetConfig+0x2d4>)
 8002ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2264      	movs	r2, #100	@ 0x64
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	1acb      	subs	r3, r1, r3
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ada:	4b36      	ldr	r3, [pc, #216]	@ (8002bb4 <UART_SetConfig+0x2d4>)
 8002adc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ae8:	441c      	add	r4, r3
 8002aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002afc:	4642      	mov	r2, r8
 8002afe:	464b      	mov	r3, r9
 8002b00:	1891      	adds	r1, r2, r2
 8002b02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b04:	415b      	adcs	r3, r3
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	1851      	adds	r1, r2, r1
 8002b10:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b12:	4649      	mov	r1, r9
 8002b14:	414b      	adcs	r3, r1
 8002b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b24:	4659      	mov	r1, fp
 8002b26:	00cb      	lsls	r3, r1, #3
 8002b28:	4651      	mov	r1, sl
 8002b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2e:	4651      	mov	r1, sl
 8002b30:	00ca      	lsls	r2, r1, #3
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	4642      	mov	r2, r8
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b40:	464b      	mov	r3, r9
 8002b42:	460a      	mov	r2, r1
 8002b44:	eb42 0303 	adc.w	r3, r2, r3
 8002b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b60:	460b      	mov	r3, r1
 8002b62:	18db      	adds	r3, r3, r3
 8002b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b66:	4613      	mov	r3, r2
 8002b68:	eb42 0303 	adc.w	r3, r2, r3
 8002b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b76:	f7fd fb43 	bl	8000200 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <UART_SetConfig+0x2d4>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	@ 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	3332      	adds	r3, #50	@ 0x32
 8002b92:	4a08      	ldr	r2, [pc, #32]	@ (8002bb4 <UART_SetConfig+0x2d4>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	f003 0207 	and.w	r2, r3, #7
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4422      	add	r2, r4
 8002ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ba8:	e106      	b.n	8002db8 <UART_SetConfig+0x4d8>
 8002baa:	bf00      	nop
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	40011400 	.word	0x40011400
 8002bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bca:	4642      	mov	r2, r8
 8002bcc:	464b      	mov	r3, r9
 8002bce:	1891      	adds	r1, r2, r2
 8002bd0:	6239      	str	r1, [r7, #32]
 8002bd2:	415b      	adcs	r3, r3
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bda:	4641      	mov	r1, r8
 8002bdc:	1854      	adds	r4, r2, r1
 8002bde:	4649      	mov	r1, r9
 8002be0:	eb43 0501 	adc.w	r5, r3, r1
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	00eb      	lsls	r3, r5, #3
 8002bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf2:	00e2      	lsls	r2, r4, #3
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	461d      	mov	r5, r3
 8002bf8:	4643      	mov	r3, r8
 8002bfa:	18e3      	adds	r3, r4, r3
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c00:	464b      	mov	r3, r9
 8002c02:	eb45 0303 	adc.w	r3, r5, r3
 8002c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c26:	4629      	mov	r1, r5
 8002c28:	008b      	lsls	r3, r1, #2
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c30:	4621      	mov	r1, r4
 8002c32:	008a      	lsls	r2, r1, #2
 8002c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c38:	f7fd fae2 	bl	8000200 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4b60      	ldr	r3, [pc, #384]	@ (8002dc4 <UART_SetConfig+0x4e4>)
 8002c42:	fba3 2302 	umull	r2, r3, r3, r2
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	011c      	lsls	r4, r3, #4
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	61b9      	str	r1, [r7, #24]
 8002c64:	415b      	adcs	r3, r3
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	1851      	adds	r1, r2, r1
 8002c70:	6139      	str	r1, [r7, #16]
 8002c72:	4649      	mov	r1, r9
 8002c74:	414b      	adcs	r3, r1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c84:	4659      	mov	r1, fp
 8002c86:	00cb      	lsls	r3, r1, #3
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8e:	4651      	mov	r1, sl
 8002c90:	00ca      	lsls	r2, r1, #3
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	008b      	lsls	r3, r1, #2
 8002cc8:	4641      	mov	r1, r8
 8002cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cce:	4641      	mov	r1, r8
 8002cd0:	008a      	lsls	r2, r1, #2
 8002cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cd6:	f7fd fa93 	bl	8000200 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <UART_SetConfig+0x4e4>)
 8002ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2264      	movs	r2, #100	@ 0x64
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	1acb      	subs	r3, r1, r3
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	3332      	adds	r3, #50	@ 0x32
 8002cf4:	4a33      	ldr	r2, [pc, #204]	@ (8002dc4 <UART_SetConfig+0x4e4>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d00:	441c      	add	r4, r3
 8002d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d06:	2200      	movs	r2, #0
 8002d08:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d10:	4642      	mov	r2, r8
 8002d12:	464b      	mov	r3, r9
 8002d14:	1891      	adds	r1, r2, r2
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d20:	4641      	mov	r1, r8
 8002d22:	1851      	adds	r1, r2, r1
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	4649      	mov	r1, r9
 8002d28:	414b      	adcs	r3, r1
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d38:	4659      	mov	r1, fp
 8002d3a:	00cb      	lsls	r3, r1, #3
 8002d3c:	4651      	mov	r1, sl
 8002d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d42:	4651      	mov	r1, sl
 8002d44:	00ca      	lsls	r2, r1, #3
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d52:	464b      	mov	r3, r9
 8002d54:	460a      	mov	r2, r1
 8002d56:	eb42 0303 	adc.w	r3, r2, r3
 8002d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d66:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d74:	4649      	mov	r1, r9
 8002d76:	008b      	lsls	r3, r1, #2
 8002d78:	4641      	mov	r1, r8
 8002d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7e:	4641      	mov	r1, r8
 8002d80:	008a      	lsls	r2, r1, #2
 8002d82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d86:	f7fd fa3b 	bl	8000200 <__aeabi_uldivmod>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <UART_SetConfig+0x4e4>)
 8002d90:	fba3 1302 	umull	r1, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	2164      	movs	r1, #100	@ 0x64
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	3332      	adds	r3, #50	@ 0x32
 8002da2:	4a08      	ldr	r2, [pc, #32]	@ (8002dc4 <UART_SetConfig+0x4e4>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	f003 020f 	and.w	r2, r3, #15
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4422      	add	r2, r4
 8002db6:	609a      	str	r2, [r3, #8]
}
 8002db8:	bf00      	nop
 8002dba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc4:	51eb851f 	.word	0x51eb851f

08002dc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dda:	2b84      	cmp	r3, #132	@ 0x84
 8002ddc:	d005      	beq.n	8002dea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002dde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	3303      	adds	r3, #3
 8002de8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dfe:	f3ef 8305 	mrs	r3, IPSR
 8002e02:	607b      	str	r3, [r7, #4]
  return(result);
 8002e04:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e20:	f001 f92a 	bl	8004078 <vTaskStartScheduler>
  
  return osOK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2c:	b089      	sub	sp, #36	@ 0x24
 8002e2e:	af04      	add	r7, sp, #16
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d020      	beq.n	8002e7e <osThreadCreate+0x54>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01c      	beq.n	8002e7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685c      	ldr	r4, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691e      	ldr	r6, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ffb6 	bl	8002dc8 <makeFreeRtosPriority>
 8002e5c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e66:	9202      	str	r2, [sp, #8]
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	9100      	str	r1, [sp, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4632      	mov	r2, r6
 8002e70:	4629      	mov	r1, r5
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 ff32 	bl	8003cdc <xTaskCreateStatic>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e01c      	b.n	8002eb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685c      	ldr	r4, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e8a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff98 	bl	8002dc8 <makeFreeRtosPriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	9200      	str	r2, [sp, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	4632      	mov	r2, r6
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f000 ff77 	bl	8003d9c <xTaskCreate>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d001      	beq.n	8002eb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e000      	b.n	8002eba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <osDelay+0x16>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	e000      	b.n	8002eda <osDelay+0x18>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 f896 	bl	800400c <vTaskDelay>
  
  return osOK;
 8002ee0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af02      	add	r7, sp, #8
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00f      	beq.n	8002f1c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10a      	bne.n	8002f18 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2203      	movs	r2, #3
 8002f08:	9200      	str	r2, [sp, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f000 f9c0 	bl	8003294 <xQueueGenericCreateStatic>
 8002f14:	4603      	mov	r3, r0
 8002f16:	e016      	b.n	8002f46 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e014      	b.n	8002f46 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d110      	bne.n	8002f44 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002f22:	2203      	movs	r2, #3
 8002f24:	2100      	movs	r1, #0
 8002f26:	2001      	movs	r0, #1
 8002f28:	f000 fa31 	bl	800338e <xQueueGenericCreate>
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <osSemaphoreCreate+0x56>
 8002f34:	2300      	movs	r3, #0
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa82 	bl	8003444 <xQueueGenericSend>
      return sema;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	e000      	b.n	8002f46 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002f44:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002f64:	2380      	movs	r3, #128	@ 0x80
 8002f66:	e03a      	b.n	8002fde <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f72:	d103      	bne.n	8002f7c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e009      	b.n	8002f90 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <osSemaphoreWait+0x40>
      ticks = 1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002f90:	f7ff ff32 	bl	8002df8 <inHandlerMode>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d017      	beq.n	8002fca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fcf0 	bl	8003988 <xQueueReceiveFromISR>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002fae:	23ff      	movs	r3, #255	@ 0xff
 8002fb0:	e015      	b.n	8002fde <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d011      	beq.n	8002fdc <osSemaphoreWait+0x8c>
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <osSemaphoreWait+0x98>)
 8002fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	e008      	b.n	8002fdc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fbcb 	bl	8003768 <xQueueSemaphoreTake>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d001      	beq.n	8002fdc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002fd8:	23ff      	movs	r3, #255	@ 0xff
 8002fda:	e000      	b.n	8002fde <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002ffc:	f7ff fefc 	bl	8002df8 <inHandlerMode>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003006:	f107 0308 	add.w	r3, r7, #8
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fb1b 	bl	8003648 <xQueueGiveFromISR>
 8003012:	4603      	mov	r3, r0
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003018:	23ff      	movs	r3, #255	@ 0xff
 800301a:	e017      	b.n	800304c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d013      	beq.n	800304a <osSemaphoreRelease+0x5e>
 8003022:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <osSemaphoreRelease+0x68>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	e00a      	b.n	800304a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003034:	2300      	movs	r3, #0
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa02 	bl	8003444 <xQueueGenericSend>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003046:	23ff      	movs	r3, #255	@ 0xff
 8003048:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800304a:	68fb      	ldr	r3, [r7, #12]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f103 0208 	add.w	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003070:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 0208 	add.w	r2, r3, #8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f103 0208 	add.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003110:	d103      	bne.n	800311a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e00c      	b.n	8003134 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3308      	adds	r3, #8
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e002      	b.n	8003128 <vListInsert+0x2e>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d2f6      	bcs.n	8003122 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6852      	ldr	r2, [r2, #4]
 800318c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d103      	bne.n	80031a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031ec:	f001 fea4 	bl	8004f38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	441a      	add	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321c:	3b01      	subs	r3, #1
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	22ff      	movs	r2, #255	@ 0xff
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	22ff      	movs	r2, #255	@ 0xff
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d114      	bne.n	800326c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01a      	beq.n	8003280 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3310      	adds	r3, #16
 800324e:	4618      	mov	r0, r3
 8003250:	f001 f95c 	bl	800450c <xTaskRemoveFromEventList>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <xQueueGenericReset+0xd0>)
 800325c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	e009      	b.n	8003280 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3310      	adds	r3, #16
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fef1 	bl	8003058 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3324      	adds	r3, #36	@ 0x24
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff feec 	bl	8003058 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003280:	f001 fe8c 	bl	8004f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08e      	sub	sp, #56	@ 0x38
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <xQueueGenericCreateStatic+0x56>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <xQueueGenericCreateStatic+0x5a>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueGenericCreateStatic+0x5c>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	623b      	str	r3, [r7, #32]
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <xQueueGenericCreateStatic+0x84>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <xQueueGenericCreateStatic+0x88>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <xQueueGenericCreateStatic+0x8a>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	61fb      	str	r3, [r7, #28]
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	e7fd      	b.n	8003336 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800333a:	2348      	movs	r3, #72	@ 0x48
 800333c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b48      	cmp	r3, #72	@ 0x48
 8003342:	d00b      	beq.n	800335c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	61bb      	str	r3, [r7, #24]
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800335c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003370:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f840 	bl	8003404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003386:	4618      	mov	r0, r3
 8003388:	3730      	adds	r7, #48	@ 0x30
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800338e:	b580      	push	{r7, lr}
 8003390:	b08a      	sub	sp, #40	@ 0x28
 8003392:	af02      	add	r7, sp, #8
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	4613      	mov	r3, r2
 800339a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <xQueueGenericCreate+0x2c>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	613b      	str	r3, [r7, #16]
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	e7fd      	b.n	80033b6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3348      	adds	r3, #72	@ 0x48
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fed7 	bl	800517c <pvPortMalloc>
 80033ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d011      	beq.n	80033fa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3348      	adds	r3, #72	@ 0x48
 80033de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033e8:	79fa      	ldrb	r2, [r7, #7]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f805 	bl	8003404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033fa:	69bb      	ldr	r3, [r7, #24]
	}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e002      	b.n	8003426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003432:	2101      	movs	r1, #1
 8003434:	69b8      	ldr	r0, [r7, #24]
 8003436:	f7ff fec3 	bl	80031c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08e      	sub	sp, #56	@ 0x38
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <xQueueGenericSend+0x34>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <xQueueGenericSend+0x42>
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <xQueueGenericSend+0x46>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xQueueGenericSend+0x48>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <xQueueGenericSend+0x64>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d103      	bne.n	80034b6 <xQueueGenericSend+0x72>
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <xQueueGenericSend+0x76>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <xQueueGenericSend+0x78>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xQueueGenericSend+0x94>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	623b      	str	r3, [r7, #32]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d8:	f001 f9d8 	bl	800488c <xTaskGetSchedulerState>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <xQueueGenericSend+0xa4>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <xQueueGenericSend+0xa8>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <xQueueGenericSend+0xaa>
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <xQueueGenericSend+0xc6>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	61fb      	str	r3, [r7, #28]
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800350a:	f001 fd15 	bl	8004f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <xQueueGenericSend+0xdc>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d129      	bne.n	8003574 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003526:	f000 fac9 	bl	8003abc <prvCopyDataToQueue>
 800352a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003536:	3324      	adds	r3, #36	@ 0x24
 8003538:	4618      	mov	r0, r3
 800353a:	f000 ffe7 	bl	800450c <xTaskRemoveFromEventList>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003544:	4b3f      	ldr	r3, [pc, #252]	@ (8003644 <xQueueGenericSend+0x200>)
 8003546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	e00a      	b.n	800356c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800355c:	4b39      	ldr	r3, [pc, #228]	@ (8003644 <xQueueGenericSend+0x200>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800356c:	f001 fd16 	bl	8004f9c <vPortExitCritical>
				return pdPASS;
 8003570:	2301      	movs	r3, #1
 8003572:	e063      	b.n	800363c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800357a:	f001 fd0f 	bl	8004f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800357e:	2300      	movs	r3, #0
 8003580:	e05c      	b.n	800363c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f821 	bl	80045d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003592:	2301      	movs	r3, #1
 8003594:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003596:	f001 fd01 	bl	8004f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800359a:	f000 fdcf 	bl	800413c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800359e:	f001 fccb 	bl	8004f38 <vPortEnterCritical>
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035ae:	d103      	bne.n	80035b8 <xQueueGenericSend+0x174>
 80035b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c4:	d103      	bne.n	80035ce <xQueueGenericSend+0x18a>
 80035c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035ce:	f001 fce5 	bl	8004f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035d2:	1d3a      	adds	r2, r7, #4
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 f810 	bl	8004600 <xTaskCheckForTimeOut>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d124      	bne.n	8003630 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035e8:	f000 fb60 	bl	8003cac <prvIsQueueFull>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d018      	beq.n	8003624 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	3310      	adds	r3, #16
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 ff60 	bl	80044c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003602:	f000 faeb 	bl	8003bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003606:	f000 fda7 	bl	8004158 <xTaskResumeAll>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f af7c 	bne.w	800350a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003612:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <xQueueGenericSend+0x200>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	e772      	b.n	800350a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003626:	f000 fad9 	bl	8003bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800362a:	f000 fd95 	bl	8004158 <xTaskResumeAll>
 800362e:	e76c      	b.n	800350a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003632:	f000 fad3 	bl	8003bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003636:	f000 fd8f 	bl	8004158 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800363a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800363c:	4618      	mov	r0, r3
 800363e:	3738      	adds	r7, #56	@ 0x38
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08e      	sub	sp, #56	@ 0x38
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	623b      	str	r3, [r7, #32]
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	61fb      	str	r3, [r7, #28]
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <xQueueGiveFromISR+0x5c>
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <xQueueGiveFromISR+0x60>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <xQueueGiveFromISR+0x62>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	61bb      	str	r3, [r7, #24]
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	e7fd      	b.n	80036c2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036c6:	f001 fd17 	bl	80050f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036ca:	f3ef 8211 	mrs	r2, BASEPRI
 80036ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	617a      	str	r2, [r7, #20]
 80036e0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d22b      	bcs.n	800374e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003708:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003710:	d112      	bne.n	8003738 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	3324      	adds	r3, #36	@ 0x24
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fef4 	bl	800450c <xTaskRemoveFromEventList>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e007      	b.n	8003748 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800373c:	3301      	adds	r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	b25a      	sxtb	r2, r3
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003748:	2301      	movs	r3, #1
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
 800374c:	e001      	b.n	8003752 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
 8003752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003754:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800375c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003760:	4618      	mov	r0, r3
 8003762:	3738      	adds	r7, #56	@ 0x38
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08e      	sub	sp, #56	@ 0x38
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003772:	2300      	movs	r3, #0
 8003774:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800377e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	623b      	str	r3, [r7, #32]
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61fb      	str	r3, [r7, #28]
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037bc:	f001 f866 	bl	800488c <xTaskGetSchedulerState>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <xQueueSemaphoreTake+0x64>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <xQueueSemaphoreTake+0x68>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <xQueueSemaphoreTake+0x6a>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <xQueueSemaphoreTake+0x86>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	61bb      	str	r3, [r7, #24]
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	e7fd      	b.n	80037ea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ee:	f001 fba3 	bl	8004f38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d024      	beq.n	8003848 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d104      	bne.n	8003818 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800380e:	f001 f9e9 	bl	8004be4 <pvTaskIncrementMutexHeldCount>
 8003812:	4602      	mov	r2, r0
 8003814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003816:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00f      	beq.n	8003840 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003822:	3310      	adds	r3, #16
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fe71 	bl	800450c <xTaskRemoveFromEventList>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003830:	4b54      	ldr	r3, [pc, #336]	@ (8003984 <xQueueSemaphoreTake+0x21c>)
 8003832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003840:	f001 fbac 	bl	8004f9c <vPortExitCritical>
				return pdPASS;
 8003844:	2301      	movs	r3, #1
 8003846:	e098      	b.n	800397a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d112      	bne.n	8003874 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	617b      	str	r3, [r7, #20]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800386c:	f001 fb96 	bl	8004f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003870:	2300      	movs	r3, #0
 8003872:	e082      	b.n	800397a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fea8 	bl	80045d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003888:	f001 fb88 	bl	8004f9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800388c:	f000 fc56 	bl	800413c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003890:	f001 fb52 	bl	8004f38 <vPortEnterCritical>
 8003894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003896:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800389a:	b25b      	sxtb	r3, r3
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d103      	bne.n	80038aa <xQueueSemaphoreTake+0x142>
 80038a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038b0:	b25b      	sxtb	r3, r3
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038b6:	d103      	bne.n	80038c0 <xQueueSemaphoreTake+0x158>
 80038b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038c0:	f001 fb6c 	bl	8004f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038c4:	463a      	mov	r2, r7
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fe97 	bl	8004600 <xTaskCheckForTimeOut>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d132      	bne.n	800393e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038da:	f000 f9d1 	bl	8003c80 <prvIsQueueEmpty>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d026      	beq.n	8003932 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80038ec:	f001 fb24 	bl	8004f38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 ffe7 	bl	80048c8 <xTaskPriorityInherit>
 80038fa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80038fc:	f001 fb4e 	bl	8004f9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003902:	3324      	adds	r3, #36	@ 0x24
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fdd9 	bl	80044c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800390e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003910:	f000 f964 	bl	8003bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003914:	f000 fc20 	bl	8004158 <xTaskResumeAll>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	f47f af67 	bne.w	80037ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003920:	4b18      	ldr	r3, [pc, #96]	@ (8003984 <xQueueSemaphoreTake+0x21c>)
 8003922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	e75d      	b.n	80037ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003932:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003934:	f000 f952 	bl	8003bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003938:	f000 fc0e 	bl	8004158 <xTaskResumeAll>
 800393c:	e757      	b.n	80037ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800393e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003940:	f000 f94c 	bl	8003bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003944:	f000 fc08 	bl	8004158 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003948:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800394a:	f000 f999 	bl	8003c80 <prvIsQueueEmpty>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	f43f af4c 	beq.w	80037ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800395c:	f001 faec 	bl	8004f38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003960:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003962:	f000 f893 	bl	8003a8c <prvGetDisinheritPriorityAfterTimeout>
 8003966:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800396e:	4618      	mov	r0, r3
 8003970:	f001 f8a8 	bl	8004ac4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003974:	f001 fb12 	bl	8004f9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003978:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800397a:	4618      	mov	r0, r3
 800397c:	3738      	adds	r7, #56	@ 0x38
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	@ 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	623b      	str	r3, [r7, #32]
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <xQueueReceiveFromISR+0x3c>
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <xQueueReceiveFromISR+0x40>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <xQueueReceiveFromISR+0x42>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10b      	bne.n	80039e6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	61fb      	str	r3, [r7, #28]
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039e6:	f001 fb87 	bl	80050f8 <vPortValidateInterruptPriority>
	__asm volatile
 80039ea:	f3ef 8211 	mrs	r2, BASEPRI
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	61ba      	str	r2, [r7, #24]
 8003a00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003a02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02f      	beq.n	8003a72 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a20:	f000 f8b6 	bl	8003b90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	1e5a      	subs	r2, r3, #1
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003a2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a34:	d112      	bne.n	8003a5c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	3310      	adds	r3, #16
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fd62 	bl	800450c <xTaskRemoveFromEventList>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00e      	beq.n	8003a6c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e007      	b.n	8003a6c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a60:	3301      	adds	r3, #1
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	b25a      	sxtb	r2, r3
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a70:	e001      	b.n	8003a76 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f383 8811 	msr	BASEPRI, r3
}
 8003a80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3738      	adds	r7, #56	@ 0x38
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1c3 0307 	rsb	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e001      	b.n	8003aae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003aae:	68fb      	ldr	r3, [r7, #12]
	}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d14d      	bne.n	8003b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 ff64 	bl	80049b4 <xTaskPriorityDisinherit>
 8003aec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	e043      	b.n	8003b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d119      	bne.n	8003b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6858      	ldr	r0, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	f001 fd52 	bl	80055b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	441a      	add	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d32b      	bcc.n	8003b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	e026      	b.n	8003b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68d8      	ldr	r0, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	f001 fd38 	bl	80055b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	425b      	negs	r3, r3
 8003b4a:	441a      	add	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d207      	bcs.n	8003b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	425b      	negs	r3, r3
 8003b66:	441a      	add	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d105      	bne.n	8003b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	441a      	add	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d303      	bcc.n	8003bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6838      	ldr	r0, [r7, #0]
 8003bd0:	f001 fcee 	bl	80055b0 <memcpy>
	}
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003be4:	f001 f9a8 	bl	8004f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bf0:	e011      	b.n	8003c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d012      	beq.n	8003c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3324      	adds	r3, #36	@ 0x24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fc84 	bl	800450c <xTaskRemoveFromEventList>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c0a:	f000 fd5d 	bl	80046c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dce9      	bgt.n	8003bf2 <prvUnlockQueue+0x16>
 8003c1e:	e000      	b.n	8003c22 <prvUnlockQueue+0x46>
					break;
 8003c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	22ff      	movs	r2, #255	@ 0xff
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c2a:	f001 f9b7 	bl	8004f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c2e:	f001 f983 	bl	8004f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c3a:	e011      	b.n	8003c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d012      	beq.n	8003c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3310      	adds	r3, #16
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fc5f 	bl	800450c <xTaskRemoveFromEventList>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c54:	f000 fd38 	bl	80046c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c58:	7bbb      	ldrb	r3, [r7, #14]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dce9      	bgt.n	8003c3c <prvUnlockQueue+0x60>
 8003c68:	e000      	b.n	8003c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	22ff      	movs	r2, #255	@ 0xff
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003c74:	f001 f992 	bl	8004f9c <vPortExitCritical>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c88:	f001 f956 	bl	8004f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e001      	b.n	8003c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9e:	f001 f97d 	bl	8004f9c <vPortExitCritical>

	return xReturn;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb4:	f001 f940 	bl	8004f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d102      	bne.n	8003cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e001      	b.n	8003cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f001 f965 	bl	8004f9c <vPortExitCritical>

	return xReturn;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08e      	sub	sp, #56	@ 0x38
 8003ce0:	af04      	add	r7, sp, #16
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	623b      	str	r3, [r7, #32]
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	e7fd      	b.n	8003d04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10b      	bne.n	8003d26 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	61fb      	str	r3, [r7, #28]
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	e7fd      	b.n	8003d22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d26:	2354      	movs	r3, #84	@ 0x54
 8003d28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b54      	cmp	r3, #84	@ 0x54
 8003d2e:	d00b      	beq.n	8003d48 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	61bb      	str	r3, [r7, #24]
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01e      	beq.n	8003d8e <xTaskCreateStatic+0xb2>
 8003d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01b      	beq.n	8003d8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d68:	2300      	movs	r3, #0
 8003d6a:	9303      	str	r3, [sp, #12]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	9302      	str	r3, [sp, #8]
 8003d70:	f107 0314 	add.w	r3, r7, #20
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f850 	bl	8003e26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d88:	f000 f8d6 	bl	8003f38 <prvAddNewTaskToReadyList>
 8003d8c:	e001      	b.n	8003d92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d92:	697b      	ldr	r3, [r7, #20]
	}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3728      	adds	r7, #40	@ 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	@ 0x30
 8003da0:	af04      	add	r7, sp, #16
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 f9e3 	bl	800517c <pvPortMalloc>
 8003db6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00e      	beq.n	8003ddc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003dbe:	2054      	movs	r0, #84	@ 0x54
 8003dc0:	f001 f9dc 	bl	800517c <pvPortMalloc>
 8003dc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dd2:	e005      	b.n	8003de0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dd4:	6978      	ldr	r0, [r7, #20]
 8003dd6:	f001 fa9f 	bl	8005318 <vPortFree>
 8003dda:	e001      	b.n	8003de0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	2300      	movs	r3, #0
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	9302      	str	r3, [sp, #8]
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f80e 	bl	8003e26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e0a:	69f8      	ldr	r0, [r7, #28]
 8003e0c:	f000 f894 	bl	8003f38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e10:	2301      	movs	r3, #1
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e002      	b.n	8003e1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
	}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b088      	sub	sp, #32
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f023 0307 	bic.w	r3, r3, #7
 8003e4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	617b      	str	r3, [r7, #20]
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01f      	beq.n	8003eb6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	e012      	b.n	8003ea2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	7819      	ldrb	r1, [r3, #0]
 8003e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3334      	adds	r3, #52	@ 0x34
 8003e8c:	460a      	mov	r2, r1
 8003e8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d006      	beq.n	8003eaa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	2b0f      	cmp	r3, #15
 8003ea6:	d9e9      	bls.n	8003e7c <prvInitialiseNewTask+0x56>
 8003ea8:	e000      	b.n	8003eac <prvInitialiseNewTask+0x86>
			{
				break;
 8003eaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003eb4:	e003      	b.n	8003ebe <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d901      	bls.n	8003ec8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ec4:	2306      	movs	r3, #6
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	3304      	adds	r3, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff f8da 	bl	8003098 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f8d5 	bl	8003098 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	f1c3 0207 	rsb	r2, r3, #7
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f02:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f06:	2200      	movs	r2, #0
 8003f08:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	68f9      	ldr	r1, [r7, #12]
 8003f16:	69b8      	ldr	r0, [r7, #24]
 8003f18:	f000 fede 	bl	8004cd8 <pxPortInitialiseStack>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f2e:	bf00      	nop
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f40:	f000 fffa 	bl	8004f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff0 <prvAddNewTaskToReadyList+0xb8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	4a29      	ldr	r2, [pc, #164]	@ (8003ff0 <prvAddNewTaskToReadyList+0xb8>)
 8003f4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <prvAddNewTaskToReadyList+0xbc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f56:	4a27      	ldr	r2, [pc, #156]	@ (8003ff4 <prvAddNewTaskToReadyList+0xbc>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <prvAddNewTaskToReadyList+0xb8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d110      	bne.n	8003f86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f64:	f000 fbd4 	bl	8004710 <prvInitialiseTaskLists>
 8003f68:	e00d      	b.n	8003f86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f6a:	4b23      	ldr	r3, [pc, #140]	@ (8003ff8 <prvAddNewTaskToReadyList+0xc0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f72:	4b20      	ldr	r3, [pc, #128]	@ (8003ff4 <prvAddNewTaskToReadyList+0xbc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d802      	bhi.n	8003f86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f80:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff4 <prvAddNewTaskToReadyList+0xbc>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f86:	4b1d      	ldr	r3, [pc, #116]	@ (8003ffc <prvAddNewTaskToReadyList+0xc4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <prvAddNewTaskToReadyList+0xc4>)
 8003f8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <prvAddNewTaskToReadyList+0xc8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	4a18      	ldr	r2, [pc, #96]	@ (8004000 <prvAddNewTaskToReadyList+0xc8>)
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <prvAddNewTaskToReadyList+0xcc>)
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7ff f87a 	bl	80030b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fbe:	f000 ffed 	bl	8004f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <prvAddNewTaskToReadyList+0xc0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00e      	beq.n	8003fe8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <prvAddNewTaskToReadyList+0xbc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d207      	bcs.n	8003fe8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <prvAddNewTaskToReadyList+0xd0>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000424 	.word	0x20000424
 8003ff4:	20000324 	.word	0x20000324
 8003ff8:	20000430 	.word	0x20000430
 8003ffc:	20000440 	.word	0x20000440
 8004000:	2000042c 	.word	0x2000042c
 8004004:	20000328 	.word	0x20000328
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d018      	beq.n	8004050 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800401e:	4b14      	ldr	r3, [pc, #80]	@ (8004070 <vTaskDelay+0x64>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <vTaskDelay+0x32>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	60bb      	str	r3, [r7, #8]
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	e7fd      	b.n	800403a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800403e:	f000 f87d 	bl	800413c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004042:	2100      	movs	r1, #0
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fde1 	bl	8004c0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800404a:	f000 f885 	bl	8004158 <xTaskResumeAll>
 800404e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004056:	4b07      	ldr	r3, [pc, #28]	@ (8004074 <vTaskDelay+0x68>)
 8004058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	2000044c 	.word	0x2000044c
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	@ 0x28
 800407c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004086:	463a      	mov	r2, r7
 8004088:	1d39      	adds	r1, r7, #4
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	4618      	mov	r0, r3
 8004090:	f7fc fa2e 	bl	80004f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004094:	6839      	ldr	r1, [r7, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	9202      	str	r2, [sp, #8]
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	2300      	movs	r3, #0
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2300      	movs	r3, #0
 80040a4:	460a      	mov	r2, r1
 80040a6:	491f      	ldr	r1, [pc, #124]	@ (8004124 <vTaskStartScheduler+0xac>)
 80040a8:	481f      	ldr	r0, [pc, #124]	@ (8004128 <vTaskStartScheduler+0xb0>)
 80040aa:	f7ff fe17 	bl	8003cdc <xTaskCreateStatic>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4a1e      	ldr	r2, [pc, #120]	@ (800412c <vTaskStartScheduler+0xb4>)
 80040b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040b4:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <vTaskStartScheduler+0xb4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040bc:	2301      	movs	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e001      	b.n	80040c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d116      	bne.n	80040fa <vTaskStartScheduler+0x82>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	613b      	str	r3, [r7, #16]
}
 80040de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040e0:	4b13      	ldr	r3, [pc, #76]	@ (8004130 <vTaskStartScheduler+0xb8>)
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040e8:	4b12      	ldr	r3, [pc, #72]	@ (8004134 <vTaskStartScheduler+0xbc>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040ee:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <vTaskStartScheduler+0xc0>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040f4:	f000 fe7c 	bl	8004df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040f8:	e00f      	b.n	800411a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004100:	d10b      	bne.n	800411a <vTaskStartScheduler+0xa2>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	60fb      	str	r3, [r7, #12]
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <vTaskStartScheduler+0x9e>
}
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	08005784 	.word	0x08005784
 8004128:	080046e1 	.word	0x080046e1
 800412c:	20000448 	.word	0x20000448
 8004130:	20000444 	.word	0x20000444
 8004134:	20000430 	.word	0x20000430
 8004138:	20000428 	.word	0x20000428

0800413c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004140:	4b04      	ldr	r3, [pc, #16]	@ (8004154 <vTaskSuspendAll+0x18>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	4a03      	ldr	r2, [pc, #12]	@ (8004154 <vTaskSuspendAll+0x18>)
 8004148:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800414a:	bf00      	nop
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	2000044c 	.word	0x2000044c

08004158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004166:	4b42      	ldr	r3, [pc, #264]	@ (8004270 <xTaskResumeAll+0x118>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <xTaskResumeAll+0x2e>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	603b      	str	r3, [r7, #0]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004186:	f000 fed7 	bl	8004f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800418a:	4b39      	ldr	r3, [pc, #228]	@ (8004270 <xTaskResumeAll+0x118>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3b01      	subs	r3, #1
 8004190:	4a37      	ldr	r2, [pc, #220]	@ (8004270 <xTaskResumeAll+0x118>)
 8004192:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004194:	4b36      	ldr	r3, [pc, #216]	@ (8004270 <xTaskResumeAll+0x118>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d161      	bne.n	8004260 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800419c:	4b35      	ldr	r3, [pc, #212]	@ (8004274 <xTaskResumeAll+0x11c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d05d      	beq.n	8004260 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041a4:	e02e      	b.n	8004204 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a6:	4b34      	ldr	r3, [pc, #208]	@ (8004278 <xTaskResumeAll+0x120>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3318      	adds	r3, #24
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe ffda 	bl	800316c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe ffd5 	bl	800316c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	2201      	movs	r2, #1
 80041c8:	409a      	lsls	r2, r3
 80041ca:	4b2c      	ldr	r3, [pc, #176]	@ (800427c <xTaskResumeAll+0x124>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	4a2a      	ldr	r2, [pc, #168]	@ (800427c <xTaskResumeAll+0x124>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4a27      	ldr	r2, [pc, #156]	@ (8004280 <xTaskResumeAll+0x128>)
 80041e2:	441a      	add	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f7fe ff61 	bl	80030b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f4:	4b23      	ldr	r3, [pc, #140]	@ (8004284 <xTaskResumeAll+0x12c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041fe:	4b22      	ldr	r3, [pc, #136]	@ (8004288 <xTaskResumeAll+0x130>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004204:	4b1c      	ldr	r3, [pc, #112]	@ (8004278 <xTaskResumeAll+0x120>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1cc      	bne.n	80041a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004212:	f000 fb1b 	bl	800484c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004216:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <xTaskResumeAll+0x134>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d010      	beq.n	8004244 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004222:	f000 f837 	bl	8004294 <xTaskIncrementTick>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800422c:	4b16      	ldr	r3, [pc, #88]	@ (8004288 <xTaskResumeAll+0x130>)
 800422e:	2201      	movs	r2, #1
 8004230:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3b01      	subs	r3, #1
 8004236:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f1      	bne.n	8004222 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800423e:	4b13      	ldr	r3, [pc, #76]	@ (800428c <xTaskResumeAll+0x134>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004244:	4b10      	ldr	r3, [pc, #64]	@ (8004288 <xTaskResumeAll+0x130>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004250:	4b0f      	ldr	r3, [pc, #60]	@ (8004290 <xTaskResumeAll+0x138>)
 8004252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004260:	f000 fe9c 	bl	8004f9c <vPortExitCritical>

	return xAlreadyYielded;
 8004264:	68bb      	ldr	r3, [r7, #8]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	2000044c 	.word	0x2000044c
 8004274:	20000424 	.word	0x20000424
 8004278:	200003e4 	.word	0x200003e4
 800427c:	2000042c 	.word	0x2000042c
 8004280:	20000328 	.word	0x20000328
 8004284:	20000324 	.word	0x20000324
 8004288:	20000438 	.word	0x20000438
 800428c:	20000434 	.word	0x20000434
 8004290:	e000ed04 	.word	0xe000ed04

08004294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429e:	4b4f      	ldr	r3, [pc, #316]	@ (80043dc <xTaskIncrementTick+0x148>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 808f 	bne.w	80043c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042a8:	4b4d      	ldr	r3, [pc, #308]	@ (80043e0 <xTaskIncrementTick+0x14c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042b0:	4a4b      	ldr	r2, [pc, #300]	@ (80043e0 <xTaskIncrementTick+0x14c>)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d121      	bne.n	8004300 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80042bc:	4b49      	ldr	r3, [pc, #292]	@ (80043e4 <xTaskIncrementTick+0x150>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <xTaskIncrementTick+0x4a>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	603b      	str	r3, [r7, #0]
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	e7fd      	b.n	80042da <xTaskIncrementTick+0x46>
 80042de:	4b41      	ldr	r3, [pc, #260]	@ (80043e4 <xTaskIncrementTick+0x150>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	4b40      	ldr	r3, [pc, #256]	@ (80043e8 <xTaskIncrementTick+0x154>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3e      	ldr	r2, [pc, #248]	@ (80043e4 <xTaskIncrementTick+0x150>)
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4a3e      	ldr	r2, [pc, #248]	@ (80043e8 <xTaskIncrementTick+0x154>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b3e      	ldr	r3, [pc, #248]	@ (80043ec <xTaskIncrementTick+0x158>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a3c      	ldr	r2, [pc, #240]	@ (80043ec <xTaskIncrementTick+0x158>)
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	f000 faa6 	bl	800484c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004300:	4b3b      	ldr	r3, [pc, #236]	@ (80043f0 <xTaskIncrementTick+0x15c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	429a      	cmp	r2, r3
 8004308:	d348      	bcc.n	800439c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800430a:	4b36      	ldr	r3, [pc, #216]	@ (80043e4 <xTaskIncrementTick+0x150>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d104      	bne.n	800431e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004314:	4b36      	ldr	r3, [pc, #216]	@ (80043f0 <xTaskIncrementTick+0x15c>)
 8004316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800431a:	601a      	str	r2, [r3, #0]
					break;
 800431c:	e03e      	b.n	800439c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800431e:	4b31      	ldr	r3, [pc, #196]	@ (80043e4 <xTaskIncrementTick+0x150>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d203      	bcs.n	800433e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004336:	4a2e      	ldr	r2, [pc, #184]	@ (80043f0 <xTaskIncrementTick+0x15c>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800433c:	e02e      	b.n	800439c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3304      	adds	r3, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe ff12 	bl	800316c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434c:	2b00      	cmp	r3, #0
 800434e:	d004      	beq.n	800435a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3318      	adds	r3, #24
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe ff09 	bl	800316c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	2201      	movs	r2, #1
 8004360:	409a      	lsls	r2, r3
 8004362:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <xTaskIncrementTick+0x160>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <xTaskIncrementTick+0x160>)
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4a1f      	ldr	r2, [pc, #124]	@ (80043f8 <xTaskIncrementTick+0x164>)
 800437a:	441a      	add	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7fe fe95 	bl	80030b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <xTaskIncrementTick+0x168>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	429a      	cmp	r2, r3
 8004394:	d3b9      	bcc.n	800430a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004396:	2301      	movs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439a:	e7b6      	b.n	800430a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800439c:	4b17      	ldr	r3, [pc, #92]	@ (80043fc <xTaskIncrementTick+0x168>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a2:	4915      	ldr	r1, [pc, #84]	@ (80043f8 <xTaskIncrementTick+0x164>)
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d901      	bls.n	80043b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043b8:	4b11      	ldr	r3, [pc, #68]	@ (8004400 <xTaskIncrementTick+0x16c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80043c0:	2301      	movs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e004      	b.n	80043d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <xTaskIncrementTick+0x170>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3301      	adds	r3, #1
 80043cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004404 <xTaskIncrementTick+0x170>)
 80043ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043d0:	697b      	ldr	r3, [r7, #20]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	2000044c 	.word	0x2000044c
 80043e0:	20000428 	.word	0x20000428
 80043e4:	200003dc 	.word	0x200003dc
 80043e8:	200003e0 	.word	0x200003e0
 80043ec:	2000043c 	.word	0x2000043c
 80043f0:	20000444 	.word	0x20000444
 80043f4:	2000042c 	.word	0x2000042c
 80043f8:	20000328 	.word	0x20000328
 80043fc:	20000324 	.word	0x20000324
 8004400:	20000438 	.word	0x20000438
 8004404:	20000434 	.word	0x20000434

08004408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800440e:	4b27      	ldr	r3, [pc, #156]	@ (80044ac <vTaskSwitchContext+0xa4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004416:	4b26      	ldr	r3, [pc, #152]	@ (80044b0 <vTaskSwitchContext+0xa8>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800441c:	e040      	b.n	80044a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800441e:	4b24      	ldr	r3, [pc, #144]	@ (80044b0 <vTaskSwitchContext+0xa8>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004424:	4b23      	ldr	r3, [pc, #140]	@ (80044b4 <vTaskSwitchContext+0xac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	fab3 f383 	clz	r3, r3
 8004430:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004432:	7afb      	ldrb	r3, [r7, #11]
 8004434:	f1c3 031f 	rsb	r3, r3, #31
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	491f      	ldr	r1, [pc, #124]	@ (80044b8 <vTaskSwitchContext+0xb0>)
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <vTaskSwitchContext+0x5e>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <vTaskSwitchContext+0x5a>
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4a11      	ldr	r2, [pc, #68]	@ (80044b8 <vTaskSwitchContext+0xb0>)
 8004472:	4413      	add	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	3308      	adds	r3, #8
 8004488:	429a      	cmp	r2, r3
 800448a:	d104      	bne.n	8004496 <vTaskSwitchContext+0x8e>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a07      	ldr	r2, [pc, #28]	@ (80044bc <vTaskSwitchContext+0xb4>)
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	2000044c 	.word	0x2000044c
 80044b0:	20000438 	.word	0x20000438
 80044b4:	2000042c 	.word	0x2000042c
 80044b8:	20000328 	.word	0x20000328
 80044bc:	20000324 	.word	0x20000324

080044c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044e8:	4b07      	ldr	r3, [pc, #28]	@ (8004508 <vTaskPlaceOnEventList+0x48>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3318      	adds	r3, #24
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7fe fe02 	bl	80030fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044f6:	2101      	movs	r1, #1
 80044f8:	6838      	ldr	r0, [r7, #0]
 80044fa:	f000 fb87 	bl	8004c0c <prvAddCurrentTaskToDelayedList>
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000324 	.word	0x20000324

0800450c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60fb      	str	r3, [r7, #12]
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	e7fd      	b.n	8004536 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3318      	adds	r3, #24
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fe14 	bl	800316c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004544:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <xTaskRemoveFromEventList+0xb0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d11c      	bne.n	8004586 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	3304      	adds	r3, #4
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe fe0b 	bl	800316c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	2201      	movs	r2, #1
 800455c:	409a      	lsls	r2, r3
 800455e:	4b18      	ldr	r3, [pc, #96]	@ (80045c0 <xTaskRemoveFromEventList+0xb4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4313      	orrs	r3, r2
 8004564:	4a16      	ldr	r2, [pc, #88]	@ (80045c0 <xTaskRemoveFromEventList+0xb4>)
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4a13      	ldr	r2, [pc, #76]	@ (80045c4 <xTaskRemoveFromEventList+0xb8>)
 8004576:	441a      	add	r2, r3
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7fe fd97 	bl	80030b2 <vListInsertEnd>
 8004584:	e005      	b.n	8004592 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3318      	adds	r3, #24
 800458a:	4619      	mov	r1, r3
 800458c:	480e      	ldr	r0, [pc, #56]	@ (80045c8 <xTaskRemoveFromEventList+0xbc>)
 800458e:	f7fe fd90 	bl	80030b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004596:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <xTaskRemoveFromEventList+0xc0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d905      	bls.n	80045ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045a4:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <xTaskRemoveFromEventList+0xc4>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e001      	b.n	80045b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80045b0:	697b      	ldr	r3, [r7, #20]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	2000044c 	.word	0x2000044c
 80045c0:	2000042c 	.word	0x2000042c
 80045c4:	20000328 	.word	0x20000328
 80045c8:	200003e4 	.word	0x200003e4
 80045cc:	20000324 	.word	0x20000324
 80045d0:	20000438 	.word	0x20000438

080045d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <vTaskInternalSetTimeOutState+0x24>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <vTaskInternalSetTimeOutState+0x28>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	605a      	str	r2, [r3, #4]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	2000043c 	.word	0x2000043c
 80045fc:	20000428 	.word	0x20000428

08004600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	613b      	str	r3, [r7, #16]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10b      	bne.n	8004646 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60fb      	str	r3, [r7, #12]
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004646:	f000 fc77 	bl	8004f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800464a:	4b1d      	ldr	r3, [pc, #116]	@ (80046c0 <xTaskCheckForTimeOut+0xc0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004662:	d102      	bne.n	800466a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	e023      	b.n	80046b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <xTaskCheckForTimeOut+0xc4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d007      	beq.n	8004686 <xTaskCheckForTimeOut+0x86>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e015      	b.n	80046b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	429a      	cmp	r2, r3
 800468e:	d20b      	bcs.n	80046a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff99 	bl	80045d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e004      	b.n	80046b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046b2:	f000 fc73 	bl	8004f9c <vPortExitCritical>

	return xReturn;
 80046b6:	69fb      	ldr	r3, [r7, #28]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000428 	.word	0x20000428
 80046c4:	2000043c 	.word	0x2000043c

080046c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <vTaskMissedYield+0x14>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000438 	.word	0x20000438

080046e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046e8:	f000 f852 	bl	8004790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <prvIdleTask+0x28>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d9f9      	bls.n	80046e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046f4:	4b05      	ldr	r3, [pc, #20]	@ (800470c <prvIdleTask+0x2c>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004704:	e7f0      	b.n	80046e8 <prvIdleTask+0x8>
 8004706:	bf00      	nop
 8004708:	20000328 	.word	0x20000328
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]
 800471a:	e00c      	b.n	8004736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a12      	ldr	r2, [pc, #72]	@ (8004770 <prvInitialiseTaskLists+0x60>)
 8004728:	4413      	add	r3, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fc94 	bl	8003058 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3301      	adds	r3, #1
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b06      	cmp	r3, #6
 800473a:	d9ef      	bls.n	800471c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800473c:	480d      	ldr	r0, [pc, #52]	@ (8004774 <prvInitialiseTaskLists+0x64>)
 800473e:	f7fe fc8b 	bl	8003058 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004742:	480d      	ldr	r0, [pc, #52]	@ (8004778 <prvInitialiseTaskLists+0x68>)
 8004744:	f7fe fc88 	bl	8003058 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004748:	480c      	ldr	r0, [pc, #48]	@ (800477c <prvInitialiseTaskLists+0x6c>)
 800474a:	f7fe fc85 	bl	8003058 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800474e:	480c      	ldr	r0, [pc, #48]	@ (8004780 <prvInitialiseTaskLists+0x70>)
 8004750:	f7fe fc82 	bl	8003058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004754:	480b      	ldr	r0, [pc, #44]	@ (8004784 <prvInitialiseTaskLists+0x74>)
 8004756:	f7fe fc7f 	bl	8003058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800475a:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <prvInitialiseTaskLists+0x78>)
 800475c:	4a05      	ldr	r2, [pc, #20]	@ (8004774 <prvInitialiseTaskLists+0x64>)
 800475e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004760:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <prvInitialiseTaskLists+0x7c>)
 8004762:	4a05      	ldr	r2, [pc, #20]	@ (8004778 <prvInitialiseTaskLists+0x68>)
 8004764:	601a      	str	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000328 	.word	0x20000328
 8004774:	200003b4 	.word	0x200003b4
 8004778:	200003c8 	.word	0x200003c8
 800477c:	200003e4 	.word	0x200003e4
 8004780:	200003f8 	.word	0x200003f8
 8004784:	20000410 	.word	0x20000410
 8004788:	200003dc 	.word	0x200003dc
 800478c:	200003e0 	.word	0x200003e0

08004790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004796:	e019      	b.n	80047cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004798:	f000 fbce 	bl	8004f38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479c:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <prvCheckTasksWaitingTermination+0x50>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe fcdf 	bl	800316c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <prvCheckTasksWaitingTermination+0x54>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	4a0b      	ldr	r2, [pc, #44]	@ (80047e4 <prvCheckTasksWaitingTermination+0x54>)
 80047b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <prvCheckTasksWaitingTermination+0x58>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3b01      	subs	r3, #1
 80047be:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <prvCheckTasksWaitingTermination+0x58>)
 80047c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047c2:	f000 fbeb 	bl	8004f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f810 	bl	80047ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047cc:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <prvCheckTasksWaitingTermination+0x58>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e1      	bne.n	8004798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	200003f8 	.word	0x200003f8
 80047e4:	20000424 	.word	0x20000424
 80047e8:	2000040c 	.word	0x2000040c

080047ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d108      	bne.n	8004810 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fd88 	bl	8005318 <vPortFree>
				vPortFree( pxTCB );
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fd85 	bl	8005318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800480e:	e019      	b.n	8004844 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004816:	2b01      	cmp	r3, #1
 8004818:	d103      	bne.n	8004822 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fd7c 	bl	8005318 <vPortFree>
	}
 8004820:	e010      	b.n	8004844 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004828:	2b02      	cmp	r3, #2
 800482a:	d00b      	beq.n	8004844 <prvDeleteTCB+0x58>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60fb      	str	r3, [r7, #12]
}
 800483e:	bf00      	nop
 8004840:	bf00      	nop
 8004842:	e7fd      	b.n	8004840 <prvDeleteTCB+0x54>
	}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004852:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <prvResetNextTaskUnblockTime+0x38>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <prvResetNextTaskUnblockTime+0x3c>)
 800485e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004862:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004864:	e008      	b.n	8004878 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004866:	4b07      	ldr	r3, [pc, #28]	@ (8004884 <prvResetNextTaskUnblockTime+0x38>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a04      	ldr	r2, [pc, #16]	@ (8004888 <prvResetNextTaskUnblockTime+0x3c>)
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	200003dc 	.word	0x200003dc
 8004888:	20000444 	.word	0x20000444

0800488c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004892:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <xTaskGetSchedulerState+0x34>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800489a:	2301      	movs	r3, #1
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e008      	b.n	80048b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a0:	4b08      	ldr	r3, [pc, #32]	@ (80048c4 <xTaskGetSchedulerState+0x38>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048a8:	2302      	movs	r3, #2
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	e001      	b.n	80048b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048b2:	687b      	ldr	r3, [r7, #4]
	}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	20000430 	.word	0x20000430
 80048c4:	2000044c 	.word	0x2000044c

080048c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d05e      	beq.n	800499c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e2:	4b31      	ldr	r3, [pc, #196]	@ (80049a8 <xTaskPriorityInherit+0xe0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d24e      	bcs.n	800498a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db06      	blt.n	8004902 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f4:	4b2c      	ldr	r3, [pc, #176]	@ (80049a8 <xTaskPriorityInherit+0xe0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fa:	f1c3 0207 	rsb	r2, r3, #7
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6959      	ldr	r1, [r3, #20]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4a26      	ldr	r2, [pc, #152]	@ (80049ac <xTaskPriorityInherit+0xe4>)
 8004914:	4413      	add	r3, r2
 8004916:	4299      	cmp	r1, r3
 8004918:	d12f      	bne.n	800497a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	3304      	adds	r3, #4
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fc24 	bl	800316c <uxListRemove>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	2201      	movs	r2, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43da      	mvns	r2, r3
 8004936:	4b1e      	ldr	r3, [pc, #120]	@ (80049b0 <xTaskPriorityInherit+0xe8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4013      	ands	r3, r2
 800493c:	4a1c      	ldr	r2, [pc, #112]	@ (80049b0 <xTaskPriorityInherit+0xe8>)
 800493e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004940:	4b19      	ldr	r3, [pc, #100]	@ (80049a8 <xTaskPriorityInherit+0xe0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	2201      	movs	r2, #1
 8004950:	409a      	lsls	r2, r3
 8004952:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <xTaskPriorityInherit+0xe8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	4a15      	ldr	r2, [pc, #84]	@ (80049b0 <xTaskPriorityInherit+0xe8>)
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <xTaskPriorityInherit+0xe4>)
 800496a:	441a      	add	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7fe fb9d 	bl	80030b2 <vListInsertEnd>
 8004978:	e004      	b.n	8004984 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800497a:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <xTaskPriorityInherit+0xe0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e008      	b.n	800499c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800498e:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <xTaskPriorityInherit+0xe0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	429a      	cmp	r2, r3
 8004996:	d201      	bcs.n	800499c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800499c:	68fb      	ldr	r3, [r7, #12]
	}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000324 	.word	0x20000324
 80049ac:	20000328 	.word	0x20000328
 80049b0:	2000042c 	.word	0x2000042c

080049b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d070      	beq.n	8004aac <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049ca:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab8 <xTaskPriorityDisinherit+0x104>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d00b      	beq.n	80049ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60bb      	str	r3, [r7, #8]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a10:	1e5a      	subs	r2, r3, #1
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d044      	beq.n	8004aac <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d140      	bne.n	8004aac <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fb9c 	bl	800316c <uxListRemove>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d115      	bne.n	8004a66 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3e:	491f      	ldr	r1, [pc, #124]	@ (8004abc <xTaskPriorityDisinherit+0x108>)
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xTaskPriorityDisinherit+0xb2>
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a54:	2201      	movs	r2, #1
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	4b18      	ldr	r3, [pc, #96]	@ (8004ac0 <xTaskPriorityDisinherit+0x10c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4013      	ands	r3, r2
 8004a62:	4a17      	ldr	r2, [pc, #92]	@ (8004ac0 <xTaskPriorityDisinherit+0x10c>)
 8004a64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a72:	f1c3 0207 	rsb	r2, r3, #7
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7e:	2201      	movs	r2, #1
 8004a80:	409a      	lsls	r2, r3
 8004a82:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac0 <xTaskPriorityDisinherit+0x10c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac0 <xTaskPriorityDisinherit+0x10c>)
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <xTaskPriorityDisinherit+0x108>)
 8004a9a:	441a      	add	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fe fb05 	bl	80030b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004aac:	697b      	ldr	r3, [r7, #20]
	}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000324 	.word	0x20000324
 8004abc:	20000328 	.word	0x20000328
 8004ac0:	2000042c 	.word	0x2000042c

08004ac4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d079      	beq.n	8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	60fb      	str	r3, [r7, #12]
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d902      	bls.n	8004b0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e002      	b.n	8004b12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d059      	beq.n	8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d154      	bne.n	8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004b26:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d10b      	bne.n	8004b48 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60bb      	str	r3, [r7, #8]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	db04      	blt.n	8004b66 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f1c3 0207 	rsb	r2, r3, #7
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	6959      	ldr	r1, [r3, #20]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b76:	4413      	add	r3, r2
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	d129      	bne.n	8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe faf3 	bl	800316c <uxListRemove>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	2201      	movs	r2, #1
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43da      	mvns	r2, r3
 8004b98:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	4a10      	ldr	r2, [pc, #64]	@ (8004be0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004ba0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8004be0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4a06      	ldr	r2, [pc, #24]	@ (8004bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004bc2:	441a      	add	r2, r3
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f7fe fa71 	bl	80030b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bd0:	bf00      	nop
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000324 	.word	0x20000324
 8004bdc:	20000328 	.word	0x20000328
 8004be0:	2000042c 	.word	0x2000042c

08004be4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004be8:	4b07      	ldr	r3, [pc, #28]	@ (8004c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bf6:	3201      	adds	r2, #1
 8004bf8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004bfa:	4b03      	ldr	r3, [pc, #12]	@ (8004c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
	}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	20000324 	.word	0x20000324

08004c0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c16:	4b29      	ldr	r3, [pc, #164]	@ (8004cbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c1c:	4b28      	ldr	r3, [pc, #160]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe faa2 	bl	800316c <uxListRemove>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c2e:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c34:	2201      	movs	r2, #1
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	4b21      	ldr	r3, [pc, #132]	@ (8004cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4013      	ands	r3, r2
 8004c42:	4a20      	ldr	r2, [pc, #128]	@ (8004cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c4c:	d10a      	bne.n	8004c64 <prvAddCurrentTaskToDelayedList+0x58>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c54:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	481a      	ldr	r0, [pc, #104]	@ (8004cc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c5e:	f7fe fa28 	bl	80030b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c62:	e026      	b.n	8004cb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c6c:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d209      	bcs.n	8004c90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c7c:	4b13      	ldr	r3, [pc, #76]	@ (8004ccc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7fe fa36 	bl	80030fa <vListInsert>
}
 8004c8e:	e010      	b.n	8004cb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c90:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7fe fa2c 	bl	80030fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d202      	bcs.n	8004cb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cac:	4a09      	ldr	r2, [pc, #36]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6013      	str	r3, [r2, #0]
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000428 	.word	0x20000428
 8004cc0:	20000324 	.word	0x20000324
 8004cc4:	2000042c 	.word	0x2000042c
 8004cc8:	20000410 	.word	0x20000410
 8004ccc:	200003e0 	.word	0x200003e0
 8004cd0:	200003dc 	.word	0x200003dc
 8004cd4:	20000444 	.word	0x20000444

08004cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3b04      	subs	r3, #4
 8004ce8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3b04      	subs	r3, #4
 8004cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f023 0201 	bic.w	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3b04      	subs	r3, #4
 8004d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d08:	4a0c      	ldr	r2, [pc, #48]	@ (8004d3c <pxPortInitialiseStack+0x64>)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3b14      	subs	r3, #20
 8004d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3b04      	subs	r3, #4
 8004d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f06f 0202 	mvn.w	r2, #2
 8004d26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3b20      	subs	r3, #32
 8004d2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	08004d41 	.word	0x08004d41

08004d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d4a:	4b13      	ldr	r3, [pc, #76]	@ (8004d98 <prvTaskExitError+0x58>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d52:	d00b      	beq.n	8004d6c <prvTaskExitError+0x2c>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	60fb      	str	r3, [r7, #12]
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <prvTaskExitError+0x28>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60bb      	str	r3, [r7, #8]
}
 8004d7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d80:	bf00      	nop
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0fc      	beq.n	8004d82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	2000000c 	.word	0x2000000c
 8004d9c:	00000000 	.word	0x00000000

08004da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004da0:	4b07      	ldr	r3, [pc, #28]	@ (8004dc0 <pxCurrentTCBConst2>)
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	6808      	ldr	r0, [r1, #0]
 8004da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004daa:	f380 8809 	msr	PSP, r0
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8811 	msr	BASEPRI, r0
 8004dba:	4770      	bx	lr
 8004dbc:	f3af 8000 	nop.w

08004dc0 <pxCurrentTCBConst2>:
 8004dc0:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop

08004dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dc8:	4808      	ldr	r0, [pc, #32]	@ (8004dec <prvPortStartFirstTask+0x24>)
 8004dca:	6800      	ldr	r0, [r0, #0]
 8004dcc:	6800      	ldr	r0, [r0, #0]
 8004dce:	f380 8808 	msr	MSP, r0
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f380 8814 	msr	CONTROL, r0
 8004dda:	b662      	cpsie	i
 8004ddc:	b661      	cpsie	f
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	df00      	svc	0
 8004de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dea:	bf00      	nop
 8004dec:	e000ed08 	.word	0xe000ed08

08004df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004df6:	4b47      	ldr	r3, [pc, #284]	@ (8004f14 <xPortStartScheduler+0x124>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a47      	ldr	r2, [pc, #284]	@ (8004f18 <xPortStartScheduler+0x128>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10b      	bne.n	8004e18 <xPortStartScheduler+0x28>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	613b      	str	r3, [r7, #16]
}
 8004e12:	bf00      	nop
 8004e14:	bf00      	nop
 8004e16:	e7fd      	b.n	8004e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e18:	4b3e      	ldr	r3, [pc, #248]	@ (8004f14 <xPortStartScheduler+0x124>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f1c <xPortStartScheduler+0x12c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10b      	bne.n	8004e3a <xPortStartScheduler+0x4a>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60fb      	str	r3, [r7, #12]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e3a:	4b39      	ldr	r3, [pc, #228]	@ (8004f20 <xPortStartScheduler+0x130>)
 8004e3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	22ff      	movs	r2, #255	@ 0xff
 8004e4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	4b31      	ldr	r3, [pc, #196]	@ (8004f24 <xPortStartScheduler+0x134>)
 8004e60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e62:	4b31      	ldr	r3, [pc, #196]	@ (8004f28 <xPortStartScheduler+0x138>)
 8004e64:	2207      	movs	r2, #7
 8004e66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e68:	e009      	b.n	8004e7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f28 <xPortStartScheduler+0x138>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <xPortStartScheduler+0x138>)
 8004e72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d0ef      	beq.n	8004e6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e8a:	4b27      	ldr	r3, [pc, #156]	@ (8004f28 <xPortStartScheduler+0x138>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1c3 0307 	rsb	r3, r3, #7
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d00b      	beq.n	8004eae <xPortStartScheduler+0xbe>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60bb      	str	r3, [r7, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eae:	4b1e      	ldr	r3, [pc, #120]	@ (8004f28 <xPortStartScheduler+0x138>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f28 <xPortStartScheduler+0x138>)
 8004eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f28 <xPortStartScheduler+0x138>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ec0:	4a19      	ldr	r2, [pc, #100]	@ (8004f28 <xPortStartScheduler+0x138>)
 8004ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ecc:	4b17      	ldr	r3, [pc, #92]	@ (8004f2c <xPortStartScheduler+0x13c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a16      	ldr	r2, [pc, #88]	@ (8004f2c <xPortStartScheduler+0x13c>)
 8004ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ed8:	4b14      	ldr	r3, [pc, #80]	@ (8004f2c <xPortStartScheduler+0x13c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a13      	ldr	r2, [pc, #76]	@ (8004f2c <xPortStartScheduler+0x13c>)
 8004ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ee4:	f000 f8da 	bl	800509c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ee8:	4b11      	ldr	r3, [pc, #68]	@ (8004f30 <xPortStartScheduler+0x140>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004eee:	f000 f8f9 	bl	80050e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ef2:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <xPortStartScheduler+0x144>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8004f34 <xPortStartScheduler+0x144>)
 8004ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004efc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004efe:	f7ff ff63 	bl	8004dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f02:	f7ff fa81 	bl	8004408 <vTaskSwitchContext>
	prvTaskExitError();
 8004f06:	f7ff ff1b 	bl	8004d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	e000ed00 	.word	0xe000ed00
 8004f18:	410fc271 	.word	0x410fc271
 8004f1c:	410fc270 	.word	0x410fc270
 8004f20:	e000e400 	.word	0xe000e400
 8004f24:	20000450 	.word	0x20000450
 8004f28:	20000454 	.word	0x20000454
 8004f2c:	e000ed20 	.word	0xe000ed20
 8004f30:	2000000c 	.word	0x2000000c
 8004f34:	e000ef34 	.word	0xe000ef34

08004f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
}
 8004f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f52:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <vPortEnterCritical+0x5c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	4a0e      	ldr	r2, [pc, #56]	@ (8004f94 <vPortEnterCritical+0x5c>)
 8004f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <vPortEnterCritical+0x5c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d110      	bne.n	8004f86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f64:	4b0c      	ldr	r3, [pc, #48]	@ (8004f98 <vPortEnterCritical+0x60>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <vPortEnterCritical+0x4e>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	603b      	str	r3, [r7, #0]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <vPortEnterCritical+0x4a>
	}
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	2000000c 	.word	0x2000000c
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fa2:	4b12      	ldr	r3, [pc, #72]	@ (8004fec <vPortExitCritical+0x50>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <vPortExitCritical+0x26>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	607b      	str	r3, [r7, #4]
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	e7fd      	b.n	8004fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fec <vPortExitCritical+0x50>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	4a08      	ldr	r2, [pc, #32]	@ (8004fec <vPortExitCritical+0x50>)
 8004fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <vPortExitCritical+0x50>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <vPortExitCritical+0x44>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f383 8811 	msr	BASEPRI, r3
}
 8004fde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	2000000c 	.word	0x2000000c

08004ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ff0:	f3ef 8009 	mrs	r0, PSP
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <pxCurrentTCBConst>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	f01e 0f10 	tst.w	lr, #16
 8005000:	bf08      	it	eq
 8005002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500a:	6010      	str	r0, [r2, #0]
 800500c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005014:	f380 8811 	msr	BASEPRI, r0
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f7ff f9f2 	bl	8004408 <vTaskSwitchContext>
 8005024:	f04f 0000 	mov.w	r0, #0
 8005028:	f380 8811 	msr	BASEPRI, r0
 800502c:	bc09      	pop	{r0, r3}
 800502e:	6819      	ldr	r1, [r3, #0]
 8005030:	6808      	ldr	r0, [r1, #0]
 8005032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005036:	f01e 0f10 	tst.w	lr, #16
 800503a:	bf08      	it	eq
 800503c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005040:	f380 8809 	msr	PSP, r0
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	f3af 8000 	nop.w

08005050 <pxCurrentTCBConst>:
 8005050:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	607b      	str	r3, [r7, #4]
}
 8005070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005072:	f7ff f90f 	bl	8004294 <xTaskIncrementTick>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800507c:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <SysTick_Handler+0x40>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f383 8811 	msr	BASEPRI, r3
}
 800508e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050a0:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <vPortSetupTimerInterrupt+0x34>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050a6:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <vPortSetupTimerInterrupt+0x38>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050ac:	4b0a      	ldr	r3, [pc, #40]	@ (80050d8 <vPortSetupTimerInterrupt+0x3c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	@ (80050dc <vPortSetupTimerInterrupt+0x40>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	4a09      	ldr	r2, [pc, #36]	@ (80050e0 <vPortSetupTimerInterrupt+0x44>)
 80050ba:	3b01      	subs	r3, #1
 80050bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050be:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <vPortSetupTimerInterrupt+0x34>)
 80050c0:	2207      	movs	r2, #7
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e010 	.word	0xe000e010
 80050d4:	e000e018 	.word	0xe000e018
 80050d8:	20000000 	.word	0x20000000
 80050dc:	10624dd3 	.word	0x10624dd3
 80050e0:	e000e014 	.word	0xe000e014

080050e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80050f4 <vPortEnableVFP+0x10>
 80050e8:	6801      	ldr	r1, [r0, #0]
 80050ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80050ee:	6001      	str	r1, [r0, #0]
 80050f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050f2:	bf00      	nop
 80050f4:	e000ed88 	.word	0xe000ed88

080050f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050fe:	f3ef 8305 	mrs	r3, IPSR
 8005102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b0f      	cmp	r3, #15
 8005108:	d915      	bls.n	8005136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800510a:	4a18      	ldr	r2, [pc, #96]	@ (800516c <vPortValidateInterruptPriority+0x74>)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005114:	4b16      	ldr	r3, [pc, #88]	@ (8005170 <vPortValidateInterruptPriority+0x78>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	7afa      	ldrb	r2, [r7, #11]
 800511a:	429a      	cmp	r2, r3
 800511c:	d20b      	bcs.n	8005136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	607b      	str	r3, [r7, #4]
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005136:	4b0f      	ldr	r3, [pc, #60]	@ (8005174 <vPortValidateInterruptPriority+0x7c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800513e:	4b0e      	ldr	r3, [pc, #56]	@ (8005178 <vPortValidateInterruptPriority+0x80>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d90b      	bls.n	800515e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	603b      	str	r3, [r7, #0]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortValidateInterruptPriority+0x62>
	}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	e000e3f0 	.word	0xe000e3f0
 8005170:	20000450 	.word	0x20000450
 8005174:	e000ed0c 	.word	0xe000ed0c
 8005178:	20000454 	.word	0x20000454

0800517c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	@ 0x28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005188:	f7fe ffd8 	bl	800413c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800518c:	4b5c      	ldr	r3, [pc, #368]	@ (8005300 <pvPortMalloc+0x184>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005194:	f000 f924 	bl	80053e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005198:	4b5a      	ldr	r3, [pc, #360]	@ (8005304 <pvPortMalloc+0x188>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 8095 	bne.w	80052d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01e      	beq.n	80051ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80051ac:	2208      	movs	r2, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d015      	beq.n	80051ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f023 0307 	bic.w	r3, r3, #7
 80051c4:	3308      	adds	r3, #8
 80051c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <pvPortMalloc+0x6e>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	617b      	str	r3, [r7, #20]
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
 80051e8:	e7fd      	b.n	80051e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d06f      	beq.n	80052d0 <pvPortMalloc+0x154>
 80051f0:	4b45      	ldr	r3, [pc, #276]	@ (8005308 <pvPortMalloc+0x18c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d86a      	bhi.n	80052d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051fa:	4b44      	ldr	r3, [pc, #272]	@ (800530c <pvPortMalloc+0x190>)
 80051fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051fe:	4b43      	ldr	r3, [pc, #268]	@ (800530c <pvPortMalloc+0x190>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005204:	e004      	b.n	8005210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d903      	bls.n	8005222 <pvPortMalloc+0xa6>
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f1      	bne.n	8005206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005222:	4b37      	ldr	r3, [pc, #220]	@ (8005300 <pvPortMalloc+0x184>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005228:	429a      	cmp	r2, r3
 800522a:	d051      	beq.n	80052d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2208      	movs	r2, #8
 8005232:	4413      	add	r3, r2
 8005234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1ad2      	subs	r2, r2, r3
 8005246:	2308      	movs	r3, #8
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	429a      	cmp	r2, r3
 800524c:	d920      	bls.n	8005290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800524e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4413      	add	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <pvPortMalloc+0xfc>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	613b      	str	r3, [r7, #16]
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	e7fd      	b.n	8005274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad2      	subs	r2, r2, r3
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800528a:	69b8      	ldr	r0, [r7, #24]
 800528c:	f000 f90a 	bl	80054a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005290:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <pvPortMalloc+0x18c>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <pvPortMalloc+0x18c>)
 800529c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800529e:	4b1a      	ldr	r3, [pc, #104]	@ (8005308 <pvPortMalloc+0x18c>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005310 <pvPortMalloc+0x194>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d203      	bcs.n	80052b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052aa:	4b17      	ldr	r3, [pc, #92]	@ (8005308 <pvPortMalloc+0x18c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a18      	ldr	r2, [pc, #96]	@ (8005310 <pvPortMalloc+0x194>)
 80052b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <pvPortMalloc+0x188>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052c6:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <pvPortMalloc+0x198>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	4a11      	ldr	r2, [pc, #68]	@ (8005314 <pvPortMalloc+0x198>)
 80052ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d0:	f7fe ff42 	bl	8004158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <pvPortMalloc+0x17a>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	60fb      	str	r3, [r7, #12]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <pvPortMalloc+0x176>
	return pvReturn;
 80052f6:	69fb      	ldr	r3, [r7, #28]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3728      	adds	r7, #40	@ 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20004060 	.word	0x20004060
 8005304:	20004074 	.word	0x20004074
 8005308:	20004064 	.word	0x20004064
 800530c:	20004058 	.word	0x20004058
 8005310:	20004068 	.word	0x20004068
 8005314:	2000406c 	.word	0x2000406c

08005318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d04f      	beq.n	80053ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800532a:	2308      	movs	r3, #8
 800532c:	425b      	negs	r3, r3
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4413      	add	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	4b25      	ldr	r3, [pc, #148]	@ (80053d4 <vPortFree+0xbc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4013      	ands	r3, r2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <vPortFree+0x46>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60fb      	str	r3, [r7, #12]
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <vPortFree+0x66>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60bb      	str	r3, [r7, #8]
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop
 800537c:	e7fd      	b.n	800537a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	4b14      	ldr	r3, [pc, #80]	@ (80053d4 <vPortFree+0xbc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4013      	ands	r3, r2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01e      	beq.n	80053ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11a      	bne.n	80053ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	4b0e      	ldr	r3, [pc, #56]	@ (80053d4 <vPortFree+0xbc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	43db      	mvns	r3, r3
 800539e:	401a      	ands	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a4:	f7fe feca 	bl	800413c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <vPortFree+0xc0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	4a09      	ldr	r2, [pc, #36]	@ (80053d8 <vPortFree+0xc0>)
 80053b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053b6:	6938      	ldr	r0, [r7, #16]
 80053b8:	f000 f874 	bl	80054a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053bc:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <vPortFree+0xc4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3301      	adds	r3, #1
 80053c2:	4a06      	ldr	r2, [pc, #24]	@ (80053dc <vPortFree+0xc4>)
 80053c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053c6:	f7fe fec7 	bl	8004158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ca:	bf00      	nop
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20004074 	.word	0x20004074
 80053d8:	20004064 	.word	0x20004064
 80053dc:	20004070 	.word	0x20004070

080053e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80053ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053ec:	4b27      	ldr	r3, [pc, #156]	@ (800548c <prvHeapInit+0xac>)
 80053ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00c      	beq.n	8005414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3307      	adds	r3, #7
 80053fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0307 	bic.w	r3, r3, #7
 8005406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	4a1f      	ldr	r2, [pc, #124]	@ (800548c <prvHeapInit+0xac>)
 8005410:	4413      	add	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005418:	4a1d      	ldr	r2, [pc, #116]	@ (8005490 <prvHeapInit+0xb0>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800541e:	4b1c      	ldr	r3, [pc, #112]	@ (8005490 <prvHeapInit+0xb0>)
 8005420:	2200      	movs	r2, #0
 8005422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4413      	add	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800542c:	2208      	movs	r2, #8
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0307 	bic.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a15      	ldr	r2, [pc, #84]	@ (8005494 <prvHeapInit+0xb4>)
 8005440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005442:	4b14      	ldr	r3, [pc, #80]	@ (8005494 <prvHeapInit+0xb4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800544a:	4b12      	ldr	r3, [pc, #72]	@ (8005494 <prvHeapInit+0xb4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005460:	4b0c      	ldr	r3, [pc, #48]	@ (8005494 <prvHeapInit+0xb4>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4a0a      	ldr	r2, [pc, #40]	@ (8005498 <prvHeapInit+0xb8>)
 800546e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a09      	ldr	r2, [pc, #36]	@ (800549c <prvHeapInit+0xbc>)
 8005476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005478:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <prvHeapInit+0xc0>)
 800547a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800547e:	601a      	str	r2, [r3, #0]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000458 	.word	0x20000458
 8005490:	20004058 	.word	0x20004058
 8005494:	20004060 	.word	0x20004060
 8005498:	20004068 	.word	0x20004068
 800549c:	20004064 	.word	0x20004064
 80054a0:	20004074 	.word	0x20004074

080054a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054ac:	4b28      	ldr	r3, [pc, #160]	@ (8005550 <prvInsertBlockIntoFreeList+0xac>)
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e002      	b.n	80054b8 <prvInsertBlockIntoFreeList+0x14>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d8f7      	bhi.n	80054b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4413      	add	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d108      	bne.n	80054e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	441a      	add	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d118      	bne.n	800552c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b15      	ldr	r3, [pc, #84]	@ (8005554 <prvInsertBlockIntoFreeList+0xb0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d00d      	beq.n	8005522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	441a      	add	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e008      	b.n	8005534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005522:	4b0c      	ldr	r3, [pc, #48]	@ (8005554 <prvInsertBlockIntoFreeList+0xb0>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e003      	b.n	8005534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d002      	beq.n	8005542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20004058 	.word	0x20004058
 8005554:	20004060 	.word	0x20004060

08005558 <memset>:
 8005558:	4402      	add	r2, r0
 800555a:	4603      	mov	r3, r0
 800555c:	4293      	cmp	r3, r2
 800555e:	d100      	bne.n	8005562 <memset+0xa>
 8005560:	4770      	bx	lr
 8005562:	f803 1b01 	strb.w	r1, [r3], #1
 8005566:	e7f9      	b.n	800555c <memset+0x4>

08005568 <__libc_init_array>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4d0d      	ldr	r5, [pc, #52]	@ (80055a0 <__libc_init_array+0x38>)
 800556c:	4c0d      	ldr	r4, [pc, #52]	@ (80055a4 <__libc_init_array+0x3c>)
 800556e:	1b64      	subs	r4, r4, r5
 8005570:	10a4      	asrs	r4, r4, #2
 8005572:	2600      	movs	r6, #0
 8005574:	42a6      	cmp	r6, r4
 8005576:	d109      	bne.n	800558c <__libc_init_array+0x24>
 8005578:	4d0b      	ldr	r5, [pc, #44]	@ (80055a8 <__libc_init_array+0x40>)
 800557a:	4c0c      	ldr	r4, [pc, #48]	@ (80055ac <__libc_init_array+0x44>)
 800557c:	f000 f826 	bl	80055cc <_init>
 8005580:	1b64      	subs	r4, r4, r5
 8005582:	10a4      	asrs	r4, r4, #2
 8005584:	2600      	movs	r6, #0
 8005586:	42a6      	cmp	r6, r4
 8005588:	d105      	bne.n	8005596 <__libc_init_array+0x2e>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005590:	4798      	blx	r3
 8005592:	3601      	adds	r6, #1
 8005594:	e7ee      	b.n	8005574 <__libc_init_array+0xc>
 8005596:	f855 3b04 	ldr.w	r3, [r5], #4
 800559a:	4798      	blx	r3
 800559c:	3601      	adds	r6, #1
 800559e:	e7f2      	b.n	8005586 <__libc_init_array+0x1e>
 80055a0:	080057ac 	.word	0x080057ac
 80055a4:	080057ac 	.word	0x080057ac
 80055a8:	080057ac 	.word	0x080057ac
 80055ac:	080057b0 	.word	0x080057b0

080055b0 <memcpy>:
 80055b0:	440a      	add	r2, r1
 80055b2:	4291      	cmp	r1, r2
 80055b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055b8:	d100      	bne.n	80055bc <memcpy+0xc>
 80055ba:	4770      	bx	lr
 80055bc:	b510      	push	{r4, lr}
 80055be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c6:	4291      	cmp	r1, r2
 80055c8:	d1f9      	bne.n	80055be <memcpy+0xe>
 80055ca:	bd10      	pop	{r4, pc}

080055cc <_init>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr

080055d8 <_fini>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr
