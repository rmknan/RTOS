
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008270  08008270  00009270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f8  080082f8  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  080082f8  080082f8  000092f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008300  08008300  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008304  08008304  00009304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008308  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a010  2**0
                  CONTENTS
 10 .bss          00009270  20000010  20000010  0000a010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009280  20009280  0000a010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ca0a  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c05  00000000  00000000  00026a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  0002a650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001361  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026589  00000000  00000000  0002d2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5dd  00000000  00000000  00053832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb768  00000000  00000000  0006de0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159577  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ad8  00000000  00000000  001595bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00160094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008258 	.word	0x08008258

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008258 	.word	0x08008258

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fe16 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82c 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f98a 	bl	8000838 <MX_GPIO_Init>
  MX_FMC_Init();
 8000524:	f000 f938 	bl	8000798 <MX_FMC_Init>
  MX_TIM1_Init();
 8000528:	f000 f890 	bl	800064c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f8de 	bl	80006ec <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000530:	f000 f906 	bl	8000740 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f005 f8a6 	bl	8005684 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(Startblink01, NULL, &blink01_attributes);
 8000538:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <main+0x4c>)
 800053a:	2100      	movs	r1, #0
 800053c:	4809      	ldr	r0, [pc, #36]	@ (8000564 <main+0x50>)
 800053e:	f005 f8eb 	bl	8005718 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <main+0x54>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(Startblink02, NULL, &blink02_attributes);
 8000548:	4a08      	ldr	r2, [pc, #32]	@ (800056c <main+0x58>)
 800054a:	2100      	movs	r1, #0
 800054c:	4808      	ldr	r0, [pc, #32]	@ (8000570 <main+0x5c>)
 800054e:	f005 f8e3 	bl	8005718 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a07      	ldr	r2, [pc, #28]	@ (8000574 <main+0x60>)
 8000556:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f005 f8b8 	bl	80056cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <main+0x48>
 8000560:	08008298 	.word	0x08008298
 8000564:	08000be1 	.word	0x08000be1
 8000568:	200004d0 	.word	0x200004d0
 800056c:	080082bc 	.word	0x080082bc
 8000570:	08000c05 	.word	0x08000c05
 8000574:	200004d4 	.word	0x200004d4

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 fe2c 	bl	80081e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c4:	4a20      	ldr	r2, [pc, #128]	@ (8000648 <SystemClock_Config+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f0:	2348      	movs	r3, #72	@ 0x48
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f8:	2303      	movs	r3, #3
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fedf 	bl	80033c4 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800060c:	f000 fb1e 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f941 	bl	80038b4 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000638:	f000 fb08 	bl	8000c4c <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	@ 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000668:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_TIM1_Init+0x98>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	@ (80006e8 <MX_TIM1_Init+0x9c>)
 800066c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_TIM1_Init+0x98>)
 800067c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000680:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_TIM1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000694:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000696:	f003 fb93 	bl	8003dc0 <HAL_TIM_Base_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006a0:	f000 fad4 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	4619      	mov	r1, r3
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <MX_TIM1_Init+0x98>)
 80006b2:	f003 fd35 	bl	8004120 <HAL_TIM_ConfigClockSource>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006bc:	f000 fac6 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_TIM1_Init+0x98>)
 80006ce:	f003 ff5d 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006d8:	f000 fab8 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000002c 	.word	0x2000002c
 80006e8:	40010000 	.word	0x40010000

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	@ (800073c <MX_USART1_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000724:	f003 ffc2 	bl	80046ac <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 fa8d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000074 	.word	0x20000074
 800073c:	40011000 	.word	0x40011000

08000740 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800074c:	220c      	movs	r2, #12
 800074e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000752:	2201      	movs	r2, #1
 8000754:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800075e:	2202      	movs	r2, #2
 8000760:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800077c:	f001 f80b 	bl	8001796 <HAL_HCD_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000786:	f000 fa61 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000bc 	.word	0x200000bc
 8000794:	40040000 	.word	0x40040000

08000798 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_FMC_Init+0x98>)
 80007b2:	4a20      	ldr	r2, [pc, #128]	@ (8000834 <MX_FMC_Init+0x9c>)
 80007b4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <MX_FMC_Init+0x98>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_FMC_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_FMC_Init+0x98>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80007c8:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_FMC_Init+0x98>)
 80007ca:	2210      	movs	r2, #16
 80007cc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_FMC_Init+0x98>)
 80007d0:	2240      	movs	r2, #64	@ 0x40
 80007d2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_FMC_Init+0x98>)
 80007d6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80007da:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_FMC_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_FMC_Init+0x98>)
 80007e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007e8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_FMC_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_FMC_Init+0x98>)
 80007f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007f6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80007fc:	2307      	movs	r3, #7
 80007fe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000804:	2307      	movs	r3, #7
 8000806:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_FMC_Init+0x98>)
 800081a:	f003 fa9d 	bl	8003d58 <HAL_SDRAM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000824:	f000 fa12 	bl	8000c4c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000049c 	.word	0x2000049c
 8000834:	a0000140 	.word	0xa0000140

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	@ 0x38
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
 8000852:	4bb2      	ldr	r3, [pc, #712]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4ab1      	ldr	r2, [pc, #708]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4baf      	ldr	r3, [pc, #700]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	623b      	str	r3, [r7, #32]
 8000868:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	4bab      	ldr	r3, [pc, #684]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4aaa      	ldr	r2, [pc, #680]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000874:	f043 0320 	orr.w	r3, r3, #32
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4ba8      	ldr	r3, [pc, #672]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0320 	and.w	r3, r3, #32
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4ba4      	ldr	r3, [pc, #656]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4aa3      	ldr	r2, [pc, #652]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4ba1      	ldr	r3, [pc, #644]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b9d      	ldr	r3, [pc, #628]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a9c      	ldr	r2, [pc, #624]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b9a      	ldr	r3, [pc, #616]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b96      	ldr	r3, [pc, #600]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a95      	ldr	r2, [pc, #596]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b93      	ldr	r3, [pc, #588]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b8f      	ldr	r3, [pc, #572]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a8e      	ldr	r2, [pc, #568]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b8c      	ldr	r3, [pc, #560]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b88      	ldr	r3, [pc, #544]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a87      	ldr	r2, [pc, #540]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b85      	ldr	r3, [pc, #532]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b81      	ldr	r3, [pc, #516]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a80      	ldr	r2, [pc, #512]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b7e      	ldr	r3, [pc, #504]	@ (8000b1c <MX_GPIO_Init+0x2e4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2116      	movs	r1, #22
 8000932:	487b      	ldr	r0, [pc, #492]	@ (8000b20 <MX_GPIO_Init+0x2e8>)
 8000934:	f000 fefc 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2180      	movs	r1, #128	@ 0x80
 800093c:	4879      	ldr	r0, [pc, #484]	@ (8000b24 <MX_GPIO_Init+0x2ec>)
 800093e:	f000 fef7 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000948:	4877      	ldr	r0, [pc, #476]	@ (8000b28 <MX_GPIO_Init+0x2f0>)
 800094a:	f000 fef1 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000954:	4875      	ldr	r0, [pc, #468]	@ (8000b2c <MX_GPIO_Init+0x2f4>)
 8000956:	f000 feeb 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800095a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800096c:	2305      	movs	r3, #5
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	486e      	ldr	r0, [pc, #440]	@ (8000b30 <MX_GPIO_Init+0x2f8>)
 8000978:	f000 fd2e 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800097c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800098e:	230e      	movs	r3, #14
 8000990:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4865      	ldr	r0, [pc, #404]	@ (8000b30 <MX_GPIO_Init+0x2f8>)
 800099a:	f000 fd1d 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800099e:	2316      	movs	r3, #22
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	485a      	ldr	r0, [pc, #360]	@ (8000b20 <MX_GPIO_Init+0x2e8>)
 80009b6:	f000 fd0f 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009ba:	f248 0307 	movw	r3, #32775	@ 0x8007
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4854      	ldr	r0, [pc, #336]	@ (8000b24 <MX_GPIO_Init+0x2ec>)
 80009d2:	f000 fd01 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80009d6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009e8:	230e      	movs	r3, #14
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	484c      	ldr	r0, [pc, #304]	@ (8000b24 <MX_GPIO_Init+0x2ec>)
 80009f4:	f000 fcf0 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4845      	ldr	r0, [pc, #276]	@ (8000b24 <MX_GPIO_Init+0x2ec>)
 8000a10:	f000 fce2 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a14:	2320      	movs	r3, #32
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a18:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	483d      	ldr	r0, [pc, #244]	@ (8000b20 <MX_GPIO_Init+0x2e8>)
 8000a2a:	f000 fcd5 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a3e:	2309      	movs	r3, #9
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	483a      	ldr	r0, [pc, #232]	@ (8000b34 <MX_GPIO_Init+0x2fc>)
 8000a4a:	f000 fcc5 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4834      	ldr	r0, [pc, #208]	@ (8000b34 <MX_GPIO_Init+0x2fc>)
 8000a62:	f000 fcb9 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a66:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a78:	230e      	movs	r3, #14
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	482c      	ldr	r0, [pc, #176]	@ (8000b34 <MX_GPIO_Init+0x2fc>)
 8000a84:	f000 fca8 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4822      	ldr	r0, [pc, #136]	@ (8000b28 <MX_GPIO_Init+0x2f0>)
 8000a9e:	f000 fc9b 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000aa2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481b      	ldr	r0, [pc, #108]	@ (8000b28 <MX_GPIO_Init+0x2f0>)
 8000abc:	f000 fc8c 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ac0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ad2:	230e      	movs	r3, #14
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	4813      	ldr	r0, [pc, #76]	@ (8000b2c <MX_GPIO_Init+0x2f4>)
 8000ade:	f000 fc7b 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ae2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af4:	230e      	movs	r3, #14
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <MX_GPIO_Init+0x2e8>)
 8000b00:	f000 fc6a 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0a:	2312      	movs	r3, #18
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b16:	2304      	movs	r3, #4
 8000b18:	e00e      	b.n	8000b38 <MX_GPIO_Init+0x300>
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40021400 	.word	0x40021400
 8000b34:	40020400 	.word	0x40020400
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <MX_GPIO_Init+0x398>)
 8000b42:	f000 fc49 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4c:	2312      	movs	r3, #18
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	481c      	ldr	r0, [pc, #112]	@ (8000bd4 <MX_GPIO_Init+0x39c>)
 8000b64:	f000 fc38 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b68:	2348      	movs	r3, #72	@ 0x48
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b78:	230e      	movs	r3, #14
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4815      	ldr	r0, [pc, #84]	@ (8000bd8 <MX_GPIO_Init+0x3a0>)
 8000b84:	f000 fc28 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <MX_GPIO_Init+0x3a4>)
 8000ba6:	f000 fc17 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000baa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <MX_GPIO_Init+0x3a4>)
 8000bc4:	f000 fc08 	bl	80013d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	@ 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021800 	.word	0x40021800

08000be0 <Startblink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startblink01 */
void Startblink01(void *argument)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000be8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <Startblink01+0x20>)
 8000bee:	f000 fdb8 	bl	8001762 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000bf2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bf6:	f004 fe21 	bl	800583c <osDelay>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000bfa:	bf00      	nop
 8000bfc:	e7f4      	b.n	8000be8 <Startblink01+0x8>
 8000bfe:	bf00      	nop
 8000c00:	40021800 	.word	0x40021800

08000c04 <Startblink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startblink02 */
void Startblink02(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startblink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000c0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <Startblink02+0x20>)
 8000c12:	f000 fda6 	bl	8001762 <HAL_GPIO_TogglePin>
	  osDelay(600);
 8000c16:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000c1a:	f004 fe0f 	bl	800583c <osDelay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000c1e:	bf00      	nop
 8000c20:	e7f4      	b.n	8000c0c <Startblink02+0x8>
 8000c22:	bf00      	nop
 8000c24:	40021800 	.word	0x40021800

08000c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3a:	f000 faa7 	bl	800118c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40001000 	.word	0x40001000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_MspInit+0x54>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <HAL_MspInit+0x54>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_MspInit+0x54>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_MspInit+0x54>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_MspInit+0x54>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_MspInit+0x54>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f000 fb71 	bl	8001384 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <HAL_TIM_Base_MspInit+0x3c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10d      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_TIM_Base_MspInit+0x40>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	4a09      	ldr	r2, [pc, #36]	@ (8000cf0 <HAL_TIM_Base_MspInit+0x40>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <HAL_TIM_Base_MspInit+0x40>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <HAL_UART_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12c      	bne.n	8000d70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d60:	2307      	movs	r3, #7
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d6c:	f000 fb34 	bl	80013d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a24      	ldr	r2, [pc, #144]	@ (8000e34 <HAL_HCD_MspInit+0xb0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d141      	bne.n	8000e2a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b23      	ldr	r3, [pc, #140]	@ (8000e38 <HAL_HCD_MspInit+0xb4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a22      	ldr	r2, [pc, #136]	@ (8000e38 <HAL_HCD_MspInit+0xb4>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <HAL_HCD_MspInit+0xb4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000dc2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4817      	ldr	r0, [pc, #92]	@ (8000e3c <HAL_HCD_MspInit+0xb8>)
 8000de0:	f000 fafa 	bl	80013d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000de4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	@ (8000e3c <HAL_HCD_MspInit+0xb8>)
 8000dfa:	f000 faed 	bl	80013d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <HAL_HCD_MspInit+0xb4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <HAL_HCD_MspInit+0xb4>)
 8000e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_HCD_MspInit+0xb4>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	204d      	movs	r0, #77	@ 0x4d
 8000e20:	f000 fab0 	bl	8001384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000e24:	204d      	movs	r0, #77	@ 0x4d
 8000e26:	f000 fac9 	bl	80013bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	@ 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40040000 	.word	0x40040000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020400 	.word	0x40020400

08000e40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e54:	4b3b      	ldr	r3, [pc, #236]	@ (8000f44 <HAL_FMC_MspInit+0x104>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d16f      	bne.n	8000f3c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000e5c:	4b39      	ldr	r3, [pc, #228]	@ (8000f44 <HAL_FMC_MspInit+0x104>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4b38      	ldr	r3, [pc, #224]	@ (8000f48 <HAL_FMC_MspInit+0x108>)
 8000e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e6a:	4a37      	ldr	r2, [pc, #220]	@ (8000f48 <HAL_FMC_MspInit+0x108>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e72:	4b35      	ldr	r3, [pc, #212]	@ (8000f48 <HAL_FMC_MspInit+0x108>)
 8000e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000e7e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000e82:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e90:	230c      	movs	r3, #12
 8000e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	482c      	ldr	r0, [pc, #176]	@ (8000f4c <HAL_FMC_MspInit+0x10c>)
 8000e9a:	f000 fa9d 	bl	80013d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4826      	ldr	r0, [pc, #152]	@ (8000f50 <HAL_FMC_MspInit+0x110>)
 8000eb8:	f000 fa8e 	bl	80013d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000ebc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000ec0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ece:	230c      	movs	r3, #12
 8000ed0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481f      	ldr	r0, [pc, #124]	@ (8000f54 <HAL_FMC_MspInit+0x114>)
 8000ed8:	f000 fa7e 	bl	80013d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000edc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000ee0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4818      	ldr	r0, [pc, #96]	@ (8000f58 <HAL_FMC_MspInit+0x118>)
 8000ef8:	f000 fa6e 	bl	80013d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000efc:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000f00:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4811      	ldr	r0, [pc, #68]	@ (8000f5c <HAL_FMC_MspInit+0x11c>)
 8000f18:	f000 fa5e 	bl	80013d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000f1c:	2360      	movs	r3, #96	@ 0x60
 8000f1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	480a      	ldr	r0, [pc, #40]	@ (8000f60 <HAL_FMC_MspInit+0x120>)
 8000f36:	f000 fa4f 	bl	80013d8 <HAL_GPIO_Init>
 8000f3a:	e000      	b.n	8000f3e <HAL_FMC_MspInit+0xfe>
    return;
 8000f3c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200004d8 	.word	0x200004d8
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40021400 	.word	0x40021400
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40020400 	.word	0x40020400

08000f64 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f6c:	f7ff ff68 	bl	8000e40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	@ 0x38
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	4b33      	ldr	r3, [pc, #204]	@ (800105c <HAL_InitTick+0xe4>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a32      	ldr	r2, [pc, #200]	@ (800105c <HAL_InitTick+0xe4>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <HAL_InitTick+0xe4>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa4:	f107 0210 	add.w	r2, r7, #16
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 fea0 	bl	8003cf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fbe:	f002 fe71 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8000fc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fc4:	e004      	b.n	8000fd0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fc6:	f002 fe6d 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd2:	4a23      	ldr	r2, [pc, #140]	@ (8001060 <HAL_InitTick+0xe8>)
 8000fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd8:	0c9b      	lsrs	r3, r3, #18
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fde:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <HAL_InitTick+0xec>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	@ (8001068 <HAL_InitTick+0xf0>)
 8000fe2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <HAL_InitTick+0xec>)
 8000fe6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fec:	4a1d      	ldr	r2, [pc, #116]	@ (8001064 <HAL_InitTick+0xec>)
 8000fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <HAL_InitTick+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_InitTick+0xec>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <HAL_InitTick+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001004:	4817      	ldr	r0, [pc, #92]	@ (8001064 <HAL_InitTick+0xec>)
 8001006:	f002 fedb 	bl	8003dc0 <HAL_TIM_Base_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001010:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001014:	2b00      	cmp	r3, #0
 8001016:	d11b      	bne.n	8001050 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001018:	4812      	ldr	r0, [pc, #72]	@ (8001064 <HAL_InitTick+0xec>)
 800101a:	f002 ff21 	bl	8003e60 <HAL_TIM_Base_Start_IT>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001024:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001028:	2b00      	cmp	r3, #0
 800102a:	d111      	bne.n	8001050 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800102c:	2036      	movs	r0, #54	@ 0x36
 800102e:	f000 f9c5 	bl	80013bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d808      	bhi.n	800104a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	2036      	movs	r0, #54	@ 0x36
 800103e:	f000 f9a1 	bl	8001384 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_InitTick+0xf4>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e002      	b.n	8001050 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001050:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001054:	4618      	mov	r0, r3
 8001056:	3738      	adds	r7, #56	@ 0x38
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	431bde83 	.word	0x431bde83
 8001064:	200004dc 	.word	0x200004dc
 8001068:	40001000 	.word	0x40001000
 800106c:	20000004 	.word	0x20000004

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <NMI_Handler+0x4>

08001078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <MemManage_Handler+0x4>

08001088 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <UsageFault_Handler+0x4>

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010ac:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <TIM6_DAC_IRQHandler+0x10>)
 80010ae:	f002 ff47 	bl	8003f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200004dc 	.word	0x200004dc

080010bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <OTG_HS_IRQHandler+0x10>)
 80010c2:	f000 fbcf 	bl	8001864 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000bc 	.word	0x200000bc

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800112c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f8:	f7ff ffea 	bl	80010d0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	@ (8001134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	@ (8001140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001122:	f007 f867 	bl	80081f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff f9f5 	bl	8000514 <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800112c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001138:	08008308 	.word	0x08008308
  ldr r2, =_sbss
 800113c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001140:	20009280 	.word	0x20009280

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f8fc 	bl	800136e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fefe 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fd6c 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000524 	.word	0x20000524

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000524 	.word	0x20000524

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	@ (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	@ (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	@ (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff4c 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001396:	f7ff ff61 	bl	800125c <__NVIC_GetPriorityGrouping>
 800139a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	6978      	ldr	r0, [r7, #20]
 80013a2:	f7ff ffb1 	bl	8001308 <NVIC_EncodePriority>
 80013a6:	4602      	mov	r2, r0
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff80 	bl	80012b4 <__NVIC_SetPriority>
}
 80013b4:	bf00      	nop
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff54 	bl	8001278 <__NVIC_EnableIRQ>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e177      	b.n	80016e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	f040 8166 	bne.w	80016de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d005      	beq.n	800142a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001426:	2b02      	cmp	r3, #2
 8001428:	d130      	bne.n	800148c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 0201 	and.w	r2, r3, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b03      	cmp	r3, #3
 8001496:	d017      	beq.n	80014c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d123      	bne.n	800151c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	220f      	movs	r2, #15
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0203 	and.w	r2, r3, #3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80c0 	beq.w	80016de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b66      	ldr	r3, [pc, #408]	@ (80016fc <HAL_GPIO_Init+0x324>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a65      	ldr	r2, [pc, #404]	@ (80016fc <HAL_GPIO_Init+0x324>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b63      	ldr	r3, [pc, #396]	@ (80016fc <HAL_GPIO_Init+0x324>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157a:	4a61      	ldr	r2, [pc, #388]	@ (8001700 <HAL_GPIO_Init+0x328>)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a58      	ldr	r2, [pc, #352]	@ (8001704 <HAL_GPIO_Init+0x32c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d037      	beq.n	8001616 <HAL_GPIO_Init+0x23e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a57      	ldr	r2, [pc, #348]	@ (8001708 <HAL_GPIO_Init+0x330>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d031      	beq.n	8001612 <HAL_GPIO_Init+0x23a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a56      	ldr	r2, [pc, #344]	@ (800170c <HAL_GPIO_Init+0x334>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d02b      	beq.n	800160e <HAL_GPIO_Init+0x236>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a55      	ldr	r2, [pc, #340]	@ (8001710 <HAL_GPIO_Init+0x338>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d025      	beq.n	800160a <HAL_GPIO_Init+0x232>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a54      	ldr	r2, [pc, #336]	@ (8001714 <HAL_GPIO_Init+0x33c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01f      	beq.n	8001606 <HAL_GPIO_Init+0x22e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a53      	ldr	r2, [pc, #332]	@ (8001718 <HAL_GPIO_Init+0x340>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d019      	beq.n	8001602 <HAL_GPIO_Init+0x22a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a52      	ldr	r2, [pc, #328]	@ (800171c <HAL_GPIO_Init+0x344>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0x226>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a51      	ldr	r2, [pc, #324]	@ (8001720 <HAL_GPIO_Init+0x348>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00d      	beq.n	80015fa <HAL_GPIO_Init+0x222>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a50      	ldr	r2, [pc, #320]	@ (8001724 <HAL_GPIO_Init+0x34c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x21e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001728 <HAL_GPIO_Init+0x350>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_GPIO_Init+0x21a>
 80015ee:	2309      	movs	r3, #9
 80015f0:	e012      	b.n	8001618 <HAL_GPIO_Init+0x240>
 80015f2:	230a      	movs	r3, #10
 80015f4:	e010      	b.n	8001618 <HAL_GPIO_Init+0x240>
 80015f6:	2308      	movs	r3, #8
 80015f8:	e00e      	b.n	8001618 <HAL_GPIO_Init+0x240>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00c      	b.n	8001618 <HAL_GPIO_Init+0x240>
 80015fe:	2306      	movs	r3, #6
 8001600:	e00a      	b.n	8001618 <HAL_GPIO_Init+0x240>
 8001602:	2305      	movs	r3, #5
 8001604:	e008      	b.n	8001618 <HAL_GPIO_Init+0x240>
 8001606:	2304      	movs	r3, #4
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x240>
 800160a:	2303      	movs	r3, #3
 800160c:	e004      	b.n	8001618 <HAL_GPIO_Init+0x240>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x240>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x240>
 8001616:	2300      	movs	r3, #0
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	f002 0203 	and.w	r2, r2, #3
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4093      	lsls	r3, r2
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001628:	4935      	ldr	r1, [pc, #212]	@ (8001700 <HAL_GPIO_Init+0x328>)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001636:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <HAL_GPIO_Init+0x354>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165a:	4a34      	ldr	r2, [pc, #208]	@ (800172c <HAL_GPIO_Init+0x354>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <HAL_GPIO_Init+0x354>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001684:	4a29      	ldr	r2, [pc, #164]	@ (800172c <HAL_GPIO_Init+0x354>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168a:	4b28      	ldr	r3, [pc, #160]	@ (800172c <HAL_GPIO_Init+0x354>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ae:	4a1f      	ldr	r2, [pc, #124]	@ (800172c <HAL_GPIO_Init+0x354>)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <HAL_GPIO_Init+0x354>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d8:	4a14      	ldr	r2, [pc, #80]	@ (800172c <HAL_GPIO_Init+0x354>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	f67f ae84 	bls.w	80013f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40013800 	.word	0x40013800
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400
 800170c:	40020800 	.word	0x40020800
 8001710:	40020c00 	.word	0x40020c00
 8001714:	40021000 	.word	0x40021000
 8001718:	40021400 	.word	0x40021400
 800171c:	40021800 	.word	0x40021800
 8001720:	40021c00 	.word	0x40021c00
 8001724:	40022000 	.word	0x40022000
 8001728:	40022400 	.word	0x40022400
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	041a      	lsls	r2, r3, #16
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	43d9      	mvns	r1, r3
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	400b      	ands	r3, r1
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	619a      	str	r2, [r3, #24]
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af02      	add	r7, sp, #8
 800179c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e059      	b.n	800185c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fade 	bl	8000d84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017d6:	d102      	bne.n	80017de <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fb50 	bl	8004e88 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7c1a      	ldrb	r2, [r3, #16]
 80017f0:	f88d 2000 	strb.w	r2, [sp]
 80017f4:	3304      	adds	r3, #4
 80017f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f8:	f003 fae2 	bl	8004dc0 <USB_CoreInit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2202      	movs	r2, #2
 8001806:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e026      	b.n	800185c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fb48 	bl	8004eaa <USB_SetCurrentMode>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e017      	b.n	800185c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7c1a      	ldrb	r2, [r3, #16]
 8001834:	f88d 2000 	strb.w	r2, [sp]
 8001838:	3304      	adds	r3, #4
 800183a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183c:	f003 fcac 	bl	8005198 <USB_HostInit>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e004      	b.n	800185c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 fc4d 	bl	800511a <USB_GetMode>
 8001880:	4603      	mov	r3, r0
 8001882:	2b01      	cmp	r3, #1
 8001884:	f040 80fb 	bne.w	8001a7e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fc10 	bl	80050b2 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80f1 	beq.w	8001a7c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fc07 	bl	80050b2 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018ae:	d104      	bne.n	80018ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80018b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fbf7 	bl	80050b2 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018ce:	d104      	bne.n	80018da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80018d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 fbe7 	bl	80050b2 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80018ee:	d104      	bne.n	80018fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fbd7 	bl	80050b2 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b02      	cmp	r3, #2
 800190c:	d103      	bne.n	8001916 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2202      	movs	r2, #2
 8001914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fbc9 	bl	80050b2 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800192a:	d120      	bne.n	800196e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001934:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d113      	bne.n	800196e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001946:	2110      	movs	r1, #16
 8001948:	6938      	ldr	r0, [r7, #16]
 800194a:	f003 fafa 	bl	8004f42 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800194e:	6938      	ldr	r0, [r7, #16]
 8001950:	f003 fb29 	bl	8004fa6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7a5b      	ldrb	r3, [r3, #9]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d105      	bne.n	8001968 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fcdc 	bl	8005320 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f89f 	bl	8001aac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fb9d 	bl	80050b2 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800197e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001982:	d102      	bne.n	800198a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f001 fcaa 	bl	80032de <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 fb8f 	bl	80050b2 <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b08      	cmp	r3, #8
 800199c:	d106      	bne.n	80019ac <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f870 	bl	8001a84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2208      	movs	r2, #8
 80019aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fb7e 	bl	80050b2 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019c0:	d139      	bne.n	8001a36 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fce7 	bl	800539a <USB_HC_ReadInterrupt>
 80019cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e025      	b.n	8001a20 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d018      	beq.n	8001a1a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019fe:	d106      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f87c 	bl	8001b04 <HCD_HC_IN_IRQHandler>
 8001a0c:	e005      	b.n	8001a1a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fede 	bl	80027d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	795b      	ldrb	r3, [r3, #5]
 8001a24:	461a      	mov	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d3d3      	bcc.n	80019d4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fb39 	bl	80050b2 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d101      	bne.n	8001a4e <HAL_HCD_IRQHandler+0x1ea>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_HCD_IRQHandler+0x1ec>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d014      	beq.n	8001a7e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0210 	bic.w	r2, r2, #16
 8001a62:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f001 fb5b 	bl	8003120 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0210 	orr.w	r2, r2, #16
 8001a78:	619a      	str	r2, [r3, #24]
 8001a7a:	e000      	b.n	8001a7e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001a7c:	bf00      	nop
    }
  }
}
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
 8001af4:	4613      	mov	r3, r2
 8001af6:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fad8 	bl	80050d8 <USB_ReadChInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d11a      	bne.n	8001b68 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2304      	movs	r3, #4
 8001b42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	334d      	adds	r3, #77	@ 0x4d
 8001b54:	2207      	movs	r2, #7
 8001b56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fc2b 	bl	80053bc <USB_HC_Halt>
 8001b66:	e09e      	b.n	8001ca6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fab1 	bl	80050d8 <USB_ReadChInterrupts>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b80:	d11b      	bne.n	8001bba <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	015a      	lsls	r2, r3, #5
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	334d      	adds	r3, #77	@ 0x4d
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fc02 	bl	80053bc <USB_HC_Halt>
 8001bb8:	e075      	b.n	8001ca6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fa88 	bl	80050d8 <USB_ReadChInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11a      	bne.n	8001c08 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	015a      	lsls	r2, r3, #5
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bde:	461a      	mov	r2, r3
 8001be0:	2308      	movs	r3, #8
 8001be2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	334d      	adds	r3, #77	@ 0x4d
 8001bf4:	2206      	movs	r2, #6
 8001bf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 fbdb 	bl	80053bc <USB_HC_Halt>
 8001c06:	e04e      	b.n	8001ca6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fa61 	bl	80050d8 <USB_ReadChInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c20:	d11b      	bne.n	8001c5a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	334d      	adds	r3, #77	@ 0x4d
 8001c46:	2209      	movs	r2, #9
 8001c48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 fbb2 	bl	80053bc <USB_HC_Halt>
 8001c58:	e025      	b.n	8001ca6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fa38 	bl	80050d8 <USB_ReadChInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b80      	cmp	r3, #128	@ 0x80
 8001c70:	d119      	bne.n	8001ca6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	334d      	adds	r3, #77	@ 0x4d
 8001c94:	2207      	movs	r2, #7
 8001c96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fb8b 	bl	80053bc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fa12 	bl	80050d8 <USB_ReadChInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cbe:	d112      	bne.n	8001ce6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fb77 	bl	80053bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ce0:	6093      	str	r3, [r2, #8]
 8001ce2:	f000 bd75 	b.w	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 f9f2 	bl	80050d8 <USB_ReadChInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	f040 8128 	bne.w	8001f50 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2320      	movs	r3, #32
 8001d10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	331b      	adds	r3, #27
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d119      	bne.n	8001d5c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	331b      	adds	r3, #27
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	0151      	lsls	r1, r2, #5
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	440a      	add	r2, r1
 8001d52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	799b      	ldrb	r3, [r3, #6]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	3330      	adds	r3, #48	@ 0x30
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	1ac9      	subs	r1, r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4403      	add	r3, r0
 8001d98:	3338      	adds	r3, #56	@ 0x38
 8001d9a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	334d      	adds	r3, #77	@ 0x4d
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3344      	adds	r3, #68	@ 0x44
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3326      	adds	r3, #38	@ 0x26
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3326      	adds	r3, #38	@ 0x26
 8001dfc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d110      	bne.n	8001e24 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 fad6 	bl	80053bc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2310      	movs	r3, #16
 8001e20:	6093      	str	r3, [r2, #8]
 8001e22:	e03d      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3326      	adds	r3, #38	@ 0x26
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d00a      	beq.n	8001e50 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001e3a:	78fa      	ldrb	r2, [r7, #3]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3326      	adds	r3, #38	@ 0x26
 8001e4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d127      	bne.n	8001ea0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	0151      	lsls	r1, r2, #5
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	440a      	add	r2, r1
 8001e66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e6e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	334c      	adds	r3, #76	@ 0x4c
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	334c      	adds	r3, #76	@ 0x4c
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fe24 	bl	8001ae8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	799b      	ldrb	r3, [r3, #6]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d13b      	bne.n	8001f20 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3338      	adds	r3, #56	@ 0x38
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4403      	add	r3, r0
 8001ec8:	3328      	adds	r3, #40	@ 0x28
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	440b      	add	r3, r1
 8001ece:	1e59      	subs	r1, r3, #1
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4403      	add	r3, r0
 8001ede:	3328      	adds	r3, #40	@ 0x28
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8470 	beq.w	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	333c      	adds	r3, #60	@ 0x3c
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	333c      	adds	r3, #60	@ 0x3c
 8001f18:	4602      	mov	r2, r0
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	f000 bc58 	b.w	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	333c      	adds	r3, #60	@ 0x3c
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2d8      	uxtb	r0, r3
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	333c      	adds	r3, #60	@ 0x3c
 8001f48:	4602      	mov	r2, r0
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	f000 bc40 	b.w	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 f8bd 	bl	80050d8 <USB_ReadChInterrupts>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d131      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f74:	461a      	mov	r2, r3
 8001f76:	2320      	movs	r3, #32
 8001f78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	331a      	adds	r3, #26
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 841f 	bne.w	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	331b      	adds	r3, #27
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	334d      	adds	r3, #77	@ 0x4d
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 f9fa 	bl	80053bc <USB_HC_Halt>
 8001fc8:	f000 bc02 	b.w	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 f87f 	bl	80050d8 <USB_ReadChInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	f040 8305 	bne.w	80025f0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	334d      	adds	r3, #77	@ 0x4d
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d114      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	334d      	adds	r3, #77	@ 0x4d
 800201e:	2202      	movs	r2, #2
 8002020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	334c      	adds	r3, #76	@ 0x4c
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e2cc      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	334d      	adds	r3, #77	@ 0x4d
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b06      	cmp	r3, #6
 800204c:	d114      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	334d      	adds	r3, #77	@ 0x4d
 800205e:	2202      	movs	r2, #2
 8002060:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	334c      	adds	r3, #76	@ 0x4c
 8002072:	2205      	movs	r2, #5
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e2ac      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	334d      	adds	r3, #77	@ 0x4d
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b07      	cmp	r3, #7
 800208c:	d00b      	beq.n	80020a6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	334d      	adds	r3, #77	@ 0x4d
 800209e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	f040 80a6 	bne.w	80021f2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	334d      	adds	r3, #77	@ 0x4d
 80020b6:	2202      	movs	r2, #2
 80020b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3344      	adds	r3, #68	@ 0x44
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	1c59      	adds	r1, r3, #1
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4403      	add	r3, r0
 80020da:	3344      	adds	r3, #68	@ 0x44
 80020dc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3344      	adds	r3, #68	@ 0x44
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d943      	bls.n	800217c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3344      	adds	r3, #68	@ 0x44
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	331a      	adds	r3, #26
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d123      	bne.n	8002166 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	331b      	adds	r3, #27
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	331c      	adds	r3, #28
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	0151      	lsls	r1, r2, #5
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	440a      	add	r2, r1
 800215c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002164:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	334c      	adds	r3, #76	@ 0x4c
 8002176:	2204      	movs	r2, #4
 8002178:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800217a:	e229      	b.n	80025d0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	334c      	adds	r3, #76	@ 0x4c
 800218c:	2202      	movs	r2, #2
 800218e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3326      	adds	r3, #38	@ 0x26
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3326      	adds	r3, #38	@ 0x26
 80021b6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	f040 8209 	bne.w	80025d0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80021d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021f0:	e1ee      	b.n	80025d0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	334d      	adds	r3, #77	@ 0x4d
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b05      	cmp	r3, #5
 8002206:	f040 80c8 	bne.w	800239a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	334d      	adds	r3, #77	@ 0x4d
 800221a:	2202      	movs	r2, #2
 800221c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	331b      	adds	r3, #27
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	f040 81ce 	bne.w	80025d2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3326      	adds	r3, #38	@ 0x26
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d16b      	bne.n	8002324 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3348      	adds	r3, #72	@ 0x48
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4403      	add	r3, r0
 800226c:	3348      	adds	r3, #72	@ 0x48
 800226e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3348      	adds	r3, #72	@ 0x48
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d943      	bls.n	800230e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3348      	adds	r3, #72	@ 0x48
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	331b      	adds	r3, #27
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	3344      	adds	r3, #68	@ 0x44
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d809      	bhi.n	80022d8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	331c      	adds	r3, #28
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	0151      	lsls	r1, r2, #5
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	440a      	add	r2, r1
 80022ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	334c      	adds	r3, #76	@ 0x4c
 8002308:	2204      	movs	r2, #4
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e014      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	334c      	adds	r3, #76	@ 0x4c
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e009      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	334c      	adds	r3, #76	@ 0x4c
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3326      	adds	r3, #38	@ 0x26
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3326      	adds	r3, #38	@ 0x26
 800235e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002360:	2b02      	cmp	r3, #2
 8002362:	f040 8136 	bne.w	80025d2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800237c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002384:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e11b      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	334d      	adds	r3, #77	@ 0x4d
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	f040 8081 	bne.w	80024b4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334d      	adds	r3, #77	@ 0x4d
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	331b      	adds	r3, #27
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	f040 80fa 	bne.w	80025d2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	334c      	adds	r3, #76	@ 0x4c
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	0151      	lsls	r1, r2, #5
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	440a      	add	r2, r1
 8002408:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	0151      	lsls	r1, r2, #5
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	440a      	add	r2, r1
 8002428:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800242c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002430:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	0151      	lsls	r1, r2, #5
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	440a      	add	r2, r1
 8002448:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800244c:	f023 0320 	bic.w	r3, r3, #32
 8002450:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3326      	adds	r3, #38	@ 0x26
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3326      	adds	r3, #38	@ 0x26
 8002478:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800247a:	2b02      	cmp	r3, #2
 800247c:	f040 80a9 	bne.w	80025d2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002496:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800249e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e08e      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	334d      	adds	r3, #77	@ 0x4d
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d143      	bne.n	8002552 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	334d      	adds	r3, #77	@ 0x4d
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	334c      	adds	r3, #76	@ 0x4c
 80024ee:	2202      	movs	r2, #2
 80024f0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	3326      	adds	r3, #38	@ 0x26
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3326      	adds	r3, #38	@ 0x26
 8002518:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800251a:	2b02      	cmp	r3, #2
 800251c:	d159      	bne.n	80025d2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002534:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800253c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e03f      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	334d      	adds	r3, #77	@ 0x4d
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d126      	bne.n	80025b6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	334d      	adds	r3, #77	@ 0x4d
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3344      	adds	r3, #68	@ 0x44
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1c59      	adds	r1, r3, #1
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4403      	add	r3, r0
 800259c:	3344      	adds	r3, #68	@ 0x44
 800259e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	334c      	adds	r3, #76	@ 0x4c
 80025b0:	2204      	movs	r2, #4
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e00d      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	334d      	adds	r3, #77	@ 0x4d
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f000 8100 	beq.w	80027ce <HCD_HC_IN_IRQHandler+0xcca>
 80025ce:	e000      	b.n	80025d2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025d0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	334c      	adds	r3, #76	@ 0x4c
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	4619      	mov	r1, r3
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fa7d 	bl	8001ae8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025ee:	e0ef      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f002 fd6d 	bl	80050d8 <USB_ReadChInterrupts>
 80025fe:	4603      	mov	r3, r0
 8002600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002604:	2b40      	cmp	r3, #64	@ 0x40
 8002606:	d12f      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	2340      	movs	r3, #64	@ 0x40
 8002618:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	334d      	adds	r3, #77	@ 0x4d
 800262a:	2205      	movs	r2, #5
 800262c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	331a      	adds	r3, #26
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	3344      	adds	r3, #68	@ 0x44
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f002 feab 	bl	80053bc <USB_HC_Halt>
 8002666:	e0b3      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f002 fd31 	bl	80050d8 <USB_ReadChInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b10      	cmp	r3, #16
 800267e:	f040 80a7 	bne.w	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3326      	adds	r3, #38	@ 0x26
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d11b      	bne.n	80026d0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3344      	adds	r3, #68	@ 0x44
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	334d      	adds	r3, #77	@ 0x4d
 80026bc:	2204      	movs	r2, #4
 80026be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fe77 	bl	80053bc <USB_HC_Halt>
 80026ce:	e03f      	b.n	8002750 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3326      	adds	r3, #38	@ 0x26
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3326      	adds	r3, #38	@ 0x26
 80026f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d129      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3344      	adds	r3, #68	@ 0x44
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	799b      	ldrb	r3, [r3, #6]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HCD_HC_IN_IRQHandler+0xc2a>
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	331b      	adds	r3, #27
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d110      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	334d      	adds	r3, #77	@ 0x4d
 800273e:	2204      	movs	r2, #4
 8002740:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f002 fe36 	bl	80053bc <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	331b      	adds	r3, #27
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d129      	bne.n	80027ba <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	331b      	adds	r3, #27
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	0151      	lsls	r1, r2, #5
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	440a      	add	r2, r1
 8002790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002798:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027b4:	f043 0320 	orr.w	r3, r3, #32
 80027b8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c6:	461a      	mov	r2, r3
 80027c8:	2310      	movs	r3, #16
 80027ca:	6093      	str	r3, [r2, #8]
 80027cc:	e000      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80027ce:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fc6f 	bl	80050d8 <USB_ReadChInterrupts>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b04      	cmp	r3, #4
 8002802:	d11b      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2304      	movs	r3, #4
 8002814:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	334d      	adds	r3, #77	@ 0x4d
 8002826:	2207      	movs	r2, #7
 8002828:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f002 fdc2 	bl	80053bc <USB_HC_Halt>
 8002838:	f000 bc6f 	b.w	800311a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fc47 	bl	80050d8 <USB_ReadChInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b20      	cmp	r3, #32
 8002852:	f040 8082 	bne.w	800295a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	2320      	movs	r3, #32
 8002866:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	3319      	adds	r3, #25
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d124      	bne.n	80028c8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3319      	adds	r3, #25
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	334c      	adds	r3, #76	@ 0x4c
 80028a2:	2202      	movs	r2, #2
 80028a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	334d      	adds	r3, #77	@ 0x4d
 80028b6:	2203      	movs	r2, #3
 80028b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fd7a 	bl	80053bc <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	331a      	adds	r3, #26
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	f040 841d 	bne.w	800311a <HCD_HC_OUT_IRQHandler+0x944>
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	331b      	adds	r3, #27
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 8411 	bne.w	800311a <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3326      	adds	r3, #38	@ 0x26
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d009      	beq.n	8002922 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	331b      	adds	r3, #27
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	334d      	adds	r3, #77	@ 0x4d
 8002932:	2203      	movs	r2, #3
 8002934:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fd3c 	bl	80053bc <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3344      	adds	r3, #68	@ 0x44
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e3df      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f002 fbb8 	bl	80050d8 <USB_ReadChInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800296e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002972:	d111      	bne.n	8002998 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002986:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f002 fd13 	bl	80053bc <USB_HC_Halt>
 8002996:	e3c0      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fb99 	bl	80050d8 <USB_ReadChInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d168      	bne.n	8002a82 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3344      	adds	r3, #68	@ 0x44
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fb83 	bl	80050d8 <USB_ReadChInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d8:	2b40      	cmp	r3, #64	@ 0x40
 80029da:	d112      	bne.n	8002a02 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3319      	adds	r3, #25
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	2340      	movs	r3, #64	@ 0x40
 8002a00:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	331b      	adds	r3, #27
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d019      	beq.n	8002a4c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	331b      	adds	r3, #27
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	0151      	lsls	r1, r2, #5
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	440a      	add	r2, r1
 8002a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	334d      	adds	r3, #77	@ 0x4d
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 fc9e 	bl	80053bc <USB_HC_Halt>
 8002a80:	e34b      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fb24 	bl	80050d8 <USB_ReadChInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a96:	2b40      	cmp	r3, #64	@ 0x40
 8002a98:	d139      	bne.n	8002b0e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	334d      	adds	r3, #77	@ 0x4d
 8002aaa:	2205      	movs	r2, #5
 8002aac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	331a      	adds	r3, #26
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3319      	adds	r3, #25
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3344      	adds	r3, #68	@ 0x44
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 fc61 	bl	80053bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b06:	461a      	mov	r2, r3
 8002b08:	2340      	movs	r3, #64	@ 0x40
 8002b0a:	6093      	str	r3, [r2, #8]
 8002b0c:	e305      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 fade 	bl	80050d8 <USB_ReadChInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d11a      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	2308      	movs	r3, #8
 8002b36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	334d      	adds	r3, #77	@ 0x4d
 8002b48:	2206      	movs	r2, #6
 8002b4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 fc31 	bl	80053bc <USB_HC_Halt>
 8002b5a:	e2de      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fab7 	bl	80050d8 <USB_ReadChInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d144      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3344      	adds	r3, #68	@ 0x44
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	334d      	adds	r3, #77	@ 0x4d
 8002b98:	2204      	movs	r2, #4
 8002b9a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3319      	adds	r3, #25
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d114      	bne.n	8002bdc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3319      	adds	r3, #25
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fbe9 	bl	80053bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	6093      	str	r3, [r2, #8]
 8002bfc:	e28d      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 fa66 	bl	80050d8 <USB_ReadChInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c12:	2b80      	cmp	r3, #128	@ 0x80
 8002c14:	d169      	bne.n	8002cea <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	799b      	ldrb	r3, [r3, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d111      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	334d      	adds	r3, #77	@ 0x4d
 8002c2e:	2207      	movs	r2, #7
 8002c30:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fbbe 	bl	80053bc <USB_HC_Halt>
 8002c40:	e049      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3344      	adds	r3, #68	@ 0x44
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	1c59      	adds	r1, r3, #1
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4403      	add	r3, r0
 8002c62:	3344      	adds	r3, #68	@ 0x44
 8002c64:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3344      	adds	r3, #68	@ 0x44
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d922      	bls.n	8002cc2 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3344      	adds	r3, #68	@ 0x44
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334c      	adds	r3, #76	@ 0x4c
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	334c      	adds	r3, #76	@ 0x4c
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe ff14 	bl	8001ae8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cc0:	e009      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	334c      	adds	r3, #76	@ 0x4c
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	6093      	str	r3, [r2, #8]
 8002ce8:	e217      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 f9f0 	bl	80050d8 <USB_ReadChInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d02:	d11b      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	334d      	adds	r3, #77	@ 0x4d
 8002d14:	2209      	movs	r2, #9
 8002d16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 fb4b 	bl	80053bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d38:	6093      	str	r3, [r2, #8]
 8002d3a:	e1ee      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 f9c7 	bl	80050d8 <USB_ReadChInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	f040 81df 	bne.w	8003114 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	2302      	movs	r3, #2
 8002d66:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	334d      	adds	r3, #77	@ 0x4d
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	f040 8093 	bne.w	8002ea6 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	334d      	adds	r3, #77	@ 0x4d
 8002d90:	2202      	movs	r2, #2
 8002d92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	334c      	adds	r3, #76	@ 0x4c
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3326      	adds	r3, #38	@ 0x26
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d00b      	beq.n	8002dd6 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3326      	adds	r3, #38	@ 0x26
 8002dce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	f040 8190 	bne.w	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	799b      	ldrb	r3, [r3, #6]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d115      	bne.n	8002e0a <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	333d      	adds	r3, #61	@ 0x3d
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	f083 0301 	eor.w	r3, r3, #1
 8002df6:	b2d8      	uxtb	r0, r3
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	333d      	adds	r3, #61	@ 0x3d
 8002e06:	4602      	mov	r2, r0
 8002e08:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	799b      	ldrb	r3, [r3, #6]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	f040 8171 	bne.w	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3334      	adds	r3, #52	@ 0x34
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8165 	beq.w	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3334      	adds	r3, #52	@ 0x34
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4403      	add	r3, r0
 8002e4c:	3328      	adds	r3, #40	@ 0x28
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	440b      	add	r3, r1
 8002e52:	1e59      	subs	r1, r3, #1
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4403      	add	r3, r0
 8002e62:	3328      	adds	r3, #40	@ 0x28
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e6a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 813f 	beq.w	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	333d      	adds	r3, #61	@ 0x3d
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2d8      	uxtb	r0, r3
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	333d      	adds	r3, #61	@ 0x3d
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e127      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	334d      	adds	r3, #77	@ 0x4d
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d120      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	334d      	adds	r3, #77	@ 0x4d
 8002ecc:	2202      	movs	r2, #2
 8002ece:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	331b      	adds	r3, #27
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	f040 8107 	bne.w	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334c      	adds	r3, #76	@ 0x4c
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e0fb      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334d      	adds	r3, #77	@ 0x4d
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d13a      	bne.n	8002f8a <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	334d      	adds	r3, #77	@ 0x4d
 8002f24:	2202      	movs	r2, #2
 8002f26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334c      	adds	r3, #76	@ 0x4c
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	f040 80d1 	bne.w	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	331b      	adds	r3, #27
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	0151      	lsls	r1, r2, #5
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	440a      	add	r2, r1
 8002f7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6053      	str	r3, [r2, #4]
 8002f88:	e0b5      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334d      	adds	r3, #77	@ 0x4d
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d114      	bne.n	8002fca <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	@ 0x4d
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334c      	adds	r3, #76	@ 0x4c
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e095      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334d      	adds	r3, #77	@ 0x4d
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d114      	bne.n	800300a <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	334c      	adds	r3, #76	@ 0x4c
 8003004:	2205      	movs	r2, #5
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e075      	b.n	80030f6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	334d      	adds	r3, #77	@ 0x4d
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b07      	cmp	r3, #7
 800301e:	d00a      	beq.n	8003036 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334d      	adds	r3, #77	@ 0x4d
 8003030:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003032:	2b09      	cmp	r3, #9
 8003034:	d170      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334d      	adds	r3, #77	@ 0x4d
 8003046:	2202      	movs	r2, #2
 8003048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3344      	adds	r3, #68	@ 0x44
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1c59      	adds	r1, r3, #1
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4403      	add	r3, r0
 800306a:	3344      	adds	r3, #68	@ 0x44
 800306c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3344      	adds	r3, #68	@ 0x44
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d914      	bls.n	80030ae <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3344      	adds	r3, #68	@ 0x44
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	334c      	adds	r3, #76	@ 0x4c
 80030a8:	2204      	movs	r2, #4
 80030aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030ac:	e022      	b.n	80030f4 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	334c      	adds	r3, #76	@ 0x4c
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030d8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030e0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030f4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	334c      	adds	r3, #76	@ 0x4c
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe fceb 	bl	8001ae8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003112:	e002      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003118:	bf00      	nop
  }
}
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	@ 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	0c5b      	lsrs	r3, r3, #17
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003154:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d004      	beq.n	8003166 <HCD_RXQLVL_IRQHandler+0x46>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b05      	cmp	r3, #5
 8003160:	f000 80b6 	beq.w	80032d0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003164:	e0b7      	b.n	80032d6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80b3 	beq.w	80032d4 <HCD_RXQLVL_IRQHandler+0x1b4>
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	332c      	adds	r3, #44	@ 0x2c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80a7 	beq.w	80032d4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3338      	adds	r3, #56	@ 0x38
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	18d1      	adds	r1, r2, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4403      	add	r3, r0
 80031aa:	3334      	adds	r3, #52	@ 0x34
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4299      	cmp	r1, r3
 80031b0:	f200 8083 	bhi.w	80032ba <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	332c      	adds	r3, #44	@ 0x2c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	b292      	uxth	r2, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f001 ff17 	bl	8005002 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	332c      	adds	r3, #44	@ 0x2c
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	18d1      	adds	r1, r2, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4403      	add	r3, r0
 80031f8:	332c      	adds	r3, #44	@ 0x2c
 80031fa:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3338      	adds	r3, #56	@ 0x38
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	18d1      	adds	r1, r2, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4403      	add	r3, r0
 8003220:	3338      	adds	r3, #56	@ 0x38
 8003222:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	0cdb      	lsrs	r3, r3, #19
 8003234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003238:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	3328      	adds	r3, #40	@ 0x28
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4293      	cmp	r3, r2
 8003252:	d13f      	bne.n	80032d4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d03c      	beq.n	80032d4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003270:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003278:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	333c      	adds	r3, #60	@ 0x3c
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	f083 0301 	eor.w	r3, r3, #1
 80032a2:	b2d8      	uxtb	r0, r3
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	333c      	adds	r3, #60	@ 0x3c
 80032b4:	4602      	mov	r2, r0
 80032b6:	701a      	strb	r2, [r3, #0]
      break;
 80032b8:	e00c      	b.n	80032d4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334c      	adds	r3, #76	@ 0x4c
 80032ca:	2204      	movs	r2, #4
 80032cc:	701a      	strb	r2, [r3, #0]
      break;
 80032ce:	e001      	b.n	80032d4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80032d0:	bf00      	nop
 80032d2:	e000      	b.n	80032d6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80032d4:	bf00      	nop
  }
}
 80032d6:	bf00      	nop
 80032d8:	3728      	adds	r7, #40	@ 0x28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800330a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d10b      	bne.n	800332e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d102      	bne.n	8003326 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fe fbb9 	bl	8001a98 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b08      	cmp	r3, #8
 8003336:	d132      	bne.n	800339e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f043 0308 	orr.w	r3, r3, #8
 800333e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d126      	bne.n	8003398 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7a5b      	ldrb	r3, [r3, #9]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d113      	bne.n	800337a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003358:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800335c:	d106      	bne.n	800336c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f001 ffdb 	bl	8005320 <USB_InitFSLSPClkSel>
 800336a:	e011      	b.n	8003390 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f001 ffd4 	bl	8005320 <USB_InitFSLSPClkSel>
 8003378:	e00a      	b.n	8003390 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	79db      	ldrb	r3, [r3, #7]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d106      	bne.n	8003390 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003388:	461a      	mov	r2, r3
 800338a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800338e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fe fb95 	bl	8001ac0 <HAL_HCD_PortEnabled_Callback>
 8003396:	e002      	b.n	800339e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fe fb9b 	bl	8001ad4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d103      	bne.n	80033b0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f043 0320 	orr.w	r3, r3, #32
 80033ae:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6013      	str	r3, [r2, #0]
}
 80033bc:	bf00      	nop
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e267      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d075      	beq.n	80034ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033e2:	4b88      	ldr	r3, [pc, #544]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d00c      	beq.n	8003408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b85      	ldr	r3, [pc, #532]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d112      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b82      	ldr	r3, [pc, #520]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003406:	d10b      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	4b7e      	ldr	r3, [pc, #504]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05b      	beq.n	80034cc <HAL_RCC_OscConfig+0x108>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d157      	bne.n	80034cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e242      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x74>
 800342a:	4b76      	ldr	r3, [pc, #472]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xb0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x98>
 8003442:	4b70      	ldr	r3, [pc, #448]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6f      	ldr	r2, [pc, #444]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6d      	ldr	r3, [pc, #436]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6c      	ldr	r2, [pc, #432]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xb0>
 800345c:	4b69      	ldr	r3, [pc, #420]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a68      	ldr	r2, [pc, #416]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b66      	ldr	r3, [pc, #408]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a65      	ldr	r2, [pc, #404]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd fe9a 	bl	80011b4 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd fe96 	bl	80011b4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	@ 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e207      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b5b      	ldr	r3, [pc, #364]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xc0>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fd fe86 	bl	80011b4 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fd fe82 	bl	80011b4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	@ 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1f3      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	4b51      	ldr	r3, [pc, #324]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0xe8>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034da:	4b4a      	ldr	r3, [pc, #296]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b47      	ldr	r3, [pc, #284]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b44      	ldr	r3, [pc, #272]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b41      	ldr	r3, [pc, #260]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x152>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1c7      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b3b      	ldr	r3, [pc, #236]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4937      	ldr	r1, [pc, #220]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e03a      	b.n	80035a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b34      	ldr	r3, [pc, #208]	@ (8003608 <HAL_RCC_OscConfig+0x244>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fd fe3b 	bl	80011b4 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003542:	f7fd fe37 	bl	80011b4 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1a8      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4925      	ldr	r1, [pc, #148]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003576:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_OscConfig+0x244>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fd fe1a 	bl	80011b4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003584:	f7fd fe16 	bl	80011b4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e187      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d036      	beq.n	800361c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b15      	ldr	r3, [pc, #84]	@ (800360c <HAL_RCC_OscConfig+0x248>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fd fdfa 	bl	80011b4 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fd fdf6 	bl	80011b4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e167      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80035d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x200>
 80035e2:	e01b      	b.n	800361c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b09      	ldr	r3, [pc, #36]	@ (800360c <HAL_RCC_OscConfig+0x248>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fde3 	bl	80011b4 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	e00e      	b.n	8003610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f2:	f7fd fddf 	bl	80011b4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d907      	bls.n	8003610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e150      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
 8003604:	40023800 	.word	0x40023800
 8003608:	42470000 	.word	0x42470000
 800360c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b88      	ldr	r3, [pc, #544]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ea      	bne.n	80035f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8097 	beq.w	8003758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362e:	4b81      	ldr	r3, [pc, #516]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b7d      	ldr	r3, [pc, #500]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	4a7c      	ldr	r2, [pc, #496]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003648:	6413      	str	r3, [r2, #64]	@ 0x40
 800364a:	4b7a      	ldr	r3, [pc, #488]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b77      	ldr	r3, [pc, #476]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d118      	bne.n	8003698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b74      	ldr	r3, [pc, #464]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a73      	ldr	r2, [pc, #460]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fd fd9f 	bl	80011b4 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367a:	f7fd fd9b 	bl	80011b4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e10c      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	4b6a      	ldr	r3, [pc, #424]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x2ea>
 80036a0:	4b64      	ldr	r3, [pc, #400]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a4:	4a63      	ldr	r2, [pc, #396]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ac:	e01c      	b.n	80036e8 <HAL_RCC_OscConfig+0x324>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x30c>
 80036b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0x324>
 80036d0:	4b58      	ldr	r3, [pc, #352]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a57      	ldr	r2, [pc, #348]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	4b55      	ldr	r3, [pc, #340]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4a54      	ldr	r2, [pc, #336]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0304 	bic.w	r3, r3, #4
 80036e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fd60 	bl	80011b4 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd fd5c 	bl	80011b4 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0cb      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	4b49      	ldr	r3, [pc, #292]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ee      	beq.n	80036f8 <HAL_RCC_OscConfig+0x334>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371c:	f7fd fd4a 	bl	80011b4 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fd fd46 	bl	80011b4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0b5      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373a:	4b3e      	ldr	r3, [pc, #248]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ee      	bne.n	8003724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	4a38      	ldr	r2, [pc, #224]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003756:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80a1 	beq.w	80038a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003762:	4b34      	ldr	r3, [pc, #208]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b08      	cmp	r3, #8
 800376c:	d05c      	beq.n	8003828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d141      	bne.n	80037fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	4b31      	ldr	r3, [pc, #196]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fd fd1a 	bl	80011b4 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd fd16 	bl	80011b4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e087      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b27      	ldr	r3, [pc, #156]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	3b01      	subs	r3, #1
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	491b      	ldr	r1, [pc, #108]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b1b      	ldr	r3, [pc, #108]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fd fcef 	bl	80011b4 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fd fceb 	bl	80011b4 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e05c      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x416>
 80037f8:	e054      	b.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b10      	ldr	r3, [pc, #64]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fd fcd8 	bl	80011b4 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7fd fcd4 	bl	80011b4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e045      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x444>
 8003826:	e03d      	b.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e038      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000
 800383c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003840:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x4ec>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d028      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d121      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d11a      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003870:	4013      	ands	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003878:	4293      	cmp	r3, r2
 800387a:	d111      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800

080038b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0cc      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b68      	ldr	r3, [pc, #416]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d90c      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b65      	ldr	r3, [pc, #404]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b63      	ldr	r3, [pc, #396]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0b8      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003908:	4b59      	ldr	r3, [pc, #356]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a58      	ldr	r2, [pc, #352]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003920:	4b53      	ldr	r3, [pc, #332]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a52      	ldr	r2, [pc, #328]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800392a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392c:	4b50      	ldr	r3, [pc, #320]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	494d      	ldr	r1, [pc, #308]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d044      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	4b47      	ldr	r3, [pc, #284]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d119      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e07f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d003      	beq.n	8003972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	2b03      	cmp	r3, #3
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b3f      	ldr	r3, [pc, #252]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3b      	ldr	r3, [pc, #236]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e067      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4934      	ldr	r1, [pc, #208]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fd fc06 	bl	80011b4 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fd fc02 	bl	80011b4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e04f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b25      	ldr	r3, [pc, #148]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d20c      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b22      	ldr	r3, [pc, #136]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b20      	ldr	r3, [pc, #128]	@ (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e032      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4916      	ldr	r1, [pc, #88]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a26:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	490e      	ldr	r1, [pc, #56]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a3a:	f000 f821 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	490a      	ldr	r1, [pc, #40]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a52:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd fa8c 	bl	8000f78 <HAL_InitTick>

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023c00 	.word	0x40023c00
 8003a70:	40023800 	.word	0x40023800
 8003a74:	080082e0 	.word	0x080082e0
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	20000004 	.word	0x20000004

08003a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a84:	b094      	sub	sp, #80	@ 0x50
 8003a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a90:	2300      	movs	r3, #0
 8003a92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a98:	4b79      	ldr	r3, [pc, #484]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	f200 80e1 	bhi.w	8003c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x3a>
 8003ab2:	e0db      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b73      	ldr	r3, [pc, #460]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ab8:	e0db      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aba:	4b73      	ldr	r3, [pc, #460]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8003abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003abe:	e0d8      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ac8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aca:	4b6d      	ldr	r3, [pc, #436]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d063      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	2200      	movs	r2, #0
 8003ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ae0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aea:	2300      	movs	r3, #0
 8003aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003af2:	4622      	mov	r2, r4
 8003af4:	462b      	mov	r3, r5
 8003af6:	f04f 0000 	mov.w	r0, #0
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	0159      	lsls	r1, r3, #5
 8003b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b04:	0150      	lsls	r0, r2, #5
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	1a51      	subs	r1, r2, r1
 8003b0e:	6139      	str	r1, [r7, #16]
 8003b10:	4629      	mov	r1, r5
 8003b12:	eb63 0301 	sbc.w	r3, r3, r1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b24:	4659      	mov	r1, fp
 8003b26:	018b      	lsls	r3, r1, #6
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b2e:	4651      	mov	r1, sl
 8003b30:	018a      	lsls	r2, r1, #6
 8003b32:	4651      	mov	r1, sl
 8003b34:	ebb2 0801 	subs.w	r8, r2, r1
 8003b38:	4659      	mov	r1, fp
 8003b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b52:	4690      	mov	r8, r2
 8003b54:	4699      	mov	r9, r3
 8003b56:	4623      	mov	r3, r4
 8003b58:	eb18 0303 	adds.w	r3, r8, r3
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	462b      	mov	r3, r5
 8003b60:	eb49 0303 	adc.w	r3, r9, r3
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b72:	4629      	mov	r1, r5
 8003b74:	024b      	lsls	r3, r1, #9
 8003b76:	4621      	mov	r1, r4
 8003b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	024a      	lsls	r2, r1, #9
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b86:	2200      	movs	r2, #0
 8003b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b90:	f7fc fb2e 	bl	80001f0 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b9c:	e058      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9e:	4b38      	ldr	r3, [pc, #224]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	099b      	lsrs	r3, r3, #6
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	4611      	mov	r1, r2
 8003baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bb8:	4642      	mov	r2, r8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	f04f 0000 	mov.w	r0, #0
 8003bc0:	f04f 0100 	mov.w	r1, #0
 8003bc4:	0159      	lsls	r1, r3, #5
 8003bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bca:	0150      	lsls	r0, r2, #5
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	00eb      	lsls	r3, r5, #3
 8003c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c06:	00e2      	lsls	r2, r4, #3
 8003c08:	4614      	mov	r4, r2
 8003c0a:	461d      	mov	r5, r3
 8003c0c:	4643      	mov	r3, r8
 8003c0e:	18e3      	adds	r3, r4, r3
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	464b      	mov	r3, r9
 8003c14:	eb45 0303 	adc.w	r3, r5, r3
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c26:	4629      	mov	r1, r5
 8003c28:	028b      	lsls	r3, r1, #10
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c30:	4621      	mov	r1, r4
 8003c32:	028a      	lsls	r2, r1, #10
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	61fa      	str	r2, [r7, #28]
 8003c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c44:	f7fc fad4 	bl	80001f0 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c6a:	e002      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3750      	adds	r7, #80	@ 0x50
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	007a1200 	.word	0x007a1200

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c90:	4b03      	ldr	r3, [pc, #12]	@ (8003ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000000 	.word	0x20000000

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca8:	f7ff fff0 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0a9b      	lsrs	r3, r3, #10
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	@ (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	080082f0 	.word	0x080082f0

08003ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd0:	f7ff ffdc 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0b5b      	lsrs	r3, r3, #13
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4903      	ldr	r1, [pc, #12]	@ (8003cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	080082f0 	.word	0x080082f0

08003cf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	220f      	movs	r2, #15
 8003d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d04:	4b12      	ldr	r3, [pc, #72]	@ (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d10:	4b0f      	ldr	r3, [pc, #60]	@ (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d28:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	08db      	lsrs	r3, r3, #3
 8003d2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <HAL_RCC_GetClockConfig+0x60>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40023c00 	.word	0x40023c00

08003d58 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e025      	b.n	8003db8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fd f8ef 	bl	8000f64 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f000 ff4b 	bl	8004c34 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	461a      	mov	r2, r3
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	f000 ffa0 	bl	8004cee <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e041      	b.n	8003e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fc ff62 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f000 fa7e 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d001      	beq.n	8003e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e04e      	b.n	8003f16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a23      	ldr	r2, [pc, #140]	@ (8003f24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d022      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea2:	d01d      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d018      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d111      	bne.n	8003f04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d010      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f02:	e007      	b.n	8003f14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40010400 	.word	0x40010400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40001800 	.word	0x40001800

08003f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d020      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0202 	mvn.w	r2, #2
 8003f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f999 	bl	80042c2 <HAL_TIM_IC_CaptureCallback>
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f98b 	bl	80042ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f99c 	bl	80042d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d020      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01b      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0204 	mvn.w	r2, #4
 8003fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f973 	bl	80042c2 <HAL_TIM_IC_CaptureCallback>
 8003fdc:	e005      	b.n	8003fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f965 	bl	80042ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f976 	bl	80042d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d020      	beq.n	800403c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01b      	beq.n	800403c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0208 	mvn.w	r2, #8
 800400c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2204      	movs	r2, #4
 8004012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f94d 	bl	80042c2 <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f93f 	bl	80042ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f950 	bl	80042d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	d020      	beq.n	8004088 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01b      	beq.n	8004088 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0210 	mvn.w	r2, #16
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2208      	movs	r2, #8
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f927 	bl	80042c2 <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f919 	bl	80042ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f92a 	bl	80042d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0201 	mvn.w	r2, #1
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fc fdbe 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fae4 	bl	8004698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8fb 	bl	80042ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0220 	mvn.w	r2, #32
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fab6 	bl	8004684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_TIM_ConfigClockSource+0x1c>
 8004138:	2302      	movs	r3, #2
 800413a:	e0b4      	b.n	80042a6 <HAL_TIM_ConfigClockSource+0x186>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800415a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004174:	d03e      	beq.n	80041f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417a:	f200 8087 	bhi.w	800428c <HAL_TIM_ConfigClockSource+0x16c>
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004182:	f000 8086 	beq.w	8004292 <HAL_TIM_ConfigClockSource+0x172>
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418a:	d87f      	bhi.n	800428c <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b70      	cmp	r3, #112	@ 0x70
 800418e:	d01a      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004190:	2b70      	cmp	r3, #112	@ 0x70
 8004192:	d87b      	bhi.n	800428c <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b60      	cmp	r3, #96	@ 0x60
 8004196:	d050      	beq.n	800423a <HAL_TIM_ConfigClockSource+0x11a>
 8004198:	2b60      	cmp	r3, #96	@ 0x60
 800419a:	d877      	bhi.n	800428c <HAL_TIM_ConfigClockSource+0x16c>
 800419c:	2b50      	cmp	r3, #80	@ 0x50
 800419e:	d03c      	beq.n	800421a <HAL_TIM_ConfigClockSource+0xfa>
 80041a0:	2b50      	cmp	r3, #80	@ 0x50
 80041a2:	d873      	bhi.n	800428c <HAL_TIM_ConfigClockSource+0x16c>
 80041a4:	2b40      	cmp	r3, #64	@ 0x40
 80041a6:	d058      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x13a>
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d86f      	bhi.n	800428c <HAL_TIM_ConfigClockSource+0x16c>
 80041ac:	2b30      	cmp	r3, #48	@ 0x30
 80041ae:	d064      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x15a>
 80041b0:	2b30      	cmp	r3, #48	@ 0x30
 80041b2:	d86b      	bhi.n	800428c <HAL_TIM_ConfigClockSource+0x16c>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d060      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x15a>
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d867      	bhi.n	800428c <HAL_TIM_ConfigClockSource+0x16c>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d05c      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x15a>
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d05a      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x15a>
 80041c4:	e062      	b.n	800428c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d6:	f000 f9b9 	bl	800454c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	609a      	str	r2, [r3, #8]
      break;
 80041f2:	e04f      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004204:	f000 f9a2 	bl	800454c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004216:	609a      	str	r2, [r3, #8]
      break;
 8004218:	e03c      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004226:	461a      	mov	r2, r3
 8004228:	f000 f916 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2150      	movs	r1, #80	@ 0x50
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f96f 	bl	8004516 <TIM_ITRx_SetConfig>
      break;
 8004238:	e02c      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004246:	461a      	mov	r2, r3
 8004248:	f000 f935 	bl	80044b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2160      	movs	r1, #96	@ 0x60
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f95f 	bl	8004516 <TIM_ITRx_SetConfig>
      break;
 8004258:	e01c      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004266:	461a      	mov	r2, r3
 8004268:	f000 f8f6 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2140      	movs	r1, #64	@ 0x40
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f94f 	bl	8004516 <TIM_ITRx_SetConfig>
      break;
 8004278:	e00c      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f000 f946 	bl	8004516 <TIM_ITRx_SetConfig>
      break;
 800428a:	e003      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      break;
 8004290:	e000      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a46      	ldr	r2, [pc, #280]	@ (800442c <TIM_Base_SetConfig+0x12c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800431e:	d00f      	beq.n	8004340 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a43      	ldr	r2, [pc, #268]	@ (8004430 <TIM_Base_SetConfig+0x130>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00b      	beq.n	8004340 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a42      	ldr	r2, [pc, #264]	@ (8004434 <TIM_Base_SetConfig+0x134>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d007      	beq.n	8004340 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a41      	ldr	r2, [pc, #260]	@ (8004438 <TIM_Base_SetConfig+0x138>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a40      	ldr	r2, [pc, #256]	@ (800443c <TIM_Base_SetConfig+0x13c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d108      	bne.n	8004352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a35      	ldr	r2, [pc, #212]	@ (800442c <TIM_Base_SetConfig+0x12c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d02b      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004360:	d027      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a32      	ldr	r2, [pc, #200]	@ (8004430 <TIM_Base_SetConfig+0x130>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d023      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a31      	ldr	r2, [pc, #196]	@ (8004434 <TIM_Base_SetConfig+0x134>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d01f      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a30      	ldr	r2, [pc, #192]	@ (8004438 <TIM_Base_SetConfig+0x138>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01b      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2f      	ldr	r2, [pc, #188]	@ (800443c <TIM_Base_SetConfig+0x13c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d017      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2e      	ldr	r2, [pc, #184]	@ (8004440 <TIM_Base_SetConfig+0x140>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2d      	ldr	r2, [pc, #180]	@ (8004444 <TIM_Base_SetConfig+0x144>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00f      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2c      	ldr	r2, [pc, #176]	@ (8004448 <TIM_Base_SetConfig+0x148>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2b      	ldr	r2, [pc, #172]	@ (800444c <TIM_Base_SetConfig+0x14c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004450 <TIM_Base_SetConfig+0x150>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a29      	ldr	r2, [pc, #164]	@ (8004454 <TIM_Base_SetConfig+0x154>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a10      	ldr	r2, [pc, #64]	@ (800442c <TIM_Base_SetConfig+0x12c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_Base_SetConfig+0xf8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a12      	ldr	r2, [pc, #72]	@ (800443c <TIM_Base_SetConfig+0x13c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d103      	bne.n	8004400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d105      	bne.n	800441e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	611a      	str	r2, [r3, #16]
  }
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40010400 	.word	0x40010400
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800
 800444c:	40001800 	.word	0x40001800
 8004450:	40001c00 	.word	0x40001c00
 8004454:	40002000 	.word	0x40002000

08004458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 030a 	bic.w	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f023 0210 	bic.w	r2, r3, #16
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	f043 0307 	orr.w	r3, r3, #7
 8004538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	431a      	orrs	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e05a      	b.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a21      	ldr	r2, [pc, #132]	@ (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d022      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f0:	d01d      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d018      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1b      	ldr	r2, [pc, #108]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1a      	ldr	r2, [pc, #104]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a18      	ldr	r2, [pc, #96]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a17      	ldr	r2, [pc, #92]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a15      	ldr	r2, [pc, #84]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10c      	bne.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	4313      	orrs	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40010400 	.word	0x40010400
 800467c:	40014000 	.word	0x40014000
 8004680:	40001800 	.word	0x40001800

08004684 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e042      	b.n	8004744 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc fb0e 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	@ 0x24
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f82b 	bl	800474c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800474c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004750:	b0c0      	sub	sp, #256	@ 0x100
 8004752:	af00      	add	r7, sp, #0
 8004754:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	68d9      	ldr	r1, [r3, #12]
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	ea40 0301 	orr.w	r3, r0, r1
 8004774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	431a      	orrs	r2, r3
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	431a      	orrs	r2, r3
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047a4:	f021 010c 	bic.w	r1, r1, #12
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047b2:	430b      	orrs	r3, r1
 80047b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c6:	6999      	ldr	r1, [r3, #24]
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	ea40 0301 	orr.w	r3, r0, r1
 80047d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b8f      	ldr	r3, [pc, #572]	@ (8004a18 <UART_SetConfig+0x2cc>)
 80047dc:	429a      	cmp	r2, r3
 80047de:	d005      	beq.n	80047ec <UART_SetConfig+0xa0>
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b8d      	ldr	r3, [pc, #564]	@ (8004a1c <UART_SetConfig+0x2d0>)
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d104      	bne.n	80047f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047ec:	f7ff fa6e 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 80047f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047f4:	e003      	b.n	80047fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f6:	f7ff fa55 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 80047fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004808:	f040 810c 	bne.w	8004a24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800480c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004810:	2200      	movs	r2, #0
 8004812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004816:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800481a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	1891      	adds	r1, r2, r2
 8004824:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004826:	415b      	adcs	r3, r3
 8004828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800482a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800482e:	4621      	mov	r1, r4
 8004830:	eb12 0801 	adds.w	r8, r2, r1
 8004834:	4629      	mov	r1, r5
 8004836:	eb43 0901 	adc.w	r9, r3, r1
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800484a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800484e:	4690      	mov	r8, r2
 8004850:	4699      	mov	r9, r3
 8004852:	4623      	mov	r3, r4
 8004854:	eb18 0303 	adds.w	r3, r8, r3
 8004858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800485c:	462b      	mov	r3, r5
 800485e:	eb49 0303 	adc.w	r3, r9, r3
 8004862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004872:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800487a:	460b      	mov	r3, r1
 800487c:	18db      	adds	r3, r3, r3
 800487e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004880:	4613      	mov	r3, r2
 8004882:	eb42 0303 	adc.w	r3, r2, r3
 8004886:	657b      	str	r3, [r7, #84]	@ 0x54
 8004888:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800488c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004890:	f7fb fcae 	bl	80001f0 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4b61      	ldr	r3, [pc, #388]	@ (8004a20 <UART_SetConfig+0x2d4>)
 800489a:	fba3 2302 	umull	r2, r3, r3, r2
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	011c      	lsls	r4, r3, #4
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	1891      	adds	r1, r2, r2
 80048ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048bc:	415b      	adcs	r3, r3
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048c4:	4641      	mov	r1, r8
 80048c6:	eb12 0a01 	adds.w	sl, r2, r1
 80048ca:	4649      	mov	r1, r9
 80048cc:	eb43 0b01 	adc.w	fp, r3, r1
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e4:	4692      	mov	sl, r2
 80048e6:	469b      	mov	fp, r3
 80048e8:	4643      	mov	r3, r8
 80048ea:	eb1a 0303 	adds.w	r3, sl, r3
 80048ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048f2:	464b      	mov	r3, r9
 80048f4:	eb4b 0303 	adc.w	r3, fp, r3
 80048f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004908:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800490c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004910:	460b      	mov	r3, r1
 8004912:	18db      	adds	r3, r3, r3
 8004914:	643b      	str	r3, [r7, #64]	@ 0x40
 8004916:	4613      	mov	r3, r2
 8004918:	eb42 0303 	adc.w	r3, r2, r3
 800491c:	647b      	str	r3, [r7, #68]	@ 0x44
 800491e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004922:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004926:	f7fb fc63 	bl	80001f0 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4611      	mov	r1, r2
 8004930:	4b3b      	ldr	r3, [pc, #236]	@ (8004a20 <UART_SetConfig+0x2d4>)
 8004932:	fba3 2301 	umull	r2, r3, r3, r1
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2264      	movs	r2, #100	@ 0x64
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	1acb      	subs	r3, r1, r3
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004946:	4b36      	ldr	r3, [pc, #216]	@ (8004a20 <UART_SetConfig+0x2d4>)
 8004948:	fba3 2302 	umull	r2, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004954:	441c      	add	r4, r3
 8004956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004960:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004964:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	1891      	adds	r1, r2, r2
 800496e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004970:	415b      	adcs	r3, r3
 8004972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004978:	4641      	mov	r1, r8
 800497a:	1851      	adds	r1, r2, r1
 800497c:	6339      	str	r1, [r7, #48]	@ 0x30
 800497e:	4649      	mov	r1, r9
 8004980:	414b      	adcs	r3, r1
 8004982:	637b      	str	r3, [r7, #52]	@ 0x34
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004990:	4659      	mov	r1, fp
 8004992:	00cb      	lsls	r3, r1, #3
 8004994:	4651      	mov	r1, sl
 8004996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499a:	4651      	mov	r1, sl
 800499c:	00ca      	lsls	r2, r1, #3
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	4642      	mov	r2, r8
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049ac:	464b      	mov	r3, r9
 80049ae:	460a      	mov	r2, r1
 80049b0:	eb42 0303 	adc.w	r3, r2, r3
 80049b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049cc:	460b      	mov	r3, r1
 80049ce:	18db      	adds	r3, r3, r3
 80049d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d2:	4613      	mov	r3, r2
 80049d4:	eb42 0303 	adc.w	r3, r2, r3
 80049d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049e2:	f7fb fc05 	bl	80001f0 <__aeabi_uldivmod>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <UART_SetConfig+0x2d4>)
 80049ec:	fba3 1302 	umull	r1, r3, r3, r2
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2164      	movs	r1, #100	@ 0x64
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3332      	adds	r3, #50	@ 0x32
 80049fe:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <UART_SetConfig+0x2d4>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f003 0207 	and.w	r2, r3, #7
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4422      	add	r2, r4
 8004a12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a14:	e106      	b.n	8004c24 <UART_SetConfig+0x4d8>
 8004a16:	bf00      	nop
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	40011400 	.word	0x40011400
 8004a20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a36:	4642      	mov	r2, r8
 8004a38:	464b      	mov	r3, r9
 8004a3a:	1891      	adds	r1, r2, r2
 8004a3c:	6239      	str	r1, [r7, #32]
 8004a3e:	415b      	adcs	r3, r3
 8004a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a46:	4641      	mov	r1, r8
 8004a48:	1854      	adds	r4, r2, r1
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	eb43 0501 	adc.w	r5, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	00eb      	lsls	r3, r5, #3
 8004a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5e:	00e2      	lsls	r2, r4, #3
 8004a60:	4614      	mov	r4, r2
 8004a62:	461d      	mov	r5, r3
 8004a64:	4643      	mov	r3, r8
 8004a66:	18e3      	adds	r3, r4, r3
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	eb45 0303 	adc.w	r3, r5, r3
 8004a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a92:	4629      	mov	r1, r5
 8004a94:	008b      	lsls	r3, r1, #2
 8004a96:	4621      	mov	r1, r4
 8004a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	008a      	lsls	r2, r1, #2
 8004aa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004aa4:	f7fb fba4 	bl	80001f0 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4b60      	ldr	r3, [pc, #384]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004aae:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	011c      	lsls	r4, r3, #4
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ac0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ac4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	61b9      	str	r1, [r7, #24]
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad8:	4641      	mov	r1, r8
 8004ada:	1851      	adds	r1, r2, r1
 8004adc:	6139      	str	r1, [r7, #16]
 8004ade:	4649      	mov	r1, r9
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af0:	4659      	mov	r1, fp
 8004af2:	00cb      	lsls	r3, r1, #3
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afa:	4651      	mov	r1, sl
 8004afc:	00ca      	lsls	r2, r1, #3
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	4642      	mov	r2, r8
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b30:	4649      	mov	r1, r9
 8004b32:	008b      	lsls	r3, r1, #2
 8004b34:	4641      	mov	r1, r8
 8004b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	008a      	lsls	r2, r1, #2
 8004b3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b42:	f7fb fb55 	bl	80001f0 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4b38      	ldr	r3, [pc, #224]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2264      	movs	r2, #100	@ 0x64
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	1acb      	subs	r3, r1, r3
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	3332      	adds	r3, #50	@ 0x32
 8004b60:	4a33      	ldr	r2, [pc, #204]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b6c:	441c      	add	r4, r3
 8004b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b72:	2200      	movs	r2, #0
 8004b74:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b76:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	415b      	adcs	r3, r3
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	1851      	adds	r1, r2, r1
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	00cb      	lsls	r3, r1, #3
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bae:	4651      	mov	r1, sl
 8004bb0:	00ca      	lsls	r2, r1, #3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4642      	mov	r2, r8
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	eb42 0303 	adc.w	r3, r2, r3
 8004bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004be0:	4649      	mov	r1, r9
 8004be2:	008b      	lsls	r3, r1, #2
 8004be4:	4641      	mov	r1, r8
 8004be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bea:	4641      	mov	r1, r8
 8004bec:	008a      	lsls	r2, r1, #2
 8004bee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bf2:	f7fb fafd 	bl	80001f0 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	@ 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	3332      	adds	r3, #50	@ 0x32
 8004c0e:	4a08      	ldr	r2, [pc, #32]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 020f 	and.w	r2, r3, #15
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4422      	add	r2, r4
 8004c22:	609a      	str	r2, [r3, #8]
}
 8004c24:	bf00      	nop
 8004c26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c30:	51eb851f 	.word	0x51eb851f

08004c34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d123      	bne.n	8004c8e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004c4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	6851      	ldr	r1, [r2, #4]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	6892      	ldr	r2, [r2, #8]
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	68d2      	ldr	r2, [r2, #12]
 8004c60:	4311      	orrs	r1, r2
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	6912      	ldr	r2, [r2, #16]
 8004c66:	4311      	orrs	r1, r2
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	6952      	ldr	r2, [r2, #20]
 8004c6c:	4311      	orrs	r1, r2
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	6992      	ldr	r2, [r2, #24]
 8004c72:	4311      	orrs	r1, r2
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	69d2      	ldr	r2, [r2, #28]
 8004c78:	4311      	orrs	r1, r2
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	6a12      	ldr	r2, [r2, #32]
 8004c7e:	4311      	orrs	r1, r2
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c84:	430a      	orrs	r2, r1
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e028      	b.n	8004ce0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	69d9      	ldr	r1, [r3, #28]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	4319      	orrs	r1, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004cb4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	6851      	ldr	r1, [r2, #4]
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	6892      	ldr	r2, [r2, #8]
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	4311      	orrs	r1, r2
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	6912      	ldr	r2, [r2, #16]
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	6952      	ldr	r2, [r2, #20]
 8004cd2:	4311      	orrs	r1, r2
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	6992      	ldr	r2, [r2, #24]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d128      	bne.n	8004d52 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1e59      	subs	r1, r3, #1
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4319      	orrs	r1, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	4319      	orrs	r1, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	031b      	lsls	r3, r3, #12
 8004d2a:	4319      	orrs	r1, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	041b      	lsls	r3, r3, #16
 8004d34:	4319      	orrs	r1, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	051b      	lsls	r3, r3, #20
 8004d3e:	4319      	orrs	r1, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	e02f      	b.n	8004db2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	3a01      	subs	r2, #1
 8004d64:	0311      	lsls	r1, r2, #12
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	6952      	ldr	r2, [r2, #20]
 8004d6a:	3a01      	subs	r2, #1
 8004d6c:	0512      	lsls	r2, r2, #20
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1e59      	subs	r1, r3, #1
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4319      	orrs	r1, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	4319      	orrs	r1, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	4319      	orrs	r1, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	430b      	orrs	r3, r1
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	f107 001c 	add.w	r0, r7, #28
 8004dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d123      	bne.n	8004e22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d105      	bne.n	8004e16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f98d 	bl	8005136 <USB_CoreReset>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]
 8004e20:	e01b      	b.n	8004e5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f981 	bl	8005136 <USB_CoreReset>
 8004e34:	4603      	mov	r3, r0
 8004e36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e4c:	e005      	b.n	8004e5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e5a:	7fbb      	ldrb	r3, [r7, #30]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10b      	bne.n	8004e78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f043 0206 	orr.w	r2, r3, #6
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e84:	b004      	add	sp, #16
 8004e86:	4770      	bx	lr

08004e88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 0201 	bic.w	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d115      	bne.n	8004ef8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ed8:	200a      	movs	r0, #10
 8004eda:	f7fc f977 	bl	80011cc <HAL_Delay>
      ms += 10U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	330a      	adds	r3, #10
 8004ee2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f918 	bl	800511a <USB_GetMode>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d01e      	beq.n	8004f2e <USB_SetCurrentMode+0x84>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ef4:	d9f0      	bls.n	8004ed8 <USB_SetCurrentMode+0x2e>
 8004ef6:	e01a      	b.n	8004f2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d115      	bne.n	8004f2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f0a:	200a      	movs	r0, #10
 8004f0c:	f7fc f95e 	bl	80011cc <HAL_Delay>
      ms += 10U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	330a      	adds	r3, #10
 8004f14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8ff 	bl	800511a <USB_GetMode>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <USB_SetCurrentMode+0x84>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f26:	d9f0      	bls.n	8004f0a <USB_SetCurrentMode+0x60>
 8004f28:	e001      	b.n	8004f2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e005      	b.n	8004f3a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f32:	d101      	bne.n	8004f38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f5c:	d901      	bls.n	8004f62 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e01b      	b.n	8004f9a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	daf2      	bge.n	8004f50 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	019b      	lsls	r3, r3, #6
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f86:	d901      	bls.n	8004f8c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e006      	b.n	8004f9a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d0f0      	beq.n	8004f7a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fbe:	d901      	bls.n	8004fc4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e018      	b.n	8004ff6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	daf2      	bge.n	8004fb2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2210      	movs	r2, #16
 8004fd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fe2:	d901      	bls.n	8004fe8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e006      	b.n	8004ff6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d0f0      	beq.n	8004fd6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005002:	b480      	push	{r7}
 8005004:	b08b      	sub	sp, #44	@ 0x2c
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	4613      	mov	r3, r2
 800500e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	b29b      	uxth	r3, r3
 800501e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005028:	2300      	movs	r3, #0
 800502a:	623b      	str	r3, [r7, #32]
 800502c:	e014      	b.n	8005058 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	601a      	str	r2, [r3, #0]
    pDest++;
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	3301      	adds	r3, #1
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	3301      	adds	r3, #1
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	3301      	adds	r3, #1
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	3301      	adds	r3, #1
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	3301      	adds	r3, #1
 8005056:	623b      	str	r3, [r7, #32]
 8005058:	6a3a      	ldr	r2, [r7, #32]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	d3e6      	bcc.n	800502e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005060:	8bfb      	ldrh	r3, [r7, #30]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01e      	beq.n	80050a4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005070:	461a      	mov	r2, r3
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	fa22 f303 	lsr.w	r3, r2, r3
 8005086:	b2da      	uxtb	r2, r3
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	701a      	strb	r2, [r3, #0]
      i++;
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	3301      	adds	r3, #1
 8005090:	623b      	str	r3, [r7, #32]
      pDest++;
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	3301      	adds	r3, #1
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005098:	8bfb      	ldrh	r3, [r7, #30]
 800509a:	3b01      	subs	r3, #1
 800509c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800509e:	8bfb      	ldrh	r3, [r7, #30]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ea      	bne.n	800507a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	372c      	adds	r7, #44	@ 0x2c
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4013      	ands	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050ca:	68fb      	ldr	r3, [r7, #12]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	4013      	ands	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800510c:	68bb      	ldr	r3, [r7, #8]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0301 	and.w	r3, r3, #1
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800514e:	d901      	bls.n	8005154 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e01b      	b.n	800518c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	daf2      	bge.n	8005142 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f043 0201 	orr.w	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005178:	d901      	bls.n	800517e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e006      	b.n	800518c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b01      	cmp	r3, #1
 8005188:	d0f0      	beq.n	800516c <USB_CoreReset+0x36>

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005198:	b084      	sub	sp, #16
 800519a:	b580      	push	{r7, lr}
 800519c:	b086      	sub	sp, #24
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80051a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051b8:	461a      	mov	r2, r3
 80051ba:	2300      	movs	r3, #0
 80051bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d119      	bne.n	8005222 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80051ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10a      	bne.n	800520c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005204:	f043 0304 	orr.w	r3, r3, #4
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e014      	b.n	8005236 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800521a:	f023 0304 	bic.w	r3, r3, #4
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	e009      	b.n	8005236 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005230:	f023 0304 	bic.w	r3, r3, #4
 8005234:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005236:	2110      	movs	r1, #16
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fe82 	bl	8004f42 <USB_FlushTxFifo>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff feac 	bl	8004fa6 <USB_FlushRxFifo>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e015      	b.n	800528a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005270:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527e:	461a      	mov	r2, r3
 8005280:	2300      	movs	r3, #0
 8005282:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	3301      	adds	r3, #1
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800528e:	461a      	mov	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4293      	cmp	r3, r2
 8005294:	d3e3      	bcc.n	800525e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052a2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a18      	ldr	r2, [pc, #96]	@ (8005308 <USB_HostInit+0x170>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10b      	bne.n	80052c4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052b2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a15      	ldr	r2, [pc, #84]	@ (800530c <USB_HostInit+0x174>)
 80052b8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <USB_HostInit+0x178>)
 80052be:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80052c2:	e009      	b.n	80052d8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2280      	movs	r2, #128	@ 0x80
 80052c8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a11      	ldr	r2, [pc, #68]	@ (8005314 <USB_HostInit+0x17c>)
 80052ce:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a11      	ldr	r2, [pc, #68]	@ (8005318 <USB_HostInit+0x180>)
 80052d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f043 0210 	orr.w	r2, r3, #16
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <USB_HostInit+0x184>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr
 8005308:	40040000 	.word	0x40040000
 800530c:	01000200 	.word	0x01000200
 8005310:	00e00300 	.word	0x00e00300
 8005314:	00600080 	.word	0x00600080
 8005318:	004000e0 	.word	0x004000e0
 800531c:	a3200008 	.word	0xa3200008

08005320 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005368:	461a      	mov	r2, r3
 800536a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800536e:	6053      	str	r3, [r2, #4]
 8005370:	e00c      	b.n	800538c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d107      	bne.n	8005388 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800537e:	461a      	mov	r2, r3
 8005380:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005384:	6053      	str	r3, [r2, #4]
 8005386:	e001      	b.n	800538c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	b29b      	uxth	r3, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80053bc:	b480      	push	{r7}
 80053be:	b089      	sub	sp, #36	@ 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	0c9b      	lsrs	r3, r3, #18
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	0fdb      	lsrs	r3, r3, #31
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	0fdb      	lsrs	r3, r3, #31
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b20      	cmp	r3, #32
 8005420:	d10d      	bne.n	800543e <USB_HC_Halt+0x82>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <USB_HC_Halt+0x82>
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d002      	beq.n	800543a <USB_HC_Halt+0x7e>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d101      	bne.n	800543e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e0d8      	b.n	80055f0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <USB_HC_Halt+0x8e>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d173      	bne.n	8005532 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	440a      	add	r2, r1
 8005460:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005464:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005468:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d14a      	bne.n	800550c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d133      	bne.n	80054ea <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	440a      	add	r2, r1
 8005498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800549c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	3301      	adds	r3, #1
 80054c6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054ce:	d82e      	bhi.n	800552e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e6:	d0ec      	beq.n	80054c2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054e8:	e081      	b.n	80055ee <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005504:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005508:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800550a:	e070      	b.n	80055ee <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	440a      	add	r2, r1
 8005522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005526:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800552a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800552c:	e05f      	b.n	80055ee <USB_HC_Halt+0x232>
            break;
 800552e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005530:	e05d      	b.n	80055ee <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	440a      	add	r2, r1
 8005548:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800554c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005550:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d133      	bne.n	80055ca <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800557c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005580:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800559c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055a0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055ae:	d81d      	bhi.n	80055ec <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055c6:	d0ec      	beq.n	80055a2 <USB_HC_Halt+0x1e6>
 80055c8:	e011      	b.n	80055ee <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e000      	b.n	80055ee <USB_HC_Halt+0x232>
          break;
 80055ec:	bf00      	nop
    }
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3724      	adds	r7, #36	@ 0x24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <__NVIC_SetPriority>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560c:	2b00      	cmp	r3, #0
 800560e:	db0a      	blt.n	8005626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	490c      	ldr	r1, [pc, #48]	@ (8005648 <__NVIC_SetPriority+0x4c>)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	440b      	add	r3, r1
 8005620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005624:	e00a      	b.n	800563c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4908      	ldr	r1, [pc, #32]	@ (800564c <__NVIC_SetPriority+0x50>)
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	3b04      	subs	r3, #4
 8005634:	0112      	lsls	r2, r2, #4
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	440b      	add	r3, r1
 800563a:	761a      	strb	r2, [r3, #24]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000e100 	.word	0xe000e100
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <SysTick_Handler+0x1c>)
 8005656:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005658:	f001 fd42 	bl	80070e0 <xTaskGetSchedulerState>
 800565c:	4603      	mov	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d001      	beq.n	8005666 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005662:	f002 fb39 	bl	8007cd8 <xPortSysTickHandler>
  }
}
 8005666:	bf00      	nop
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	e000e010 	.word	0xe000e010

08005670 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005674:	2100      	movs	r1, #0
 8005676:	f06f 0004 	mvn.w	r0, #4
 800567a:	f7ff ffbf 	bl	80055fc <__NVIC_SetPriority>
#endif
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800568a:	f3ef 8305 	mrs	r3, IPSR
 800568e:	603b      	str	r3, [r7, #0]
  return(result);
 8005690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005696:	f06f 0305 	mvn.w	r3, #5
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	e00c      	b.n	80056b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800569e:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <osKernelInitialize+0x44>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d105      	bne.n	80056b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056a6:	4b08      	ldr	r3, [pc, #32]	@ (80056c8 <osKernelInitialize+0x44>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	607b      	str	r3, [r7, #4]
 80056b0:	e002      	b.n	80056b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056b8:	687b      	ldr	r3, [r7, #4]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000528 	.word	0x20000528

080056cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d2:	f3ef 8305 	mrs	r3, IPSR
 80056d6:	603b      	str	r3, [r7, #0]
  return(result);
 80056d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80056de:	f06f 0305 	mvn.w	r3, #5
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	e010      	b.n	8005708 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <osKernelStart+0x48>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d109      	bne.n	8005702 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056ee:	f7ff ffbf 	bl	8005670 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056f2:	4b08      	ldr	r3, [pc, #32]	@ (8005714 <osKernelStart+0x48>)
 80056f4:	2202      	movs	r2, #2
 80056f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056f8:	f001 f87c 	bl	80067f4 <vTaskStartScheduler>
      stat = osOK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	e002      	b.n	8005708 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005708:	687b      	ldr	r3, [r7, #4]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000528 	.word	0x20000528

08005718 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b08e      	sub	sp, #56	@ 0x38
 800571c:	af04      	add	r7, sp, #16
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005728:	f3ef 8305 	mrs	r3, IPSR
 800572c:	617b      	str	r3, [r7, #20]
  return(result);
 800572e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005730:	2b00      	cmp	r3, #0
 8005732:	d17e      	bne.n	8005832 <osThreadNew+0x11a>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d07b      	beq.n	8005832 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800573a:	2380      	movs	r3, #128	@ 0x80
 800573c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800573e:	2318      	movs	r3, #24
 8005740:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800574a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d045      	beq.n	80057de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <osThreadNew+0x48>
        name = attr->name;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <osThreadNew+0x6e>
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	2b38      	cmp	r3, #56	@ 0x38
 8005778:	d805      	bhi.n	8005786 <osThreadNew+0x6e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <osThreadNew+0x72>
        return (NULL);
 8005786:	2300      	movs	r3, #0
 8005788:	e054      	b.n	8005834 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <osThreadNew+0xa8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	2b5f      	cmp	r3, #95	@ 0x5f
 80057a8:	d90a      	bls.n	80057c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d006      	beq.n	80057c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <osThreadNew+0xa8>
        mem = 1;
 80057ba:	2301      	movs	r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e010      	b.n	80057e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <osThreadNew+0xca>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d108      	bne.n	80057e2 <osThreadNew+0xca>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <osThreadNew+0xca>
          mem = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	e001      	b.n	80057e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d110      	bne.n	800580a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057f0:	9202      	str	r2, [sp, #8]
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6a3a      	ldr	r2, [r7, #32]
 80057fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fe1a 	bl	8006438 <xTaskCreateStatic>
 8005804:	4603      	mov	r3, r0
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	e013      	b.n	8005832 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	b29a      	uxth	r2, r3
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fe68 	bl	80064f8 <xTaskCreate>
 8005828:	4603      	mov	r3, r0
 800582a:	2b01      	cmp	r3, #1
 800582c:	d001      	beq.n	8005832 <osThreadNew+0x11a>
            hTask = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005832:	693b      	ldr	r3, [r7, #16]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3728      	adds	r7, #40	@ 0x28
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005844:	f3ef 8305 	mrs	r3, IPSR
 8005848:	60bb      	str	r3, [r7, #8]
  return(result);
 800584a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <osDelay+0x1c>
    stat = osErrorISR;
 8005850:	f06f 0305 	mvn.w	r3, #5
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e007      	b.n	8005868 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 ff90 	bl	8006788 <vTaskDelay>
    }
  }

  return (stat);
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a07      	ldr	r2, [pc, #28]	@ (80058a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4a06      	ldr	r2, [pc, #24]	@ (80058a4 <vApplicationGetIdleTaskMemory+0x30>)
 800588a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2280      	movs	r2, #128	@ 0x80
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2000052c 	.word	0x2000052c
 80058a4:	2000058c 	.word	0x2000058c

080058a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4a07      	ldr	r2, [pc, #28]	@ (80058d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80058b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4a06      	ldr	r2, [pc, #24]	@ (80058d8 <vApplicationGetTimerTaskMemory+0x30>)
 80058be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058c6:	601a      	str	r2, [r3, #0]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	2000078c 	.word	0x2000078c
 80058d8:	200007ec 	.word	0x200007ec

080058dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f103 0208 	add.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f103 0208 	add.w	r2, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f103 0208 	add.w	r2, r3, #8
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005994:	d103      	bne.n	800599e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e00c      	b.n	80059b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3308      	adds	r3, #8
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e002      	b.n	80059ac <vListInsert+0x2e>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d2f6      	bcs.n	80059a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6892      	ldr	r2, [r2, #8]
 8005a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6852      	ldr	r2, [r2, #4]
 8005a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d103      	bne.n	8005a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	1e5a      	subs	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	e7fd      	b.n	8005a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a70:	f002 f8a2 	bl	8007bb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005aa6:	fb01 f303 	mul.w	r3, r1, r3
 8005aaa:	441a      	add	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	22ff      	movs	r2, #255	@ 0xff
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	22ff      	movs	r2, #255	@ 0xff
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d114      	bne.n	8005af0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01a      	beq.n	8005b04 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3310      	adds	r3, #16
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 f942 	bl	8006d5c <xTaskRemoveFromEventList>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d012      	beq.n	8005b04 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ade:	4b0d      	ldr	r3, [pc, #52]	@ (8005b14 <xQueueGenericReset+0xd0>)
 8005ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	e009      	b.n	8005b04 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3310      	adds	r3, #16
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fef1 	bl	80058dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3324      	adds	r3, #36	@ 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff feec 	bl	80058dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b04:	f002 f88a 	bl	8007c1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b08:	2301      	movs	r3, #1
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08e      	sub	sp, #56	@ 0x38
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	e7fd      	b.n	8005b5e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <xQueueGenericCreateStatic+0x56>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <xQueueGenericCreateStatic+0x5a>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <xQueueGenericCreateStatic+0x5c>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	623b      	str	r3, [r7, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <xQueueGenericCreateStatic+0x84>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <xQueueGenericCreateStatic+0x88>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <xQueueGenericCreateStatic+0x8a>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	61fb      	str	r3, [r7, #28]
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	e7fd      	b.n	8005bba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bbe:	2350      	movs	r3, #80	@ 0x50
 8005bc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b50      	cmp	r3, #80	@ 0x50
 8005bc6:	d00b      	beq.n	8005be0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	61bb      	str	r3, [r7, #24]
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	e7fd      	b.n	8005bdc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005be0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bf4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f805 	bl	8005c12 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3730      	adds	r7, #48	@ 0x30
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
 8005c1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e002      	b.n	8005c34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c40:	2101      	movs	r1, #1
 8005c42:	69b8      	ldr	r0, [r7, #24]
 8005c44:	f7ff fefe 	bl	8005a44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08e      	sub	sp, #56	@ 0x38
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c66:	2300      	movs	r3, #0
 8005c68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10b      	bne.n	8005c8c <xQueueGenericSend+0x34>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <xQueueGenericSend+0x42>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <xQueueGenericSend+0x46>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <xQueueGenericSend+0x48>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <xQueueGenericSend+0x64>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d103      	bne.n	8005cca <xQueueGenericSend+0x72>
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <xQueueGenericSend+0x76>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueGenericSend+0x78>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <xQueueGenericSend+0x94>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	623b      	str	r3, [r7, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cec:	f001 f9f8 	bl	80070e0 <xTaskGetSchedulerState>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <xQueueGenericSend+0xa4>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <xQueueGenericSend+0xa8>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <xQueueGenericSend+0xaa>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <xQueueGenericSend+0xc6>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	61fb      	str	r3, [r7, #28]
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	e7fd      	b.n	8005d1a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d1e:	f001 ff4b 	bl	8007bb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <xQueueGenericSend+0xdc>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d129      	bne.n	8005d88 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d3a:	f000 fa0f 	bl	800615c <prvCopyDataToQueue>
 8005d3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	3324      	adds	r3, #36	@ 0x24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 f805 	bl	8006d5c <xTaskRemoveFromEventList>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d013      	beq.n	8005d80 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d58:	4b3f      	ldr	r3, [pc, #252]	@ (8005e58 <xQueueGenericSend+0x200>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	e00a      	b.n	8005d80 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d70:	4b39      	ldr	r3, [pc, #228]	@ (8005e58 <xQueueGenericSend+0x200>)
 8005d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d80:	f001 ff4c 	bl	8007c1c <vPortExitCritical>
				return pdPASS;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e063      	b.n	8005e50 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d8e:	f001 ff45 	bl	8007c1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e05c      	b.n	8005e50 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d106      	bne.n	8005daa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d9c:	f107 0314 	add.w	r3, r7, #20
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 f83f 	bl	8006e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005daa:	f001 ff37 	bl	8007c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dae:	f000 fd89 	bl	80068c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005db2:	f001 ff01 	bl	8007bb8 <vPortEnterCritical>
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dbc:	b25b      	sxtb	r3, r3
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dc2:	d103      	bne.n	8005dcc <xQueueGenericSend+0x174>
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dd2:	b25b      	sxtb	r3, r3
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dd8:	d103      	bne.n	8005de2 <xQueueGenericSend+0x18a>
 8005dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005de2:	f001 ff1b 	bl	8007c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005de6:	1d3a      	adds	r2, r7, #4
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 f82e 	bl	8006e50 <xTaskCheckForTimeOut>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d124      	bne.n	8005e44 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dfc:	f000 faa6 	bl	800634c <prvIsQueueFull>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d018      	beq.n	8005e38 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	3310      	adds	r3, #16
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 ff52 	bl	8006cb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e16:	f000 fa31 	bl	800627c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e1a:	f000 fd61 	bl	80068e0 <xTaskResumeAll>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f47f af7c 	bne.w	8005d1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e26:	4b0c      	ldr	r3, [pc, #48]	@ (8005e58 <xQueueGenericSend+0x200>)
 8005e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	e772      	b.n	8005d1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e3a:	f000 fa1f 	bl	800627c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e3e:	f000 fd4f 	bl	80068e0 <xTaskResumeAll>
 8005e42:	e76c      	b.n	8005d1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e46:	f000 fa19 	bl	800627c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e4a:	f000 fd49 	bl	80068e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3738      	adds	r7, #56	@ 0x38
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b090      	sub	sp, #64	@ 0x40
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10b      	bne.n	8005e8c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	e7fd      	b.n	8005e88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d103      	bne.n	8005e9a <xQueueGenericSendFromISR+0x3e>
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <xQueueGenericSendFromISR+0x42>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <xQueueGenericSendFromISR+0x44>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	e7fd      	b.n	8005eb8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d103      	bne.n	8005eca <xQueueGenericSendFromISR+0x6e>
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <xQueueGenericSendFromISR+0x72>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <xQueueGenericSendFromISR+0x74>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	623b      	str	r3, [r7, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eec:	f001 ff44 	bl	8007d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ef0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	61fa      	str	r2, [r7, #28]
 8005f06:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f08:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d302      	bcc.n	8005f1e <xQueueGenericSendFromISR+0xc2>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d12f      	bne.n	8005f7e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f34:	f000 f912 	bl	800615c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f38:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f40:	d112      	bne.n	8005f68 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4c:	3324      	adds	r3, #36	@ 0x24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 ff04 	bl	8006d5c <xTaskRemoveFromEventList>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e007      	b.n	8005f78 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	b25a      	sxtb	r2, r3
 8005f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f7c:	e001      	b.n	8005f82 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f84:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3740      	adds	r7, #64	@ 0x40
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08c      	sub	sp, #48	@ 0x30
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <xQueueReceive+0x32>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	623b      	str	r3, [r7, #32]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d103      	bne.n	8005fd8 <xQueueReceive+0x40>
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <xQueueReceive+0x44>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <xQueueReceive+0x46>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10b      	bne.n	8005ffa <xQueueReceive+0x62>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	61fb      	str	r3, [r7, #28]
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	e7fd      	b.n	8005ff6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ffa:	f001 f871 	bl	80070e0 <xTaskGetSchedulerState>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <xQueueReceive+0x72>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <xQueueReceive+0x76>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueReceive+0x78>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <xQueueReceive+0x94>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	61bb      	str	r3, [r7, #24]
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	e7fd      	b.n	8006028 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800602c:	f001 fdc4 	bl	8007bb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01f      	beq.n	800607c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006040:	f000 f8f6 	bl	8006230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	1e5a      	subs	r2, r3, #1
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00f      	beq.n	8006074 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	3310      	adds	r3, #16
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fe7f 	bl	8006d5c <xTaskRemoveFromEventList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d007      	beq.n	8006074 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006064:	4b3c      	ldr	r3, [pc, #240]	@ (8006158 <xQueueReceive+0x1c0>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006074:	f001 fdd2 	bl	8007c1c <vPortExitCritical>
				return pdPASS;
 8006078:	2301      	movs	r3, #1
 800607a:	e069      	b.n	8006150 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006082:	f001 fdcb 	bl	8007c1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006086:	2300      	movs	r3, #0
 8006088:	e062      	b.n	8006150 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fec5 	bl	8006e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800609a:	2301      	movs	r3, #1
 800609c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800609e:	f001 fdbd 	bl	8007c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060a2:	f000 fc0f 	bl	80068c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060a6:	f001 fd87 	bl	8007bb8 <vPortEnterCritical>
 80060aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060b0:	b25b      	sxtb	r3, r3
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060b6:	d103      	bne.n	80060c0 <xQueueReceive+0x128>
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060c6:	b25b      	sxtb	r3, r3
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060cc:	d103      	bne.n	80060d6 <xQueueReceive+0x13e>
 80060ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060d6:	f001 fda1 	bl	8007c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060da:	1d3a      	adds	r2, r7, #4
 80060dc:	f107 0310 	add.w	r3, r7, #16
 80060e0:	4611      	mov	r1, r2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 feb4 	bl	8006e50 <xTaskCheckForTimeOut>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d123      	bne.n	8006136 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f0:	f000 f916 	bl	8006320 <prvIsQueueEmpty>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d017      	beq.n	800612a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	3324      	adds	r3, #36	@ 0x24
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fdd8 	bl	8006cb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800610a:	f000 f8b7 	bl	800627c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800610e:	f000 fbe7 	bl	80068e0 <xTaskResumeAll>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d189      	bne.n	800602c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006118:	4b0f      	ldr	r3, [pc, #60]	@ (8006158 <xQueueReceive+0x1c0>)
 800611a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	e780      	b.n	800602c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800612a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800612c:	f000 f8a6 	bl	800627c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006130:	f000 fbd6 	bl	80068e0 <xTaskResumeAll>
 8006134:	e77a      	b.n	800602c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006138:	f000 f8a0 	bl	800627c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800613c:	f000 fbd0 	bl	80068e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006142:	f000 f8ed 	bl	8006320 <prvIsQueueEmpty>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	f43f af6f 	beq.w	800602c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800614e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006150:	4618      	mov	r0, r3
 8006152:	3730      	adds	r7, #48	@ 0x30
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10d      	bne.n	8006196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d14d      	bne.n	800621e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 ffc8 	bl	800711c <xTaskPriorityDisinherit>
 800618c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	609a      	str	r2, [r3, #8]
 8006194:	e043      	b.n	800621e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d119      	bne.n	80061d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6858      	ldr	r0, [r3, #4]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a4:	461a      	mov	r2, r3
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	f002 f848 	bl	800823c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d32b      	bcc.n	800621e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	e026      	b.n	800621e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68d8      	ldr	r0, [r3, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d8:	461a      	mov	r2, r3
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	f002 f82e 	bl	800823c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e8:	425b      	negs	r3, r3
 80061ea:	441a      	add	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d207      	bcs.n	800620c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006204:	425b      	negs	r3, r3
 8006206:	441a      	add	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d105      	bne.n	800621e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	3b01      	subs	r3, #1
 800621c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006226:	697b      	ldr	r3, [r7, #20]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d018      	beq.n	8006274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	441a      	add	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	d303      	bcc.n	8006264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68d9      	ldr	r1, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	461a      	mov	r2, r3
 800626e:	6838      	ldr	r0, [r7, #0]
 8006270:	f001 ffe4 	bl	800823c <memcpy>
	}
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006284:	f001 fc98 	bl	8007bb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800628e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006290:	e011      	b.n	80062b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d012      	beq.n	80062c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3324      	adds	r3, #36	@ 0x24
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fd5c 	bl	8006d5c <xTaskRemoveFromEventList>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062aa:	f000 fe35 	bl	8006f18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dce9      	bgt.n	8006292 <prvUnlockQueue+0x16>
 80062be:	e000      	b.n	80062c2 <prvUnlockQueue+0x46>
					break;
 80062c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	22ff      	movs	r2, #255	@ 0xff
 80062c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80062ca:	f001 fca7 	bl	8007c1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062ce:	f001 fc73 	bl	8007bb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062da:	e011      	b.n	8006300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d012      	beq.n	800630a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3310      	adds	r3, #16
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fd37 	bl	8006d5c <xTaskRemoveFromEventList>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062f4:	f000 fe10 	bl	8006f18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dce9      	bgt.n	80062dc <prvUnlockQueue+0x60>
 8006308:	e000      	b.n	800630c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800630a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	22ff      	movs	r2, #255	@ 0xff
 8006310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006314:	f001 fc82 	bl	8007c1c <vPortExitCritical>
}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006328:	f001 fc46 	bl	8007bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e001      	b.n	800633e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800633e:	f001 fc6d 	bl	8007c1c <vPortExitCritical>

	return xReturn;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006354:	f001 fc30 	bl	8007bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006360:	429a      	cmp	r2, r3
 8006362:	d102      	bne.n	800636a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006364:	2301      	movs	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	e001      	b.n	800636e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800636e:	f001 fc55 	bl	8007c1c <vPortExitCritical>

	return xReturn;
 8006372:	68fb      	ldr	r3, [r7, #12]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e014      	b.n	80063b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800638c:	4a0f      	ldr	r2, [pc, #60]	@ (80063cc <vQueueAddToRegistry+0x50>)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006398:	490c      	ldr	r1, [pc, #48]	@ (80063cc <vQueueAddToRegistry+0x50>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063a2:	4a0a      	ldr	r2, [pc, #40]	@ (80063cc <vQueueAddToRegistry+0x50>)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063ae:	e006      	b.n	80063be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b07      	cmp	r3, #7
 80063ba:	d9e7      	bls.n	800638c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20000bec 	.word	0x20000bec

080063d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063e0:	f001 fbea 	bl	8007bb8 <vPortEnterCritical>
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063f0:	d103      	bne.n	80063fa <vQueueWaitForMessageRestricted+0x2a>
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006400:	b25b      	sxtb	r3, r3
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006406:	d103      	bne.n	8006410 <vQueueWaitForMessageRestricted+0x40>
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006410:	f001 fc04 	bl	8007c1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	3324      	adds	r3, #36	@ 0x24
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fc6d 	bl	8006d04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800642a:	6978      	ldr	r0, [r7, #20]
 800642c:	f7ff ff26 	bl	800627c <prvUnlockQueue>
	}
 8006430:	bf00      	nop
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08e      	sub	sp, #56	@ 0x38
 800643c:	af04      	add	r7, sp, #16
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10b      	bne.n	8006464 <xTaskCreateStatic+0x2c>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	623b      	str	r3, [r7, #32]
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	e7fd      	b.n	8006460 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <xTaskCreateStatic+0x4a>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	61fb      	str	r3, [r7, #28]
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	e7fd      	b.n	800647e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006482:	2360      	movs	r3, #96	@ 0x60
 8006484:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b60      	cmp	r3, #96	@ 0x60
 800648a:	d00b      	beq.n	80064a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	61bb      	str	r3, [r7, #24]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01e      	beq.n	80064ea <xTaskCreateStatic+0xb2>
 80064ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01b      	beq.n	80064ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064c4:	2300      	movs	r3, #0
 80064c6:	9303      	str	r3, [sp, #12]
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	f107 0314 	add.w	r3, r7, #20
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f850 	bl	8006582 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064e4:	f000 f8e0 	bl	80066a8 <prvAddNewTaskToReadyList>
 80064e8:	e001      	b.n	80064ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064ee:	697b      	ldr	r3, [r7, #20]
	}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3728      	adds	r7, #40	@ 0x28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08c      	sub	sp, #48	@ 0x30
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4618      	mov	r0, r3
 800650e:	f001 fc75 	bl	8007dfc <pvPortMalloc>
 8006512:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00e      	beq.n	8006538 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800651a:	2060      	movs	r0, #96	@ 0x60
 800651c:	f001 fc6e 	bl	8007dfc <pvPortMalloc>
 8006520:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	631a      	str	r2, [r3, #48]	@ 0x30
 800652e:	e005      	b.n	800653c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006530:	6978      	ldr	r0, [r7, #20]
 8006532:	f001 fd37 	bl	8007fa4 <vPortFree>
 8006536:	e001      	b.n	800653c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d017      	beq.n	8006572 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	2300      	movs	r3, #0
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	9302      	str	r3, [sp, #8]
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f80e 	bl	8006582 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006566:	69f8      	ldr	r0, [r7, #28]
 8006568:	f000 f89e 	bl	80066a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800656c:	2301      	movs	r3, #1
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e002      	b.n	8006578 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006576:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006578:	69bb      	ldr	r3, [r7, #24]
	}
 800657a:	4618      	mov	r0, r3
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b088      	sub	sp, #32
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	461a      	mov	r2, r3
 800659a:	21a5      	movs	r1, #165	@ 0xa5
 800659c:	f001 fe22 	bl	80081e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065aa:	3b01      	subs	r3, #1
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	f023 0307 	bic.w	r3, r3, #7
 80065b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	617b      	str	r3, [r7, #20]
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01f      	beq.n	8006622 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	e012      	b.n	800660e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	7819      	ldrb	r1, [r3, #0]
 80065f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	3334      	adds	r3, #52	@ 0x34
 80065f8:	460a      	mov	r2, r1
 80065fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d006      	beq.n	8006616 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	3301      	adds	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b0f      	cmp	r3, #15
 8006612:	d9e9      	bls.n	80065e8 <prvInitialiseNewTask+0x66>
 8006614:	e000      	b.n	8006618 <prvInitialiseNewTask+0x96>
			{
				break;
 8006616:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006620:	e003      	b.n	800662a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	2b37      	cmp	r3, #55	@ 0x37
 800662e:	d901      	bls.n	8006634 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006630:	2337      	movs	r3, #55	@ 0x37
 8006632:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006638:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800663e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	2200      	movs	r2, #0
 8006644:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	3304      	adds	r3, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff f966 	bl	800591c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	3318      	adds	r3, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff f961 	bl	800591c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800665e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006662:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800666e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8006670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006672:	2200      	movs	r2, #0
 8006674:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	2200      	movs	r2, #0
 800667a:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	2200      	movs	r2, #0
 8006680:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f001 f965 	bl	8007958 <pxPortInitialiseStack>
 800668e:	4602      	mov	r2, r0
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800669a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800669e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066b0:	f001 fa82 	bl	8007bb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066b4:	4b2d      	ldr	r3, [pc, #180]	@ (800676c <prvAddNewTaskToReadyList+0xc4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a2c      	ldr	r2, [pc, #176]	@ (800676c <prvAddNewTaskToReadyList+0xc4>)
 80066bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066be:	4b2c      	ldr	r3, [pc, #176]	@ (8006770 <prvAddNewTaskToReadyList+0xc8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006770 <prvAddNewTaskToReadyList+0xc8>)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066cc:	4b27      	ldr	r3, [pc, #156]	@ (800676c <prvAddNewTaskToReadyList+0xc4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d110      	bne.n	80066f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066d4:	f000 fc46 	bl	8006f64 <prvInitialiseTaskLists>
 80066d8:	e00d      	b.n	80066f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066da:	4b26      	ldr	r3, [pc, #152]	@ (8006774 <prvAddNewTaskToReadyList+0xcc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066e2:	4b23      	ldr	r3, [pc, #140]	@ (8006770 <prvAddNewTaskToReadyList+0xc8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d802      	bhi.n	80066f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006770 <prvAddNewTaskToReadyList+0xc8>)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066f6:	4b20      	ldr	r3, [pc, #128]	@ (8006778 <prvAddNewTaskToReadyList+0xd0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006778 <prvAddNewTaskToReadyList+0xd0>)
 80066fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006700:	4b1d      	ldr	r3, [pc, #116]	@ (8006778 <prvAddNewTaskToReadyList+0xd0>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670c:	4b1b      	ldr	r3, [pc, #108]	@ (800677c <prvAddNewTaskToReadyList+0xd4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d903      	bls.n	800671c <prvAddNewTaskToReadyList+0x74>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006718:	4a18      	ldr	r2, [pc, #96]	@ (800677c <prvAddNewTaskToReadyList+0xd4>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4a15      	ldr	r2, [pc, #84]	@ (8006780 <prvAddNewTaskToReadyList+0xd8>)
 800672a:	441a      	add	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7ff f8ff 	bl	8005936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006738:	f001 fa70 	bl	8007c1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800673c:	4b0d      	ldr	r3, [pc, #52]	@ (8006774 <prvAddNewTaskToReadyList+0xcc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00e      	beq.n	8006762 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006744:	4b0a      	ldr	r3, [pc, #40]	@ (8006770 <prvAddNewTaskToReadyList+0xc8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	429a      	cmp	r2, r3
 8006750:	d207      	bcs.n	8006762 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006752:	4b0c      	ldr	r3, [pc, #48]	@ (8006784 <prvAddNewTaskToReadyList+0xdc>)
 8006754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20001100 	.word	0x20001100
 8006770:	20000c2c 	.word	0x20000c2c
 8006774:	2000110c 	.word	0x2000110c
 8006778:	2000111c 	.word	0x2000111c
 800677c:	20001108 	.word	0x20001108
 8006780:	20000c30 	.word	0x20000c30
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d018      	beq.n	80067cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800679a:	4b14      	ldr	r3, [pc, #80]	@ (80067ec <vTaskDelay+0x64>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <vTaskDelay+0x32>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60bb      	str	r3, [r7, #8]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067ba:	f000 f883 	bl	80068c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067be:	2100      	movs	r1, #0
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fd1b 	bl	80071fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067c6:	f000 f88b 	bl	80068e0 <xTaskResumeAll>
 80067ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d107      	bne.n	80067e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80067d2:	4b07      	ldr	r3, [pc, #28]	@ (80067f0 <vTaskDelay+0x68>)
 80067d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20001128 	.word	0x20001128
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	@ 0x28
 80067f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006802:	463a      	mov	r2, r7
 8006804:	1d39      	adds	r1, r7, #4
 8006806:	f107 0308 	add.w	r3, r7, #8
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff f832 	bl	8005874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	9202      	str	r2, [sp, #8]
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	2300      	movs	r3, #0
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	2300      	movs	r3, #0
 8006820:	460a      	mov	r2, r1
 8006822:	4922      	ldr	r1, [pc, #136]	@ (80068ac <vTaskStartScheduler+0xb8>)
 8006824:	4822      	ldr	r0, [pc, #136]	@ (80068b0 <vTaskStartScheduler+0xbc>)
 8006826:	f7ff fe07 	bl	8006438 <xTaskCreateStatic>
 800682a:	4603      	mov	r3, r0
 800682c:	4a21      	ldr	r2, [pc, #132]	@ (80068b4 <vTaskStartScheduler+0xc0>)
 800682e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006830:	4b20      	ldr	r3, [pc, #128]	@ (80068b4 <vTaskStartScheduler+0xc0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006838:	2301      	movs	r3, #1
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e001      	b.n	8006842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d102      	bne.n	800684e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006848:	f000 fd2c 	bl	80072a4 <xTimerCreateTimerTask>
 800684c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d116      	bne.n	8006882 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	613b      	str	r3, [r7, #16]
}
 8006866:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006868:	4b13      	ldr	r3, [pc, #76]	@ (80068b8 <vTaskStartScheduler+0xc4>)
 800686a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800686e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006870:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <vTaskStartScheduler+0xc8>)
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006876:	4b12      	ldr	r3, [pc, #72]	@ (80068c0 <vTaskStartScheduler+0xcc>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800687c:	f001 f8f8 	bl	8007a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006880:	e00f      	b.n	80068a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006888:	d10b      	bne.n	80068a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	60fb      	str	r3, [r7, #12]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <vTaskStartScheduler+0xaa>
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	08008280 	.word	0x08008280
 80068b0:	08006f31 	.word	0x08006f31
 80068b4:	20001124 	.word	0x20001124
 80068b8:	20001120 	.word	0x20001120
 80068bc:	2000110c 	.word	0x2000110c
 80068c0:	20001104 	.word	0x20001104

080068c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068c8:	4b04      	ldr	r3, [pc, #16]	@ (80068dc <vTaskSuspendAll+0x18>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	4a03      	ldr	r2, [pc, #12]	@ (80068dc <vTaskSuspendAll+0x18>)
 80068d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	20001128 	.word	0x20001128

080068e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068ee:	4b42      	ldr	r3, [pc, #264]	@ (80069f8 <xTaskResumeAll+0x118>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <xTaskResumeAll+0x2e>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	603b      	str	r3, [r7, #0]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800690e:	f001 f953 	bl	8007bb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006912:	4b39      	ldr	r3, [pc, #228]	@ (80069f8 <xTaskResumeAll+0x118>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3b01      	subs	r3, #1
 8006918:	4a37      	ldr	r2, [pc, #220]	@ (80069f8 <xTaskResumeAll+0x118>)
 800691a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800691c:	4b36      	ldr	r3, [pc, #216]	@ (80069f8 <xTaskResumeAll+0x118>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d162      	bne.n	80069ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006924:	4b35      	ldr	r3, [pc, #212]	@ (80069fc <xTaskResumeAll+0x11c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05e      	beq.n	80069ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800692c:	e02f      	b.n	800698e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800692e:	4b34      	ldr	r3, [pc, #208]	@ (8006a00 <xTaskResumeAll+0x120>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3318      	adds	r3, #24
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff f858 	bl	80059f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3304      	adds	r3, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff f853 	bl	80059f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800694e:	4b2d      	ldr	r3, [pc, #180]	@ (8006a04 <xTaskResumeAll+0x124>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d903      	bls.n	800695e <xTaskResumeAll+0x7e>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	4a2a      	ldr	r2, [pc, #168]	@ (8006a04 <xTaskResumeAll+0x124>)
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4a27      	ldr	r2, [pc, #156]	@ (8006a08 <xTaskResumeAll+0x128>)
 800696c:	441a      	add	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fe ffde 	bl	8005936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697e:	4b23      	ldr	r3, [pc, #140]	@ (8006a0c <xTaskResumeAll+0x12c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006988:	4b21      	ldr	r3, [pc, #132]	@ (8006a10 <xTaskResumeAll+0x130>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800698e:	4b1c      	ldr	r3, [pc, #112]	@ (8006a00 <xTaskResumeAll+0x120>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1cb      	bne.n	800692e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800699c:	f000 fb80 	bl	80070a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a14 <xTaskResumeAll+0x134>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d010      	beq.n	80069ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069ac:	f000 f846 	bl	8006a3c <xTaskIncrementTick>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80069b6:	4b16      	ldr	r3, [pc, #88]	@ (8006a10 <xTaskResumeAll+0x130>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3b01      	subs	r3, #1
 80069c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f1      	bne.n	80069ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80069c8:	4b12      	ldr	r3, [pc, #72]	@ (8006a14 <xTaskResumeAll+0x134>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069ce:	4b10      	ldr	r3, [pc, #64]	@ (8006a10 <xTaskResumeAll+0x130>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069da:	4b0f      	ldr	r3, [pc, #60]	@ (8006a18 <xTaskResumeAll+0x138>)
 80069dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069ea:	f001 f917 	bl	8007c1c <vPortExitCritical>

	return xAlreadyYielded;
 80069ee:	68bb      	ldr	r3, [r7, #8]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20001128 	.word	0x20001128
 80069fc:	20001100 	.word	0x20001100
 8006a00:	200010c0 	.word	0x200010c0
 8006a04:	20001108 	.word	0x20001108
 8006a08:	20000c30 	.word	0x20000c30
 8006a0c:	20000c2c 	.word	0x20000c2c
 8006a10:	20001114 	.word	0x20001114
 8006a14:	20001110 	.word	0x20001110
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a22:	4b05      	ldr	r3, [pc, #20]	@ (8006a38 <xTaskGetTickCount+0x1c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a28:	687b      	ldr	r3, [r7, #4]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20001104 	.word	0x20001104

08006a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a46:	4b4f      	ldr	r3, [pc, #316]	@ (8006b84 <xTaskIncrementTick+0x148>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 8090 	bne.w	8006b70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a50:	4b4d      	ldr	r3, [pc, #308]	@ (8006b88 <xTaskIncrementTick+0x14c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a58:	4a4b      	ldr	r2, [pc, #300]	@ (8006b88 <xTaskIncrementTick+0x14c>)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d121      	bne.n	8006aa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a64:	4b49      	ldr	r3, [pc, #292]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	603b      	str	r3, [r7, #0]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <xTaskIncrementTick+0x46>
 8006a86:	4b41      	ldr	r3, [pc, #260]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	4b40      	ldr	r3, [pc, #256]	@ (8006b90 <xTaskIncrementTick+0x154>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a3e      	ldr	r2, [pc, #248]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	4a3e      	ldr	r2, [pc, #248]	@ (8006b90 <xTaskIncrementTick+0x154>)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b94 <xTaskIncrementTick+0x158>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8006b94 <xTaskIncrementTick+0x158>)
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	f000 fafc 	bl	80070a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8006b98 <xTaskIncrementTick+0x15c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d349      	bcc.n	8006b46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ab2:	4b36      	ldr	r3, [pc, #216]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006abc:	4b36      	ldr	r3, [pc, #216]	@ (8006b98 <xTaskIncrementTick+0x15c>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ac2:	601a      	str	r2, [r3, #0]
					break;
 8006ac4:	e03f      	b.n	8006b46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac6:	4b31      	ldr	r3, [pc, #196]	@ (8006b8c <xTaskIncrementTick+0x150>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d203      	bcs.n	8006ae6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ade:	4a2e      	ldr	r2, [pc, #184]	@ (8006b98 <xTaskIncrementTick+0x15c>)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ae4:	e02f      	b.n	8006b46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe ff80 	bl	80059f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	3318      	adds	r3, #24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fe ff77 	bl	80059f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b06:	4b25      	ldr	r3, [pc, #148]	@ (8006b9c <xTaskIncrementTick+0x160>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d903      	bls.n	8006b16 <xTaskIncrementTick+0xda>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b12:	4a22      	ldr	r2, [pc, #136]	@ (8006b9c <xTaskIncrementTick+0x160>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba0 <xTaskIncrementTick+0x164>)
 8006b24:	441a      	add	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f7fe ff02 	bl	8005936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b36:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba4 <xTaskIncrementTick+0x168>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d3b8      	bcc.n	8006ab2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b44:	e7b5      	b.n	8006ab2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b46:	4b17      	ldr	r3, [pc, #92]	@ (8006ba4 <xTaskIncrementTick+0x168>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b4c:	4914      	ldr	r1, [pc, #80]	@ (8006ba0 <xTaskIncrementTick+0x164>)
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d901      	bls.n	8006b62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b62:	4b11      	ldr	r3, [pc, #68]	@ (8006ba8 <xTaskIncrementTick+0x16c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e004      	b.n	8006b7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b70:	4b0e      	ldr	r3, [pc, #56]	@ (8006bac <xTaskIncrementTick+0x170>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a0d      	ldr	r2, [pc, #52]	@ (8006bac <xTaskIncrementTick+0x170>)
 8006b78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b7a:	697b      	ldr	r3, [r7, #20]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20001128 	.word	0x20001128
 8006b88:	20001104 	.word	0x20001104
 8006b8c:	200010b8 	.word	0x200010b8
 8006b90:	200010bc 	.word	0x200010bc
 8006b94:	20001118 	.word	0x20001118
 8006b98:	20001120 	.word	0x20001120
 8006b9c:	20001108 	.word	0x20001108
 8006ba0:	20000c30 	.word	0x20000c30
 8006ba4:	20000c2c 	.word	0x20000c2c
 8006ba8:	20001114 	.word	0x20001114
 8006bac:	20001110 	.word	0x20001110

08006bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca4 <vTaskSwitchContext+0xf4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8006ca8 <vTaskSwitchContext+0xf8>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bc4:	e069      	b.n	8006c9a <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8006bc6:	4b38      	ldr	r3, [pc, #224]	@ (8006ca8 <vTaskSwitchContext+0xf8>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006bcc:	4b37      	ldr	r3, [pc, #220]	@ (8006cac <vTaskSwitchContext+0xfc>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d111      	bne.n	8006c08 <vTaskSwitchContext+0x58>
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	3304      	adds	r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d10b      	bne.n	8006c08 <vTaskSwitchContext+0x58>
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d105      	bne.n	8006c08 <vTaskSwitchContext+0x58>
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d008      	beq.n	8006c1a <vTaskSwitchContext+0x6a>
 8006c08:	4b28      	ldr	r3, [pc, #160]	@ (8006cac <vTaskSwitchContext+0xfc>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b27      	ldr	r3, [pc, #156]	@ (8006cac <vTaskSwitchContext+0xfc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3334      	adds	r3, #52	@ 0x34
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f7f9 fc6a 	bl	80004ee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1a:	4b25      	ldr	r3, [pc, #148]	@ (8006cb0 <vTaskSwitchContext+0x100>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e011      	b.n	8006c46 <vTaskSwitchContext+0x96>
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <vTaskSwitchContext+0x90>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	607b      	str	r3, [r7, #4]
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	e7fd      	b.n	8006c3c <vTaskSwitchContext+0x8c>
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	491b      	ldr	r1, [pc, #108]	@ (8006cb4 <vTaskSwitchContext+0x104>)
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0e3      	beq.n	8006c22 <vTaskSwitchContext+0x72>
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a13      	ldr	r2, [pc, #76]	@ (8006cb4 <vTaskSwitchContext+0x104>)
 8006c66:	4413      	add	r3, r2
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d104      	bne.n	8006c8a <vTaskSwitchContext+0xda>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	605a      	str	r2, [r3, #4]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4a06      	ldr	r2, [pc, #24]	@ (8006cac <vTaskSwitchContext+0xfc>)
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	4a06      	ldr	r2, [pc, #24]	@ (8006cb0 <vTaskSwitchContext+0x100>)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	6013      	str	r3, [r2, #0]
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20001128 	.word	0x20001128
 8006ca8:	20001114 	.word	0x20001114
 8006cac:	20000c2c 	.word	0x20000c2c
 8006cb0:	20001108 	.word	0x20001108
 8006cb4:	20000c30 	.word	0x20000c30

08006cb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10b      	bne.n	8006ce0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	60fb      	str	r3, [r7, #12]
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	e7fd      	b.n	8006cdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <vTaskPlaceOnEventList+0x48>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3318      	adds	r3, #24
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fe fe48 	bl	800597e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cee:	2101      	movs	r1, #1
 8006cf0:	6838      	ldr	r0, [r7, #0]
 8006cf2:	f000 fa83 	bl	80071fc <prvAddCurrentTaskToDelayedList>
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000c2c 	.word	0x20000c2c

08006d04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	617b      	str	r3, [r7, #20]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d58 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3318      	adds	r3, #24
 8006d34:	4619      	mov	r1, r3
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7fe fdfd 	bl	8005936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	68b8      	ldr	r0, [r7, #8]
 8006d4c:	f000 fa56 	bl	80071fc <prvAddCurrentTaskToDelayedList>
	}
 8006d50:	bf00      	nop
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000c2c 	.word	0x20000c2c

08006d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10b      	bne.n	8006d8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	60fb      	str	r3, [r7, #12]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3318      	adds	r3, #24
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fe2e 	bl	80059f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d94:	4b1d      	ldr	r3, [pc, #116]	@ (8006e0c <xTaskRemoveFromEventList+0xb0>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d11d      	bne.n	8006dd8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fe25 	bl	80059f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	4b19      	ldr	r3, [pc, #100]	@ (8006e10 <xTaskRemoveFromEventList+0xb4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d903      	bls.n	8006dba <xTaskRemoveFromEventList+0x5e>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	4a16      	ldr	r2, [pc, #88]	@ (8006e10 <xTaskRemoveFromEventList+0xb4>)
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a13      	ldr	r2, [pc, #76]	@ (8006e14 <xTaskRemoveFromEventList+0xb8>)
 8006dc8:	441a      	add	r2, r3
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fe fdb0 	bl	8005936 <vListInsertEnd>
 8006dd6:	e005      	b.n	8006de4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3318      	adds	r3, #24
 8006ddc:	4619      	mov	r1, r3
 8006dde:	480e      	ldr	r0, [pc, #56]	@ (8006e18 <xTaskRemoveFromEventList+0xbc>)
 8006de0:	f7fe fda9 	bl	8005936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e1c <xTaskRemoveFromEventList+0xc0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d905      	bls.n	8006dfe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006df2:	2301      	movs	r3, #1
 8006df4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006df6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e20 <xTaskRemoveFromEventList+0xc4>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e001      	b.n	8006e02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e02:	697b      	ldr	r3, [r7, #20]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20001128 	.word	0x20001128
 8006e10:	20001108 	.word	0x20001108
 8006e14:	20000c30 	.word	0x20000c30
 8006e18:	200010c0 	.word	0x200010c0
 8006e1c:	20000c2c 	.word	0x20000c2c
 8006e20:	20001114 	.word	0x20001114

08006e24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e2c:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <vTaskInternalSetTimeOutState+0x24>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e34:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <vTaskInternalSetTimeOutState+0x28>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	605a      	str	r2, [r3, #4]
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	20001118 	.word	0x20001118
 8006e4c:	20001104 	.word	0x20001104

08006e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10b      	bne.n	8006e78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	613b      	str	r3, [r7, #16]
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60fb      	str	r3, [r7, #12]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e96:	f000 fe8f 	bl	8007bb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f10 <xTaskCheckForTimeOut+0xc0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eb2:	d102      	bne.n	8006eba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	e023      	b.n	8006f02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b15      	ldr	r3, [pc, #84]	@ (8006f14 <xTaskCheckForTimeOut+0xc4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d007      	beq.n	8006ed6 <xTaskCheckForTimeOut+0x86>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e015      	b.n	8006f02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d20b      	bcs.n	8006ef8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	1ad2      	subs	r2, r2, r3
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff ff99 	bl	8006e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	e004      	b.n	8006f02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006efe:	2301      	movs	r3, #1
 8006f00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f02:	f000 fe8b 	bl	8007c1c <vPortExitCritical>

	return xReturn;
 8006f06:	69fb      	ldr	r3, [r7, #28]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3720      	adds	r7, #32
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20001104 	.word	0x20001104
 8006f14:	20001118 	.word	0x20001118

08006f18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f1c:	4b03      	ldr	r3, [pc, #12]	@ (8006f2c <vTaskMissedYield+0x14>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
}
 8006f22:	bf00      	nop
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	20001114 	.word	0x20001114

08006f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f38:	f000 f854 	bl	8006fe4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f3c:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <prvIdleTask+0x2c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d907      	bls.n	8006f54 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006f44:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <prvIdleTask+0x30>)
 8006f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006f54:	f7f9 fac4 	bl	80004e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006f58:	e7ee      	b.n	8006f38 <prvIdleTask+0x8>
 8006f5a:	bf00      	nop
 8006f5c:	20000c30 	.word	0x20000c30
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	607b      	str	r3, [r7, #4]
 8006f6e:	e00c      	b.n	8006f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4a12      	ldr	r2, [pc, #72]	@ (8006fc4 <prvInitialiseTaskLists+0x60>)
 8006f7c:	4413      	add	r3, r2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fcac 	bl	80058dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3301      	adds	r3, #1
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b37      	cmp	r3, #55	@ 0x37
 8006f8e:	d9ef      	bls.n	8006f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f90:	480d      	ldr	r0, [pc, #52]	@ (8006fc8 <prvInitialiseTaskLists+0x64>)
 8006f92:	f7fe fca3 	bl	80058dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f96:	480d      	ldr	r0, [pc, #52]	@ (8006fcc <prvInitialiseTaskLists+0x68>)
 8006f98:	f7fe fca0 	bl	80058dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f9c:	480c      	ldr	r0, [pc, #48]	@ (8006fd0 <prvInitialiseTaskLists+0x6c>)
 8006f9e:	f7fe fc9d 	bl	80058dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fa2:	480c      	ldr	r0, [pc, #48]	@ (8006fd4 <prvInitialiseTaskLists+0x70>)
 8006fa4:	f7fe fc9a 	bl	80058dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fa8:	480b      	ldr	r0, [pc, #44]	@ (8006fd8 <prvInitialiseTaskLists+0x74>)
 8006faa:	f7fe fc97 	bl	80058dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fae:	4b0b      	ldr	r3, [pc, #44]	@ (8006fdc <prvInitialiseTaskLists+0x78>)
 8006fb0:	4a05      	ldr	r2, [pc, #20]	@ (8006fc8 <prvInitialiseTaskLists+0x64>)
 8006fb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe0 <prvInitialiseTaskLists+0x7c>)
 8006fb6:	4a05      	ldr	r2, [pc, #20]	@ (8006fcc <prvInitialiseTaskLists+0x68>)
 8006fb8:	601a      	str	r2, [r3, #0]
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000c30 	.word	0x20000c30
 8006fc8:	20001090 	.word	0x20001090
 8006fcc:	200010a4 	.word	0x200010a4
 8006fd0:	200010c0 	.word	0x200010c0
 8006fd4:	200010d4 	.word	0x200010d4
 8006fd8:	200010ec 	.word	0x200010ec
 8006fdc:	200010b8 	.word	0x200010b8
 8006fe0:	200010bc 	.word	0x200010bc

08006fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fea:	e019      	b.n	8007020 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fec:	f000 fde4 	bl	8007bb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff0:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <prvCheckTasksWaitingTermination+0x50>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fcf7 	bl	80059f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <prvCheckTasksWaitingTermination+0x54>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3b01      	subs	r3, #1
 8007008:	4a0b      	ldr	r2, [pc, #44]	@ (8007038 <prvCheckTasksWaitingTermination+0x54>)
 800700a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800700c:	4b0b      	ldr	r3, [pc, #44]	@ (800703c <prvCheckTasksWaitingTermination+0x58>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3b01      	subs	r3, #1
 8007012:	4a0a      	ldr	r2, [pc, #40]	@ (800703c <prvCheckTasksWaitingTermination+0x58>)
 8007014:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007016:	f000 fe01 	bl	8007c1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f810 	bl	8007040 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007020:	4b06      	ldr	r3, [pc, #24]	@ (800703c <prvCheckTasksWaitingTermination+0x58>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e1      	bne.n	8006fec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200010d4 	.word	0x200010d4
 8007038:	20001100 	.word	0x20001100
 800703c:	200010e8 	.word	0x200010e8

08007040 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800704e:	2b00      	cmp	r3, #0
 8007050:	d108      	bne.n	8007064 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	4618      	mov	r0, r3
 8007058:	f000 ffa4 	bl	8007fa4 <vPortFree>
				vPortFree( pxTCB );
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 ffa1 	bl	8007fa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007062:	e019      	b.n	8007098 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800706a:	2b01      	cmp	r3, #1
 800706c:	d103      	bne.n	8007076 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 ff98 	bl	8007fa4 <vPortFree>
	}
 8007074:	e010      	b.n	8007098 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800707c:	2b02      	cmp	r3, #2
 800707e:	d00b      	beq.n	8007098 <prvDeleteTCB+0x58>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60fb      	str	r3, [r7, #12]
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <prvDeleteTCB+0x54>
	}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a6:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <prvResetNextTaskUnblockTime+0x38>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070b0:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <prvResetNextTaskUnblockTime+0x3c>)
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070b8:	e008      	b.n	80070cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ba:	4b07      	ldr	r3, [pc, #28]	@ (80070d8 <prvResetNextTaskUnblockTime+0x38>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	4a04      	ldr	r2, [pc, #16]	@ (80070dc <prvResetNextTaskUnblockTime+0x3c>)
 80070ca:	6013      	str	r3, [r2, #0]
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	200010b8 	.word	0x200010b8
 80070dc:	20001120 	.word	0x20001120

080070e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007114 <xTaskGetSchedulerState+0x34>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070ee:	2301      	movs	r3, #1
 80070f0:	607b      	str	r3, [r7, #4]
 80070f2:	e008      	b.n	8007106 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f4:	4b08      	ldr	r3, [pc, #32]	@ (8007118 <xTaskGetSchedulerState+0x38>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d102      	bne.n	8007102 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070fc:	2302      	movs	r3, #2
 80070fe:	607b      	str	r3, [r7, #4]
 8007100:	e001      	b.n	8007106 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007102:	2300      	movs	r3, #0
 8007104:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007106:	687b      	ldr	r3, [r7, #4]
	}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	2000110c 	.word	0x2000110c
 8007118:	20001128 	.word	0x20001128

0800711c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007128:	2300      	movs	r3, #0
 800712a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d058      	beq.n	80071e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007132:	4b2f      	ldr	r3, [pc, #188]	@ (80071f0 <xTaskPriorityDisinherit+0xd4>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	429a      	cmp	r2, r3
 800713a:	d00b      	beq.n	8007154 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	60fb      	str	r3, [r7, #12]
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	e7fd      	b.n	8007150 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10b      	bne.n	8007174 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	60bb      	str	r3, [r7, #8]
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	e7fd      	b.n	8007170 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007178:	1e5a      	subs	r2, r3, #1
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007186:	429a      	cmp	r2, r3
 8007188:	d02c      	beq.n	80071e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800718e:	2b00      	cmp	r3, #0
 8007190:	d128      	bne.n	80071e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3304      	adds	r3, #4
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fc2a 	bl	80059f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b4:	4b0f      	ldr	r3, [pc, #60]	@ (80071f4 <xTaskPriorityDisinherit+0xd8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d903      	bls.n	80071c4 <xTaskPriorityDisinherit+0xa8>
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	4a0c      	ldr	r2, [pc, #48]	@ (80071f4 <xTaskPriorityDisinherit+0xd8>)
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4a09      	ldr	r2, [pc, #36]	@ (80071f8 <xTaskPriorityDisinherit+0xdc>)
 80071d2:	441a      	add	r2, r3
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f7fe fbab 	bl	8005936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071e0:	2301      	movs	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071e4:	697b      	ldr	r3, [r7, #20]
	}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000c2c 	.word	0x20000c2c
 80071f4:	20001108 	.word	0x20001108
 80071f8:	20000c30 	.word	0x20000c30

080071fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007206:	4b21      	ldr	r3, [pc, #132]	@ (800728c <prvAddCurrentTaskToDelayedList+0x90>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800720c:	4b20      	ldr	r3, [pc, #128]	@ (8007290 <prvAddCurrentTaskToDelayedList+0x94>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3304      	adds	r3, #4
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe fbec 	bl	80059f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800721e:	d10a      	bne.n	8007236 <prvAddCurrentTaskToDelayedList+0x3a>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007226:	4b1a      	ldr	r3, [pc, #104]	@ (8007290 <prvAddCurrentTaskToDelayedList+0x94>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3304      	adds	r3, #4
 800722c:	4619      	mov	r1, r3
 800722e:	4819      	ldr	r0, [pc, #100]	@ (8007294 <prvAddCurrentTaskToDelayedList+0x98>)
 8007230:	f7fe fb81 	bl	8005936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007234:	e026      	b.n	8007284 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4413      	add	r3, r2
 800723c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800723e:	4b14      	ldr	r3, [pc, #80]	@ (8007290 <prvAddCurrentTaskToDelayedList+0x94>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	429a      	cmp	r2, r3
 800724c:	d209      	bcs.n	8007262 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800724e:	4b12      	ldr	r3, [pc, #72]	@ (8007298 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4b0f      	ldr	r3, [pc, #60]	@ (8007290 <prvAddCurrentTaskToDelayedList+0x94>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3304      	adds	r3, #4
 8007258:	4619      	mov	r1, r3
 800725a:	4610      	mov	r0, r2
 800725c:	f7fe fb8f 	bl	800597e <vListInsert>
}
 8007260:	e010      	b.n	8007284 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007262:	4b0e      	ldr	r3, [pc, #56]	@ (800729c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <prvAddCurrentTaskToDelayedList+0x94>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3304      	adds	r3, #4
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f7fe fb85 	bl	800597e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007274:	4b0a      	ldr	r3, [pc, #40]	@ (80072a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	d202      	bcs.n	8007284 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800727e:	4a08      	ldr	r2, [pc, #32]	@ (80072a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	6013      	str	r3, [r2, #0]
}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20001104 	.word	0x20001104
 8007290:	20000c2c 	.word	0x20000c2c
 8007294:	200010ec 	.word	0x200010ec
 8007298:	200010bc 	.word	0x200010bc
 800729c:	200010b8 	.word	0x200010b8
 80072a0:	20001120 	.word	0x20001120

080072a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	@ 0x28
 80072a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072ae:	f000 fb13 	bl	80078d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007328 <xTimerCreateTimerTask+0x84>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d021      	beq.n	80072fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072c2:	1d3a      	adds	r2, r7, #4
 80072c4:	f107 0108 	add.w	r1, r7, #8
 80072c8:	f107 030c 	add.w	r3, r7, #12
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe faeb 	bl	80058a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	9202      	str	r2, [sp, #8]
 80072da:	9301      	str	r3, [sp, #4]
 80072dc:	2302      	movs	r3, #2
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	2300      	movs	r3, #0
 80072e2:	460a      	mov	r2, r1
 80072e4:	4911      	ldr	r1, [pc, #68]	@ (800732c <xTimerCreateTimerTask+0x88>)
 80072e6:	4812      	ldr	r0, [pc, #72]	@ (8007330 <xTimerCreateTimerTask+0x8c>)
 80072e8:	f7ff f8a6 	bl	8006438 <xTaskCreateStatic>
 80072ec:	4603      	mov	r3, r0
 80072ee:	4a11      	ldr	r2, [pc, #68]	@ (8007334 <xTimerCreateTimerTask+0x90>)
 80072f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <xTimerCreateTimerTask+0x90>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072fa:	2301      	movs	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10b      	bne.n	800731c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	613b      	str	r3, [r7, #16]
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800731c:	697b      	ldr	r3, [r7, #20]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	2000115c 	.word	0x2000115c
 800732c:	08008288 	.word	0x08008288
 8007330:	08007471 	.word	0x08007471
 8007334:	20001160 	.word	0x20001160

08007338 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08a      	sub	sp, #40	@ 0x28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <xTimerGenericCommand+0x30>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	623b      	str	r3, [r7, #32]
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007368:	4b19      	ldr	r3, [pc, #100]	@ (80073d0 <xTimerGenericCommand+0x98>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02a      	beq.n	80073c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b05      	cmp	r3, #5
 8007380:	dc18      	bgt.n	80073b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007382:	f7ff fead 	bl	80070e0 <xTaskGetSchedulerState>
 8007386:	4603      	mov	r3, r0
 8007388:	2b02      	cmp	r3, #2
 800738a:	d109      	bne.n	80073a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800738c:	4b10      	ldr	r3, [pc, #64]	@ (80073d0 <xTimerGenericCommand+0x98>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	f107 0110 	add.w	r1, r7, #16
 8007394:	2300      	movs	r3, #0
 8007396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007398:	f7fe fc5e 	bl	8005c58 <xQueueGenericSend>
 800739c:	6278      	str	r0, [r7, #36]	@ 0x24
 800739e:	e012      	b.n	80073c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073a0:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <xTimerGenericCommand+0x98>)
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	f107 0110 	add.w	r1, r7, #16
 80073a8:	2300      	movs	r3, #0
 80073aa:	2200      	movs	r2, #0
 80073ac:	f7fe fc54 	bl	8005c58 <xQueueGenericSend>
 80073b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80073b2:	e008      	b.n	80073c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073b4:	4b06      	ldr	r3, [pc, #24]	@ (80073d0 <xTimerGenericCommand+0x98>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	f107 0110 	add.w	r1, r7, #16
 80073bc:	2300      	movs	r3, #0
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	f7fe fd4c 	bl	8005e5c <xQueueGenericSendFromISR>
 80073c4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3728      	adds	r7, #40	@ 0x28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	2000115c 	.word	0x2000115c

080073d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af02      	add	r7, sp, #8
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073de:	4b23      	ldr	r3, [pc, #140]	@ (800746c <prvProcessExpiredTimer+0x98>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe faff 	bl	80059f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d023      	beq.n	8007448 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	18d1      	adds	r1, r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	6978      	ldr	r0, [r7, #20]
 800740e:	f000 f8d5 	bl	80075bc <prvInsertTimerInActiveList>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d020      	beq.n	800745a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007418:	2300      	movs	r3, #0
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	2300      	movs	r3, #0
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	2100      	movs	r1, #0
 8007422:	6978      	ldr	r0, [r7, #20]
 8007424:	f7ff ff88 	bl	8007338 <xTimerGenericCommand>
 8007428:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d114      	bne.n	800745a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800744e:	f023 0301 	bic.w	r3, r3, #1
 8007452:	b2da      	uxtb	r2, r3
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	6978      	ldr	r0, [r7, #20]
 8007460:	4798      	blx	r3
}
 8007462:	bf00      	nop
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20001154 	.word	0x20001154

08007470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007478:	f107 0308 	add.w	r3, r7, #8
 800747c:	4618      	mov	r0, r3
 800747e:	f000 f859 	bl	8007534 <prvGetNextExpireTime>
 8007482:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4619      	mov	r1, r3
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f805 	bl	8007498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800748e:	f000 f8d7 	bl	8007640 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007492:	bf00      	nop
 8007494:	e7f0      	b.n	8007478 <prvTimerTask+0x8>
	...

08007498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074a2:	f7ff fa0f 	bl	80068c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074a6:	f107 0308 	add.w	r3, r7, #8
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f866 	bl	800757c <prvSampleTimeNow>
 80074b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d130      	bne.n	800751a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <prvProcessTimerOrBlockTask+0x3c>
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d806      	bhi.n	80074d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074c6:	f7ff fa0b 	bl	80068e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ff81 	bl	80073d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074d2:	e024      	b.n	800751e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d008      	beq.n	80074ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074da:	4b13      	ldr	r3, [pc, #76]	@ (8007528 <prvProcessTimerOrBlockTask+0x90>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <prvProcessTimerOrBlockTask+0x50>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <prvProcessTimerOrBlockTask+0x52>
 80074e8:	2300      	movs	r3, #0
 80074ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074ec:	4b0f      	ldr	r3, [pc, #60]	@ (800752c <prvProcessTimerOrBlockTask+0x94>)
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	4619      	mov	r1, r3
 80074fa:	f7fe ff69 	bl	80063d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074fe:	f7ff f9ef 	bl	80068e0 <xTaskResumeAll>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007508:	4b09      	ldr	r3, [pc, #36]	@ (8007530 <prvProcessTimerOrBlockTask+0x98>)
 800750a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	f3bf 8f6f 	isb	sy
}
 8007518:	e001      	b.n	800751e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800751a:	f7ff f9e1 	bl	80068e0 <xTaskResumeAll>
}
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20001158 	.word	0x20001158
 800752c:	2000115c 	.word	0x2000115c
 8007530:	e000ed04 	.word	0xe000ed04

08007534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800753c:	4b0e      	ldr	r3, [pc, #56]	@ (8007578 <prvGetNextExpireTime+0x44>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <prvGetNextExpireTime+0x16>
 8007546:	2201      	movs	r2, #1
 8007548:	e000      	b.n	800754c <prvGetNextExpireTime+0x18>
 800754a:	2200      	movs	r2, #0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007558:	4b07      	ldr	r3, [pc, #28]	@ (8007578 <prvGetNextExpireTime+0x44>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e001      	b.n	8007568 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007568:	68fb      	ldr	r3, [r7, #12]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	20001154 	.word	0x20001154

0800757c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007584:	f7ff fa4a 	bl	8006a1c <xTaskGetTickCount>
 8007588:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800758a:	4b0b      	ldr	r3, [pc, #44]	@ (80075b8 <prvSampleTimeNow+0x3c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	429a      	cmp	r2, r3
 8007592:	d205      	bcs.n	80075a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007594:	f000 f93a 	bl	800780c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e002      	b.n	80075a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075a6:	4a04      	ldr	r2, [pc, #16]	@ (80075b8 <prvSampleTimeNow+0x3c>)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20001164 	.word	0x20001164

080075bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d812      	bhi.n	8007608 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	1ad2      	subs	r2, r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d302      	bcc.n	80075f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075f0:	2301      	movs	r3, #1
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e01b      	b.n	800762e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075f6:	4b10      	ldr	r3, [pc, #64]	@ (8007638 <prvInsertTimerInActiveList+0x7c>)
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4619      	mov	r1, r3
 8007600:	4610      	mov	r0, r2
 8007602:	f7fe f9bc 	bl	800597e <vListInsert>
 8007606:	e012      	b.n	800762e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d206      	bcs.n	800761e <prvInsertTimerInActiveList+0x62>
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d302      	bcc.n	800761e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	e007      	b.n	800762e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800761e:	4b07      	ldr	r3, [pc, #28]	@ (800763c <prvInsertTimerInActiveList+0x80>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f7fe f9a8 	bl	800597e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800762e:	697b      	ldr	r3, [r7, #20]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20001158 	.word	0x20001158
 800763c:	20001154 	.word	0x20001154

08007640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08e      	sub	sp, #56	@ 0x38
 8007644:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007646:	e0ce      	b.n	80077e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	da19      	bge.n	8007682 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800764e:	1d3b      	adds	r3, r7, #4
 8007650:	3304      	adds	r3, #4
 8007652:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	61fb      	str	r3, [r7, #28]
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	e7fd      	b.n	800766e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007678:	6850      	ldr	r0, [r2, #4]
 800767a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800767c:	6892      	ldr	r2, [r2, #8]
 800767e:	4611      	mov	r1, r2
 8007680:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f2c0 80ae 	blt.w	80077e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800768e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	3304      	adds	r3, #4
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe f9a8 	bl	80059f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076a0:	463b      	mov	r3, r7
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff ff6a 	bl	800757c <prvSampleTimeNow>
 80076a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b09      	cmp	r3, #9
 80076ae:	f200 8097 	bhi.w	80077e0 <prvProcessReceivedCommands+0x1a0>
 80076b2:	a201      	add	r2, pc, #4	@ (adr r2, 80076b8 <prvProcessReceivedCommands+0x78>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076e1 	.word	0x080076e1
 80076c4:	08007757 	.word	0x08007757
 80076c8:	0800776b 	.word	0x0800776b
 80076cc:	080077b7 	.word	0x080077b7
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076e1 	.word	0x080076e1
 80076d8:	08007757 	.word	0x08007757
 80076dc:	0800776b 	.word	0x0800776b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	18d1      	adds	r1, r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007700:	f7ff ff5c 	bl	80075bc <prvInsertTimerInActiveList>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d06c      	beq.n	80077e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007710:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d061      	beq.n	80077e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	441a      	add	r2, r3
 8007728:	2300      	movs	r3, #0
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	2300      	movs	r3, #0
 800772e:	2100      	movs	r1, #0
 8007730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007732:	f7ff fe01 	bl	8007338 <xTimerGenericCommand>
 8007736:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d152      	bne.n	80077e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	61bb      	str	r3, [r7, #24]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800775c:	f023 0301 	bic.w	r3, r3, #1
 8007760:	b2da      	uxtb	r2, r3
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007768:	e03d      	b.n	80077e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	b2da      	uxtb	r2, r3
 8007776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007778:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10b      	bne.n	80077a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	617b      	str	r3, [r7, #20]
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	e7fd      	b.n	800779e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	18d1      	adds	r1, r2, r3
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b0:	f7ff ff04 	bl	80075bc <prvInsertTimerInActiveList>
					break;
 80077b4:	e017      	b.n	80077e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80077c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077c6:	f000 fbed 	bl	8007fa4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077ca:	e00c      	b.n	80077e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077d2:	f023 0301 	bic.w	r3, r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077de:	e002      	b.n	80077e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80077e0:	bf00      	nop
 80077e2:	e000      	b.n	80077e6 <prvProcessReceivedCommands+0x1a6>
					break;
 80077e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077e6:	4b08      	ldr	r3, [pc, #32]	@ (8007808 <prvProcessReceivedCommands+0x1c8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	1d39      	adds	r1, r7, #4
 80077ec:	2200      	movs	r2, #0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fbd2 	bl	8005f98 <xQueueReceive>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f47f af26 	bne.w	8007648 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	3730      	adds	r7, #48	@ 0x30
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	2000115c 	.word	0x2000115c

0800780c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007812:	e049      	b.n	80078a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007814:	4b2e      	ldr	r3, [pc, #184]	@ (80078d0 <prvSwitchTimerLists+0xc4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800781e:	4b2c      	ldr	r3, [pc, #176]	@ (80078d0 <prvSwitchTimerLists+0xc4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3304      	adds	r3, #4
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe f8df 	bl	80059f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b00      	cmp	r3, #0
 8007846:	d02f      	beq.n	80078a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4413      	add	r3, r2
 8007850:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	429a      	cmp	r2, r3
 8007858:	d90e      	bls.n	8007878 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007866:	4b1a      	ldr	r3, [pc, #104]	@ (80078d0 <prvSwitchTimerLists+0xc4>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f7fe f884 	bl	800597e <vListInsert>
 8007876:	e017      	b.n	80078a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007878:	2300      	movs	r3, #0
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	2300      	movs	r3, #0
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	2100      	movs	r1, #0
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7ff fd58 	bl	8007338 <xTimerGenericCommand>
 8007888:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	603b      	str	r3, [r7, #0]
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078a8:	4b09      	ldr	r3, [pc, #36]	@ (80078d0 <prvSwitchTimerLists+0xc4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1b0      	bne.n	8007814 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078b2:	4b07      	ldr	r3, [pc, #28]	@ (80078d0 <prvSwitchTimerLists+0xc4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078b8:	4b06      	ldr	r3, [pc, #24]	@ (80078d4 <prvSwitchTimerLists+0xc8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a04      	ldr	r2, [pc, #16]	@ (80078d0 <prvSwitchTimerLists+0xc4>)
 80078be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078c0:	4a04      	ldr	r2, [pc, #16]	@ (80078d4 <prvSwitchTimerLists+0xc8>)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6013      	str	r3, [r2, #0]
}
 80078c6:	bf00      	nop
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20001154 	.word	0x20001154
 80078d4:	20001158 	.word	0x20001158

080078d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078de:	f000 f96b 	bl	8007bb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078e2:	4b15      	ldr	r3, [pc, #84]	@ (8007938 <prvCheckForValidListAndQueue+0x60>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d120      	bne.n	800792c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078ea:	4814      	ldr	r0, [pc, #80]	@ (800793c <prvCheckForValidListAndQueue+0x64>)
 80078ec:	f7fd fff6 	bl	80058dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078f0:	4813      	ldr	r0, [pc, #76]	@ (8007940 <prvCheckForValidListAndQueue+0x68>)
 80078f2:	f7fd fff3 	bl	80058dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078f6:	4b13      	ldr	r3, [pc, #76]	@ (8007944 <prvCheckForValidListAndQueue+0x6c>)
 80078f8:	4a10      	ldr	r2, [pc, #64]	@ (800793c <prvCheckForValidListAndQueue+0x64>)
 80078fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078fc:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <prvCheckForValidListAndQueue+0x70>)
 80078fe:	4a10      	ldr	r2, [pc, #64]	@ (8007940 <prvCheckForValidListAndQueue+0x68>)
 8007900:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007902:	2300      	movs	r3, #0
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	4b11      	ldr	r3, [pc, #68]	@ (800794c <prvCheckForValidListAndQueue+0x74>)
 8007908:	4a11      	ldr	r2, [pc, #68]	@ (8007950 <prvCheckForValidListAndQueue+0x78>)
 800790a:	2110      	movs	r1, #16
 800790c:	200a      	movs	r0, #10
 800790e:	f7fe f903 	bl	8005b18 <xQueueGenericCreateStatic>
 8007912:	4603      	mov	r3, r0
 8007914:	4a08      	ldr	r2, [pc, #32]	@ (8007938 <prvCheckForValidListAndQueue+0x60>)
 8007916:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007918:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <prvCheckForValidListAndQueue+0x60>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007920:	4b05      	ldr	r3, [pc, #20]	@ (8007938 <prvCheckForValidListAndQueue+0x60>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	490b      	ldr	r1, [pc, #44]	@ (8007954 <prvCheckForValidListAndQueue+0x7c>)
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fd28 	bl	800637c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800792c:	f000 f976 	bl	8007c1c <vPortExitCritical>
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	2000115c 	.word	0x2000115c
 800793c:	2000112c 	.word	0x2000112c
 8007940:	20001140 	.word	0x20001140
 8007944:	20001154 	.word	0x20001154
 8007948:	20001158 	.word	0x20001158
 800794c:	20001208 	.word	0x20001208
 8007950:	20001168 	.word	0x20001168
 8007954:	08008290 	.word	0x08008290

08007958 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3b04      	subs	r3, #4
 8007968:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3b04      	subs	r3, #4
 8007976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0201 	bic.w	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3b04      	subs	r3, #4
 8007986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007988:	4a0c      	ldr	r2, [pc, #48]	@ (80079bc <pxPortInitialiseStack+0x64>)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b14      	subs	r3, #20
 8007992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3b04      	subs	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f06f 0202 	mvn.w	r2, #2
 80079a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3b20      	subs	r3, #32
 80079ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ae:	68fb      	ldr	r3, [r7, #12]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	080079c1 	.word	0x080079c1

080079c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079ca:	4b13      	ldr	r3, [pc, #76]	@ (8007a18 <prvTaskExitError+0x58>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079d2:	d00b      	beq.n	80079ec <prvTaskExitError+0x2c>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	60fb      	str	r3, [r7, #12]
}
 80079e6:	bf00      	nop
 80079e8:	bf00      	nop
 80079ea:	e7fd      	b.n	80079e8 <prvTaskExitError+0x28>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	60bb      	str	r3, [r7, #8]
}
 80079fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a00:	bf00      	nop
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0fc      	beq.n	8007a02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	2000000c 	.word	0x2000000c
 8007a1c:	00000000 	.word	0x00000000

08007a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a20:	4b07      	ldr	r3, [pc, #28]	@ (8007a40 <pxCurrentTCBConst2>)
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	6808      	ldr	r0, [r1, #0]
 8007a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2a:	f380 8809 	msr	PSP, r0
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8811 	msr	BASEPRI, r0
 8007a3a:	4770      	bx	lr
 8007a3c:	f3af 8000 	nop.w

08007a40 <pxCurrentTCBConst2>:
 8007a40:	20000c2c 	.word	0x20000c2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a48:	4808      	ldr	r0, [pc, #32]	@ (8007a6c <prvPortStartFirstTask+0x24>)
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	6800      	ldr	r0, [r0, #0]
 8007a4e:	f380 8808 	msr	MSP, r0
 8007a52:	f04f 0000 	mov.w	r0, #0
 8007a56:	f380 8814 	msr	CONTROL, r0
 8007a5a:	b662      	cpsie	i
 8007a5c:	b661      	cpsie	f
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	df00      	svc	0
 8007a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a6a:	bf00      	nop
 8007a6c:	e000ed08 	.word	0xe000ed08

08007a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a76:	4b47      	ldr	r3, [pc, #284]	@ (8007b94 <xPortStartScheduler+0x124>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a47      	ldr	r2, [pc, #284]	@ (8007b98 <xPortStartScheduler+0x128>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d10b      	bne.n	8007a98 <xPortStartScheduler+0x28>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	613b      	str	r3, [r7, #16]
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a98:	4b3e      	ldr	r3, [pc, #248]	@ (8007b94 <xPortStartScheduler+0x124>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b9c <xPortStartScheduler+0x12c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d10b      	bne.n	8007aba <xPortStartScheduler+0x4a>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	60fb      	str	r3, [r7, #12]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007aba:	4b39      	ldr	r3, [pc, #228]	@ (8007ba0 <xPortStartScheduler+0x130>)
 8007abc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	22ff      	movs	r2, #255	@ 0xff
 8007aca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	4b31      	ldr	r3, [pc, #196]	@ (8007ba4 <xPortStartScheduler+0x134>)
 8007ae0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ae2:	4b31      	ldr	r3, [pc, #196]	@ (8007ba8 <xPortStartScheduler+0x138>)
 8007ae4:	2207      	movs	r2, #7
 8007ae6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ae8:	e009      	b.n	8007afe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007aea:	4b2f      	ldr	r3, [pc, #188]	@ (8007ba8 <xPortStartScheduler+0x138>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	4a2d      	ldr	r2, [pc, #180]	@ (8007ba8 <xPortStartScheduler+0x138>)
 8007af2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b06:	2b80      	cmp	r3, #128	@ 0x80
 8007b08:	d0ef      	beq.n	8007aea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b0a:	4b27      	ldr	r3, [pc, #156]	@ (8007ba8 <xPortStartScheduler+0x138>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1c3 0307 	rsb	r3, r3, #7
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d00b      	beq.n	8007b2e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	60bb      	str	r3, [r7, #8]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ba8 <xPortStartScheduler+0x138>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba8 <xPortStartScheduler+0x138>)
 8007b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b38:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba8 <xPortStartScheduler+0x138>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b40:	4a19      	ldr	r2, [pc, #100]	@ (8007ba8 <xPortStartScheduler+0x138>)
 8007b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b4c:	4b17      	ldr	r3, [pc, #92]	@ (8007bac <xPortStartScheduler+0x13c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a16      	ldr	r2, [pc, #88]	@ (8007bac <xPortStartScheduler+0x13c>)
 8007b52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b58:	4b14      	ldr	r3, [pc, #80]	@ (8007bac <xPortStartScheduler+0x13c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a13      	ldr	r2, [pc, #76]	@ (8007bac <xPortStartScheduler+0x13c>)
 8007b5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b64:	f000 f8da 	bl	8007d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b68:	4b11      	ldr	r3, [pc, #68]	@ (8007bb0 <xPortStartScheduler+0x140>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b6e:	f000 f8f9 	bl	8007d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b72:	4b10      	ldr	r3, [pc, #64]	@ (8007bb4 <xPortStartScheduler+0x144>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a0f      	ldr	r2, [pc, #60]	@ (8007bb4 <xPortStartScheduler+0x144>)
 8007b78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b7e:	f7ff ff63 	bl	8007a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b82:	f7ff f815 	bl	8006bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8007b86:	f7ff ff1b 	bl	80079c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	e000ed00 	.word	0xe000ed00
 8007b98:	410fc271 	.word	0x410fc271
 8007b9c:	410fc270 	.word	0x410fc270
 8007ba0:	e000e400 	.word	0xe000e400
 8007ba4:	20001258 	.word	0x20001258
 8007ba8:	2000125c 	.word	0x2000125c
 8007bac:	e000ed20 	.word	0xe000ed20
 8007bb0:	2000000c 	.word	0x2000000c
 8007bb4:	e000ef34 	.word	0xe000ef34

08007bb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	607b      	str	r3, [r7, #4]
}
 8007bd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bd2:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <vPortEnterCritical+0x5c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8007c14 <vPortEnterCritical+0x5c>)
 8007bda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <vPortEnterCritical+0x5c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d110      	bne.n	8007c06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007be4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c18 <vPortEnterCritical+0x60>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <vPortEnterCritical+0x4e>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	603b      	str	r3, [r7, #0]
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	e7fd      	b.n	8007c02 <vPortEnterCritical+0x4a>
	}
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	2000000c 	.word	0x2000000c
 8007c18:	e000ed04 	.word	0xe000ed04

08007c1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c22:	4b12      	ldr	r3, [pc, #72]	@ (8007c6c <vPortExitCritical+0x50>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <vPortExitCritical+0x26>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	607b      	str	r3, [r7, #4]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c42:	4b0a      	ldr	r3, [pc, #40]	@ (8007c6c <vPortExitCritical+0x50>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	4a08      	ldr	r2, [pc, #32]	@ (8007c6c <vPortExitCritical+0x50>)
 8007c4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c4c:	4b07      	ldr	r3, [pc, #28]	@ (8007c6c <vPortExitCritical+0x50>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <vPortExitCritical+0x44>
 8007c54:	2300      	movs	r3, #0
 8007c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	f383 8811 	msr	BASEPRI, r3
}
 8007c5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	2000000c 	.word	0x2000000c

08007c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c70:	f3ef 8009 	mrs	r0, PSP
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4b15      	ldr	r3, [pc, #84]	@ (8007cd0 <pxCurrentTCBConst>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f01e 0f10 	tst.w	lr, #16
 8007c80:	bf08      	it	eq
 8007c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	6010      	str	r0, [r2, #0]
 8007c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c94:	f380 8811 	msr	BASEPRI, r0
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f7fe ff86 	bl	8006bb0 <vTaskSwitchContext>
 8007ca4:	f04f 0000 	mov.w	r0, #0
 8007ca8:	f380 8811 	msr	BASEPRI, r0
 8007cac:	bc09      	pop	{r0, r3}
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	6808      	ldr	r0, [r1, #0]
 8007cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb6:	f01e 0f10 	tst.w	lr, #16
 8007cba:	bf08      	it	eq
 8007cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cc0:	f380 8809 	msr	PSP, r0
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	f3af 8000 	nop.w

08007cd0 <pxCurrentTCBConst>:
 8007cd0:	20000c2c 	.word	0x20000c2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop

08007cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	607b      	str	r3, [r7, #4]
}
 8007cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cf2:	f7fe fea3 	bl	8006a3c <xTaskIncrementTick>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cfc:	4b06      	ldr	r3, [pc, #24]	@ (8007d18 <xPortSysTickHandler+0x40>)
 8007cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	2300      	movs	r3, #0
 8007d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f383 8811 	msr	BASEPRI, r3
}
 8007d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d20:	4b0b      	ldr	r3, [pc, #44]	@ (8007d50 <vPortSetupTimerInterrupt+0x34>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d26:	4b0b      	ldr	r3, [pc, #44]	@ (8007d54 <vPortSetupTimerInterrupt+0x38>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <vPortSetupTimerInterrupt+0x3c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0a      	ldr	r2, [pc, #40]	@ (8007d5c <vPortSetupTimerInterrupt+0x40>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	099b      	lsrs	r3, r3, #6
 8007d38:	4a09      	ldr	r2, [pc, #36]	@ (8007d60 <vPortSetupTimerInterrupt+0x44>)
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d3e:	4b04      	ldr	r3, [pc, #16]	@ (8007d50 <vPortSetupTimerInterrupt+0x34>)
 8007d40:	2207      	movs	r2, #7
 8007d42:	601a      	str	r2, [r3, #0]
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	e000e010 	.word	0xe000e010
 8007d54:	e000e018 	.word	0xe000e018
 8007d58:	20000000 	.word	0x20000000
 8007d5c:	10624dd3 	.word	0x10624dd3
 8007d60:	e000e014 	.word	0xe000e014

08007d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d74 <vPortEnableVFP+0x10>
 8007d68:	6801      	ldr	r1, [r0, #0]
 8007d6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d6e:	6001      	str	r1, [r0, #0]
 8007d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d72:	bf00      	nop
 8007d74:	e000ed88 	.word	0xe000ed88

08007d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d7e:	f3ef 8305 	mrs	r3, IPSR
 8007d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d915      	bls.n	8007db6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d8a:	4a18      	ldr	r2, [pc, #96]	@ (8007dec <vPortValidateInterruptPriority+0x74>)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d94:	4b16      	ldr	r3, [pc, #88]	@ (8007df0 <vPortValidateInterruptPriority+0x78>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	7afa      	ldrb	r2, [r7, #11]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d20b      	bcs.n	8007db6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	607b      	str	r3, [r7, #4]
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	e7fd      	b.n	8007db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007db6:	4b0f      	ldr	r3, [pc, #60]	@ (8007df4 <vPortValidateInterruptPriority+0x7c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <vPortValidateInterruptPriority+0x80>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d90b      	bls.n	8007dde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	603b      	str	r3, [r7, #0]
}
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
 8007ddc:	e7fd      	b.n	8007dda <vPortValidateInterruptPriority+0x62>
	}
 8007dde:	bf00      	nop
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	e000e3f0 	.word	0xe000e3f0
 8007df0:	20001258 	.word	0x20001258
 8007df4:	e000ed0c 	.word	0xe000ed0c
 8007df8:	2000125c 	.word	0x2000125c

08007dfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08a      	sub	sp, #40	@ 0x28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e08:	f7fe fd5c 	bl	80068c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e0c:	4b5f      	ldr	r3, [pc, #380]	@ (8007f8c <pvPortMalloc+0x190>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e14:	f000 f92a 	bl	800806c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e18:	4b5d      	ldr	r3, [pc, #372]	@ (8007f90 <pvPortMalloc+0x194>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 8095 	bne.w	8007f50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01e      	beq.n	8007e6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d015      	beq.n	8007e6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f023 0307 	bic.w	r3, r3, #7
 8007e44:	3308      	adds	r3, #8
 8007e46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <pvPortMalloc+0x6e>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	617b      	str	r3, [r7, #20]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d06f      	beq.n	8007f50 <pvPortMalloc+0x154>
 8007e70:	4b48      	ldr	r3, [pc, #288]	@ (8007f94 <pvPortMalloc+0x198>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d86a      	bhi.n	8007f50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e7a:	4b47      	ldr	r3, [pc, #284]	@ (8007f98 <pvPortMalloc+0x19c>)
 8007e7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e7e:	4b46      	ldr	r3, [pc, #280]	@ (8007f98 <pvPortMalloc+0x19c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e84:	e004      	b.n	8007e90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d903      	bls.n	8007ea2 <pvPortMalloc+0xa6>
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1f1      	bne.n	8007e86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8007f8c <pvPortMalloc+0x190>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d051      	beq.n	8007f50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	4413      	add	r3, r2
 8007eb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	1ad2      	subs	r2, r2, r3
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d920      	bls.n	8007f10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	613b      	str	r3, [r7, #16]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f0a:	69b8      	ldr	r0, [r7, #24]
 8007f0c:	f000 f910 	bl	8008130 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f10:	4b20      	ldr	r3, [pc, #128]	@ (8007f94 <pvPortMalloc+0x198>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f94 <pvPortMalloc+0x198>)
 8007f1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f94 <pvPortMalloc+0x198>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4b1e      	ldr	r3, [pc, #120]	@ (8007f9c <pvPortMalloc+0x1a0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d203      	bcs.n	8007f32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007f94 <pvPortMalloc+0x198>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007f9c <pvPortMalloc+0x1a0>)
 8007f30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	4b16      	ldr	r3, [pc, #88]	@ (8007f90 <pvPortMalloc+0x194>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f46:	4b16      	ldr	r3, [pc, #88]	@ (8007fa0 <pvPortMalloc+0x1a4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	4a14      	ldr	r2, [pc, #80]	@ (8007fa0 <pvPortMalloc+0x1a4>)
 8007f4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f50:	f7fe fcc6 	bl	80068e0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007f5a:	f7f8 fad3 	bl	8000504 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f003 0307 	and.w	r3, r3, #7
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <pvPortMalloc+0x184>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	60fb      	str	r3, [r7, #12]
}
 8007f7a:	bf00      	nop
 8007f7c:	bf00      	nop
 8007f7e:	e7fd      	b.n	8007f7c <pvPortMalloc+0x180>
	return pvReturn;
 8007f80:	69fb      	ldr	r3, [r7, #28]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3728      	adds	r7, #40	@ 0x28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20009268 	.word	0x20009268
 8007f90:	2000927c 	.word	0x2000927c
 8007f94:	2000926c 	.word	0x2000926c
 8007f98:	20009260 	.word	0x20009260
 8007f9c:	20009270 	.word	0x20009270
 8007fa0:	20009274 	.word	0x20009274

08007fa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d04f      	beq.n	8008056 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fb6:	2308      	movs	r3, #8
 8007fb8:	425b      	negs	r3, r3
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	4b25      	ldr	r3, [pc, #148]	@ (8008060 <vPortFree+0xbc>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <vPortFree+0x46>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60fb      	str	r3, [r7, #12]
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <vPortFree+0x66>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60bb      	str	r3, [r7, #8]
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	4b14      	ldr	r3, [pc, #80]	@ (8008060 <vPortFree+0xbc>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4013      	ands	r3, r2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01e      	beq.n	8008056 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11a      	bne.n	8008056 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	4b0e      	ldr	r3, [pc, #56]	@ (8008060 <vPortFree+0xbc>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	43db      	mvns	r3, r3
 800802a:	401a      	ands	r2, r3
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008030:	f7fe fc48 	bl	80068c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	4b0a      	ldr	r3, [pc, #40]	@ (8008064 <vPortFree+0xc0>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4413      	add	r3, r2
 800803e:	4a09      	ldr	r2, [pc, #36]	@ (8008064 <vPortFree+0xc0>)
 8008040:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008042:	6938      	ldr	r0, [r7, #16]
 8008044:	f000 f874 	bl	8008130 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008048:	4b07      	ldr	r3, [pc, #28]	@ (8008068 <vPortFree+0xc4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	4a06      	ldr	r2, [pc, #24]	@ (8008068 <vPortFree+0xc4>)
 8008050:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008052:	f7fe fc45 	bl	80068e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008056:	bf00      	nop
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	2000927c 	.word	0x2000927c
 8008064:	2000926c 	.word	0x2000926c
 8008068:	20009278 	.word	0x20009278

0800806c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008076:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008078:	4b27      	ldr	r3, [pc, #156]	@ (8008118 <prvHeapInit+0xac>)
 800807a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00c      	beq.n	80080a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3307      	adds	r3, #7
 800808a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0307 	bic.w	r3, r3, #7
 8008092:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	4a1f      	ldr	r2, [pc, #124]	@ (8008118 <prvHeapInit+0xac>)
 800809c:	4413      	add	r3, r2
 800809e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080a4:	4a1d      	ldr	r2, [pc, #116]	@ (800811c <prvHeapInit+0xb0>)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080aa:	4b1c      	ldr	r3, [pc, #112]	@ (800811c <prvHeapInit+0xb0>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	4413      	add	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080b8:	2208      	movs	r2, #8
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0307 	bic.w	r3, r3, #7
 80080c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4a15      	ldr	r2, [pc, #84]	@ (8008120 <prvHeapInit+0xb4>)
 80080cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080ce:	4b14      	ldr	r3, [pc, #80]	@ (8008120 <prvHeapInit+0xb4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080d6:	4b12      	ldr	r3, [pc, #72]	@ (8008120 <prvHeapInit+0xb4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008120 <prvHeapInit+0xb4>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008124 <prvHeapInit+0xb8>)
 80080fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	4a09      	ldr	r2, [pc, #36]	@ (8008128 <prvHeapInit+0xbc>)
 8008102:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008104:	4b09      	ldr	r3, [pc, #36]	@ (800812c <prvHeapInit+0xc0>)
 8008106:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800810a:	601a      	str	r2, [r3, #0]
}
 800810c:	bf00      	nop
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	20001260 	.word	0x20001260
 800811c:	20009260 	.word	0x20009260
 8008120:	20009268 	.word	0x20009268
 8008124:	20009270 	.word	0x20009270
 8008128:	2000926c 	.word	0x2000926c
 800812c:	2000927c 	.word	0x2000927c

08008130 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008138:	4b28      	ldr	r3, [pc, #160]	@ (80081dc <prvInsertBlockIntoFreeList+0xac>)
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	e002      	b.n	8008144 <prvInsertBlockIntoFreeList+0x14>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d8f7      	bhi.n	800813e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	4413      	add	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	429a      	cmp	r2, r3
 800815e:	d108      	bne.n	8008172 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	441a      	add	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	441a      	add	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	429a      	cmp	r2, r3
 8008184:	d118      	bne.n	80081b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b15      	ldr	r3, [pc, #84]	@ (80081e0 <prvInsertBlockIntoFreeList+0xb0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d00d      	beq.n	80081ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	441a      	add	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	e008      	b.n	80081c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081ae:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <prvInsertBlockIntoFreeList+0xb0>)
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	e003      	b.n	80081c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d002      	beq.n	80081ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20009260 	.word	0x20009260
 80081e0:	20009268 	.word	0x20009268

080081e4 <memset>:
 80081e4:	4402      	add	r2, r0
 80081e6:	4603      	mov	r3, r0
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d100      	bne.n	80081ee <memset+0xa>
 80081ec:	4770      	bx	lr
 80081ee:	f803 1b01 	strb.w	r1, [r3], #1
 80081f2:	e7f9      	b.n	80081e8 <memset+0x4>

080081f4 <__libc_init_array>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	4d0d      	ldr	r5, [pc, #52]	@ (800822c <__libc_init_array+0x38>)
 80081f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008230 <__libc_init_array+0x3c>)
 80081fa:	1b64      	subs	r4, r4, r5
 80081fc:	10a4      	asrs	r4, r4, #2
 80081fe:	2600      	movs	r6, #0
 8008200:	42a6      	cmp	r6, r4
 8008202:	d109      	bne.n	8008218 <__libc_init_array+0x24>
 8008204:	4d0b      	ldr	r5, [pc, #44]	@ (8008234 <__libc_init_array+0x40>)
 8008206:	4c0c      	ldr	r4, [pc, #48]	@ (8008238 <__libc_init_array+0x44>)
 8008208:	f000 f826 	bl	8008258 <_init>
 800820c:	1b64      	subs	r4, r4, r5
 800820e:	10a4      	asrs	r4, r4, #2
 8008210:	2600      	movs	r6, #0
 8008212:	42a6      	cmp	r6, r4
 8008214:	d105      	bne.n	8008222 <__libc_init_array+0x2e>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	f855 3b04 	ldr.w	r3, [r5], #4
 800821c:	4798      	blx	r3
 800821e:	3601      	adds	r6, #1
 8008220:	e7ee      	b.n	8008200 <__libc_init_array+0xc>
 8008222:	f855 3b04 	ldr.w	r3, [r5], #4
 8008226:	4798      	blx	r3
 8008228:	3601      	adds	r6, #1
 800822a:	e7f2      	b.n	8008212 <__libc_init_array+0x1e>
 800822c:	08008300 	.word	0x08008300
 8008230:	08008300 	.word	0x08008300
 8008234:	08008300 	.word	0x08008300
 8008238:	08008304 	.word	0x08008304

0800823c <memcpy>:
 800823c:	440a      	add	r2, r1
 800823e:	4291      	cmp	r1, r2
 8008240:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008244:	d100      	bne.n	8008248 <memcpy+0xc>
 8008246:	4770      	bx	lr
 8008248:	b510      	push	{r4, lr}
 800824a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800824e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008252:	4291      	cmp	r1, r2
 8008254:	d1f9      	bne.n	800824a <memcpy+0xe>
 8008256:	bd10      	pop	{r4, pc}

08008258 <_init>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr

08008264 <_fini>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	bf00      	nop
 8008268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826a:	bc08      	pop	{r3}
 800826c:	469e      	mov	lr, r3
 800826e:	4770      	bx	lr
