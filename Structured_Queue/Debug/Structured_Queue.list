
Structured_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000559c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a0  080059a0  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a8  080059a8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080059b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000041bc  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000421c  2000421c  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117ee  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b47  00000000  00000000  0001887e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  0001b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c85  00000000  00000000  0001c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025726  00000000  00000000  0001d065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a12  00000000  00000000  0004278b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f79  00000000  00000000  0005519d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138116  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004768  00000000  00000000  0013815c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0013c8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005734 	.word	0x08005734

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08005734 	.word	0x08005734

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	2000007c 	.word	0x2000007c
 80005c0:	200000d0 	.word	0x200000d0

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fe0f 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f867 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8ff 	bl	80007d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 f8d3 	bl	8000780 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  St_Queue_Handler = xQueueCreate(2, sizeof(my_struct));
 80005da:	2200      	movs	r2, #0
 80005dc:	210c      	movs	r1, #12
 80005de:	2002      	movs	r0, #2
 80005e0:	f002 fdd4 	bl	800318c <xQueueGenericCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a21      	ldr	r2, [pc, #132]	@ (800066c <main+0xa8>)
 80005e8:	6013      	str	r3, [r2, #0]

  if (St_Queue_Handler == 0)
 80005ea:	4b20      	ldr	r3, [pc, #128]	@ (800066c <main+0xa8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10d      	bne.n	800060e <main+0x4a>
  {
	  char *str = "Unable to create Structured Queue \n \n\r";
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <main+0xac>)
 80005f4:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t *)str,strlen(str), HAL_MAX_DELAY);
 80005f6:	6838      	ldr	r0, [r7, #0]
 80005f8:	f7ff fdfa 	bl	80001f0 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000604:	6839      	ldr	r1, [r7, #0]
 8000606:	481b      	ldr	r0, [pc, #108]	@ (8000674 <main+0xb0>)
 8000608:	f002 f8e6 	bl	80027d8 <HAL_UART_Transmit>
 800060c:	e00c      	b.n	8000628 <main+0x64>
  }
  else
  {
	  char *str = "Structured Queue Created \n \n\r";
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <main+0xb4>)
 8000610:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)str,strlen(str), HAL_MAX_DELAY);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff fdec 	bl	80001f0 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4814      	ldr	r0, [pc, #80]	@ (8000674 <main+0xb0>)
 8000624:	f002 f8d8 	bl	80027d8 <HAL_UART_Transmit>
  }

  //************* Create Tasks *************///////////

  xTaskCreate(Sender1_Task, "SENDER1", 128, NULL, 2, &Sender1_Task_Handler);
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <main+0xb8>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	4912      	ldr	r1, [pc, #72]	@ (8000680 <main+0xbc>)
 8000636:	4813      	ldr	r0, [pc, #76]	@ (8000684 <main+0xc0>)
 8000638:	f003 f956 	bl	80038e8 <xTaskCreate>
  xTaskCreate(Sender2_Task, "SENDER2", 128, NULL, 2, &Sender2_Task_Handler);
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <main+0xc4>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	4910      	ldr	r1, [pc, #64]	@ (800068c <main+0xc8>)
 800064a:	4811      	ldr	r0, [pc, #68]	@ (8000690 <main+0xcc>)
 800064c:	f003 f94c 	bl	80038e8 <xTaskCreate>
  xTaskCreate(Receiver_Task, "RECEIVER", 128, NULL, 1, &Receiver_Task_Handler);
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <main+0xd0>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2301      	movs	r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	2280      	movs	r2, #128	@ 0x80
 800065c:	490e      	ldr	r1, [pc, #56]	@ (8000698 <main+0xd4>)
 800065e:	480f      	ldr	r0, [pc, #60]	@ (800069c <main+0xd8>)
 8000660:	f003 f942 	bl	80038e8 <xTaskCreate>

  /****Start Scheduler**********///

  vTaskStartScheduler();
 8000664:	f003 faae 	bl	8003bc4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <main+0xa4>
 800066c:	20000318 	.word	0x20000318
 8000670:	0800574c 	.word	0x0800574c
 8000674:	200002d0 	.word	0x200002d0
 8000678:	08005774 	.word	0x08005774
 800067c:	2000031c 	.word	0x2000031c
 8000680:	08005794 	.word	0x08005794
 8000684:	08000c89 	.word	0x08000c89
 8000688:	20000320 	.word	0x20000320
 800068c:	0800579c 	.word	0x0800579c
 8000690:	08000d49 	.word	0x08000d49
 8000694:	20000324 	.word	0x20000324
 8000698:	080057a4 	.word	0x080057a4
 800069c:	08000e0d 	.word	0x08000e0d

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	@ 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fbc0 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <SystemClock_Config+0xd8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000778 <SystemClock_Config+0xd8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <SystemClock_Config+0xd8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b25      	ldr	r3, [pc, #148]	@ (800077c <SystemClock_Config+0xdc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a24      	ldr	r2, [pc, #144]	@ (800077c <SystemClock_Config+0xdc>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <SystemClock_Config+0xdc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000714:	23b4      	movs	r3, #180	@ 0xb4
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f89b 	bl	8001860 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 fbce 	bl	8000ed0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000734:	f001 f844 	bl	80017c0 <HAL_PWREx_EnableOverDrive>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800073e:	f000 fbc7 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2105      	movs	r1, #5
 8000760:	4618      	mov	r0, r3
 8000762:	f001 faf5 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800076c:	f000 fbb0 	bl	8000ed0 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	@ 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <MX_USART1_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b8:	f001 ffbe 	bl	8002738 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 fb85 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200002d0 	.word	0x200002d0
 80007d0:	40011000 	.word	0x40011000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	@ 0x38
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
 80007ee:	4bb2      	ldr	r3, [pc, #712]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4ab1      	ldr	r2, [pc, #708]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4baf      	ldr	r3, [pc, #700]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	623b      	str	r3, [r7, #32]
 8000804:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	4bab      	ldr	r3, [pc, #684]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4aaa      	ldr	r2, [pc, #680]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4ba8      	ldr	r3, [pc, #672]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0320 	and.w	r3, r3, #32
 800081e:	61fb      	str	r3, [r7, #28]
 8000820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4ba4      	ldr	r3, [pc, #656]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4aa3      	ldr	r2, [pc, #652]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4ba1      	ldr	r3, [pc, #644]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b9d      	ldr	r3, [pc, #628]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a9c      	ldr	r2, [pc, #624]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b9a      	ldr	r3, [pc, #616]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b96      	ldr	r3, [pc, #600]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a95      	ldr	r2, [pc, #596]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b93      	ldr	r3, [pc, #588]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b8f      	ldr	r3, [pc, #572]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a8e      	ldr	r2, [pc, #568]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b8c      	ldr	r3, [pc, #560]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b88      	ldr	r3, [pc, #544]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a87      	ldr	r2, [pc, #540]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b85      	ldr	r3, [pc, #532]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b81      	ldr	r3, [pc, #516]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a80      	ldr	r2, [pc, #512]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b7e      	ldr	r3, [pc, #504]	@ (8000ab8 <MX_GPIO_Init+0x2e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2116      	movs	r1, #22
 80008ce:	487b      	ldr	r0, [pc, #492]	@ (8000abc <MX_GPIO_Init+0x2e8>)
 80008d0:	f000 ff5c 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2180      	movs	r1, #128	@ 0x80
 80008d8:	4879      	ldr	r0, [pc, #484]	@ (8000ac0 <MX_GPIO_Init+0x2ec>)
 80008da:	f000 ff57 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80008e4:	4877      	ldr	r0, [pc, #476]	@ (8000ac4 <MX_GPIO_Init+0x2f0>)
 80008e6:	f000 ff51 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80008f0:	4875      	ldr	r0, [pc, #468]	@ (8000ac8 <MX_GPIO_Init+0x2f4>)
 80008f2:	f000 ff4b 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008f6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000908:	230c      	movs	r3, #12
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	486e      	ldr	r0, [pc, #440]	@ (8000acc <MX_GPIO_Init+0x2f8>)
 8000914:	f000 fd8e 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000918:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800092a:	2305      	movs	r3, #5
 800092c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	4865      	ldr	r0, [pc, #404]	@ (8000acc <MX_GPIO_Init+0x2f8>)
 8000936:	f000 fd7d 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800093a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800094c:	230e      	movs	r3, #14
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	485d      	ldr	r0, [pc, #372]	@ (8000acc <MX_GPIO_Init+0x2f8>)
 8000958:	f000 fd6c 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800095c:	2301      	movs	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800096c:	230c      	movs	r3, #12
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4851      	ldr	r0, [pc, #324]	@ (8000abc <MX_GPIO_Init+0x2e8>)
 8000978:	f000 fd5c 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800097c:	2316      	movs	r3, #22
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	484a      	ldr	r0, [pc, #296]	@ (8000abc <MX_GPIO_Init+0x2e8>)
 8000994:	f000 fd4e 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000998:	f248 0307 	movw	r3, #32775	@ 0x8007
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4844      	ldr	r0, [pc, #272]	@ (8000ac0 <MX_GPIO_Init+0x2ec>)
 80009b0:	f000 fd40 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80009b4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c6:	230e      	movs	r3, #14
 80009c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <MX_GPIO_Init+0x2ec>)
 80009d2:	f000 fd2f 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	4834      	ldr	r0, [pc, #208]	@ (8000ac0 <MX_GPIO_Init+0x2ec>)
 80009ee:	f000 fd21 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	482d      	ldr	r0, [pc, #180]	@ (8000abc <MX_GPIO_Init+0x2e8>)
 8000a08:	f000 fd14 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a1c:	2309      	movs	r3, #9
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	482a      	ldr	r0, [pc, #168]	@ (8000ad0 <MX_GPIO_Init+0x2fc>)
 8000a28:	f000 fd04 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4824      	ldr	r0, [pc, #144]	@ (8000ad0 <MX_GPIO_Init+0x2fc>)
 8000a40:	f000 fcf8 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a44:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a56:	230c      	movs	r3, #12
 8000a58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <MX_GPIO_Init+0x2f4>)
 8000a62:	f000 fce7 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a66:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	4814      	ldr	r0, [pc, #80]	@ (8000ad4 <MX_GPIO_Init+0x300>)
 8000a84:	f000 fcd6 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a88:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a9a:	230e      	movs	r3, #14
 8000a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480a      	ldr	r0, [pc, #40]	@ (8000ad0 <MX_GPIO_Init+0x2fc>)
 8000aa6:	f000 fcc5 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000aaa:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ab4:	e010      	b.n	8000ad8 <MX_GPIO_Init+0x304>
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40021400 	.word	0x40021400
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4862      	ldr	r0, [pc, #392]	@ (8000c74 <MX_GPIO_Init+0x4a0>)
 8000aec:	f000 fca2 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	485b      	ldr	r0, [pc, #364]	@ (8000c74 <MX_GPIO_Init+0x4a0>)
 8000b06:	f000 fc95 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b0a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	4854      	ldr	r0, [pc, #336]	@ (8000c78 <MX_GPIO_Init+0x4a4>)
 8000b28:	f000 fc84 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	484d      	ldr	r0, [pc, #308]	@ (8000c78 <MX_GPIO_Init+0x4a4>)
 8000b42:	f000 fc77 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b46:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4846      	ldr	r0, [pc, #280]	@ (8000c78 <MX_GPIO_Init+0x4a4>)
 8000b60:	f000 fc68 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b64:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b76:	230e      	movs	r3, #14
 8000b78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	483e      	ldr	r0, [pc, #248]	@ (8000c7c <MX_GPIO_Init+0x4a8>)
 8000b82:	f000 fc57 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b86:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b98:	230e      	movs	r3, #14
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4837      	ldr	r0, [pc, #220]	@ (8000c80 <MX_GPIO_Init+0x4ac>)
 8000ba4:	f000 fc46 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	482e      	ldr	r0, [pc, #184]	@ (8000c80 <MX_GPIO_Init+0x4ac>)
 8000bc6:	f000 fc35 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4827      	ldr	r0, [pc, #156]	@ (8000c84 <MX_GPIO_Init+0x4b0>)
 8000be8:	f000 fc24 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bec:	2348      	movs	r3, #72	@ 0x48
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bfc:	230e      	movs	r3, #14
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <MX_GPIO_Init+0x4a4>)
 8000c08:	f000 fc14 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c1e:	2309      	movs	r3, #9
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4814      	ldr	r0, [pc, #80]	@ (8000c7c <MX_GPIO_Init+0x4a8>)
 8000c2a:	f000 fc03 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c2e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_GPIO_Init+0x4a8>)
 8000c48:	f000 fbf4 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c4c:	2360      	movs	r3, #96	@ 0x60
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <MX_GPIO_Init+0x4a0>)
 8000c68:	f000 fbe4 	bl	8001434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3738      	adds	r7, #56	@ 0x38
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020c00 	.word	0x40020c00
 8000c7c:	40021800 	.word	0x40021800
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020000 	.word	0x40020000

08000c88 <Sender1_Task>:

/* USER CODE BEGIN 4 */


void Sender1_Task (void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;

	uint32_t Tickdelay = pdMS_TO_TICKS(2000);
 8000c90:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c94:	617b      	str	r3, [r7, #20]

	while(1)
	{
		char *str = "Entered SENDER1 TASK \n about to send to the queue \n \r";
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <Sender1_Task+0xa8>)
 8000c98:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000c9a:	6938      	ldr	r0, [r7, #16]
 8000c9c:	f7ff faa8 	bl	80001f0 <strlen>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca8:	6939      	ldr	r1, [r7, #16]
 8000caa:	4822      	ldr	r0, [pc, #136]	@ (8000d34 <Sender1_Task+0xac>)
 8000cac:	f001 fd94 	bl	80027d8 <HAL_UART_Transmit>

		/********** Allocate Memory ************////

		ptrtostruct = pvPortMalloc(sizeof (my_struct));
 8000cb0:	200c      	movs	r0, #12
 8000cb2:	f003 feb1 	bl	8004a18 <pvPortMalloc>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	60bb      	str	r3, [r7, #8]

		// ******** Load the DATA ******/////

		ptrtostruct -> counter = 1*indx1;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8000d38 <Sender1_Task+0xb0>)
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
		ptrtostruct -> large_value = 1000 + indx1*100;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <Sender1_Task+0xb0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	461a      	mov	r2, r3
 8000cd0:	0091      	lsls	r1, r2, #2
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 8000ce2:	b292      	uxth	r2, r2
 8000ce4:	811a      	strh	r2, [r3, #8]
		ptrtostruct -> str = "HEllO from SENDER1 \n \r";
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <Sender1_Task+0xb4>)
 8000cea:	601a      	str	r2, [r3, #0]

		// ********* Send to the Queue ***********////

		if ( xQueueSend(St_Queue_Handler, &ptrtostruct, portMAX_DELAY) == pdPASS)
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <Sender1_Task+0xb8>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	f107 0108 	add.w	r1, r7, #8
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cfa:	f002 faa1 	bl	8003240 <xQueueGenericSend>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10c      	bne.n	8000d1e <Sender1_Task+0x96>
		{
			char *str2 = "Successfully sent to the queue \n Leaving SENDER1 TASK \n \r";
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <Sender1_Task+0xbc>)
 8000d06:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str2), HAL_MAX_DELAY);
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fa71 	bl	80001f0 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d16:	6939      	ldr	r1, [r7, #16]
 8000d18:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <Sender1_Task+0xac>)
 8000d1a:	f001 fd5d 	bl	80027d8 <HAL_UART_Transmit>
		}

		indx1 = indx1+1;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <Sender1_Task+0xb0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <Sender1_Task+0xb0>)
 8000d26:	6013      	str	r3, [r2, #0]
		vTaskDelay(Tickdelay);
 8000d28:	6978      	ldr	r0, [r7, #20]
 8000d2a:	f002 ff15 	bl	8003b58 <vTaskDelay>
	{
 8000d2e:	e7b2      	b.n	8000c96 <Sender1_Task+0xe>
 8000d30:	080057b0 	.word	0x080057b0
 8000d34:	200002d0 	.word	0x200002d0
 8000d38:	20000328 	.word	0x20000328
 8000d3c:	080057e8 	.word	0x080057e8
 8000d40:	20000318 	.word	0x20000318
 8000d44:	08005800 	.word	0x08005800

08000d48 <Sender2_Task>:
	}
}
void Sender2_Task (void *argument)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
		my_struct *ptrtostruct;

		uint32_t Tickdelay = pdMS_TO_TICKS(2000);
 8000d50:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d54:	617b      	str	r3, [r7, #20]

		while(1)
		{
			char *str = "Entered SENDER2 TASK \n about to send to the queue \n \r";
 8000d56:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <Sender2_Task+0xac>)
 8000d58:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000d5a:	6938      	ldr	r0, [r7, #16]
 8000d5c:	f7ff fa48 	bl	80001f0 <strlen>
 8000d60:	4603      	mov	r3, r0
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d68:	6939      	ldr	r1, [r7, #16]
 8000d6a:	4823      	ldr	r0, [pc, #140]	@ (8000df8 <Sender2_Task+0xb0>)
 8000d6c:	f001 fd34 	bl	80027d8 <HAL_UART_Transmit>

			/********** Allocate Memory ************////

			ptrtostruct = pvPortMalloc(sizeof (my_struct));
 8000d70:	200c      	movs	r0, #12
 8000d72:	f003 fe51 	bl	8004a18 <pvPortMalloc>
 8000d76:	4603      	mov	r3, r0
 8000d78:	60bb      	str	r3, [r7, #8]

			// ******** Load the DATA ******/////

			ptrtostruct -> counter = 1 + indx2;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <Sender2_Task+0xb4>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	3201      	adds	r2, #1
 8000d82:	605a      	str	r2, [r3, #4]
			ptrtostruct -> large_value = 2000 + indx2*200;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <Sender2_Task+0xb4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	0091      	lsls	r1, r2, #2
 8000d94:	461a      	mov	r2, r3
 8000d96:	460b      	mov	r3, r1
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 8000da4:	b292      	uxth	r2, r2
 8000da6:	811a      	strh	r2, [r3, #8]
			ptrtostruct -> str = "HEllO from SENDER2 \n \r";
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4a15      	ldr	r2, [pc, #84]	@ (8000e00 <Sender2_Task+0xb8>)
 8000dac:	601a      	str	r2, [r3, #0]

			// ********* Send to the Queue ***********////

			if ( xQueueSend(St_Queue_Handler, &ptrtostruct, portMAX_DELAY) == pdPASS)
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <Sender2_Task+0xbc>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	f107 0108 	add.w	r1, r7, #8
 8000db6:	2300      	movs	r3, #0
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dbc:	f002 fa40 	bl	8003240 <xQueueGenericSend>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10c      	bne.n	8000de0 <Sender2_Task+0x98>
			{
				char *str2 = "Successfully sent to the queue \n Leaving SENDER2 TASK \n \r";
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <Sender2_Task+0xc0>)
 8000dc8:	60fb      	str	r3, [r7, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str2), HAL_MAX_DELAY);
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fa10 	bl	80001f0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd8:	6939      	ldr	r1, [r7, #16]
 8000dda:	4807      	ldr	r0, [pc, #28]	@ (8000df8 <Sender2_Task+0xb0>)
 8000ddc:	f001 fcfc 	bl	80027d8 <HAL_UART_Transmit>
			}

			indx2 = indx2+1;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <Sender2_Task+0xb4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <Sender2_Task+0xb4>)
 8000de8:	6013      	str	r3, [r2, #0]
			vTaskDelay(Tickdelay);
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f002 feb4 	bl	8003b58 <vTaskDelay>
		{
 8000df0:	e7b1      	b.n	8000d56 <Sender2_Task+0xe>
 8000df2:	bf00      	nop
 8000df4:	0800583c 	.word	0x0800583c
 8000df8:	200002d0 	.word	0x200002d0
 8000dfc:	2000032c 	.word	0x2000032c
 8000e00:	08005874 	.word	0x08005874
 8000e04:	20000318 	.word	0x20000318
 8000e08:	0800588c 	.word	0x0800588c

08000e0c <Receiver_Task>:
		}
}

void Receiver_Task (void *argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
	my_struct *Rptrtostruct;
	uint32_t Tickdelay = pdMS_TO_TICKS(3000);
 8000e14:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000e18:	617b      	str	r3, [r7, #20]
	char *ptr;

	while (1)
		{
			char *str = "Entered RECEIVER Task\n about to RECEIVE FROM the queue\n\n \r";
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <Receiver_Task+0x90>)
 8000e1c:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000e1e:	6938      	ldr	r0, [r7, #16]
 8000e20:	f7ff f9e6 	bl	80001f0 <strlen>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e2c:	6939      	ldr	r1, [r7, #16]
 8000e2e:	481c      	ldr	r0, [pc, #112]	@ (8000ea0 <Receiver_Task+0x94>)
 8000e30:	f001 fcd2 	bl	80027d8 <HAL_UART_Transmit>

			/**** RECEIVE FROM QUEUE *****/
			if (xQueueReceive(St_Queue_Handler, &Rptrtostruct, portMAX_DELAY) == pdPASS)
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <Receiver_Task+0x98>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f107 0108 	add.w	r1, r7, #8
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 faff 	bl	8003444 <xQueueReceive>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d11e      	bne.n	8000e8a <Receiver_Task+0x7e>
			{
				ptr = pvPortMalloc(100 * sizeof (char)); // allocate memory for the string
 8000e4c:	2064      	movs	r0, #100	@ 0x64
 8000e4e:	f003 fde3 	bl	8004a18 <pvPortMalloc>
 8000e52:	60f8      	str	r0, [r7, #12]

				sprintf (ptr, "Received from QUEUE:\n \r COUNTER = %d\n LARGE VALUE = %u\n STRING = %s\n\n\n",Rptrtostruct->counter,Rptrtostruct->large_value, Rptrtostruct->str);
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	891b      	ldrh	r3, [r3, #8]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	460b      	mov	r3, r1
 8000e66:	4910      	ldr	r1, [pc, #64]	@ (8000ea8 <Receiver_Task+0x9c>)
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f003 ffc3 	bl	8004df4 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)ptr, strlen(ptr), HAL_MAX_DELAY);
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff f9be 	bl	80001f0 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e7c:	68f9      	ldr	r1, [r7, #12]
 8000e7e:	4808      	ldr	r0, [pc, #32]	@ (8000ea0 <Receiver_Task+0x94>)
 8000e80:	f001 fcaa 	bl	80027d8 <HAL_UART_Transmit>

				vPortFree(ptr);  // free the string memory
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f003 fe95 	bl	8004bb4 <vPortFree>
			}

			vPortFree(Rptrtostruct);  // free the structure memory
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fe91 	bl	8004bb4 <vPortFree>

			vTaskDelay(Tickdelay);
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f002 fe60 	bl	8003b58 <vTaskDelay>
		{
 8000e98:	e7bf      	b.n	8000e1a <Receiver_Task+0xe>
 8000e9a:	bf00      	nop
 8000e9c:	080058c8 	.word	0x080058c8
 8000ea0:	200002d0 	.word	0x200002d0
 8000ea4:	20000318 	.word	0x20000318
 8000ea8:	08005904 	.word	0x08005904

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ebe:	f000 f9b7 	bl	8001230 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40000c00 	.word	0x40000c00

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_MspInit+0x54>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <HAL_MspInit+0x54>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_MspInit+0x54>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <HAL_MspInit+0x54>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <HAL_MspInit+0x54>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <HAL_MspInit+0x54>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	f06f 0001 	mvn.w	r0, #1
 8000f22:	f000 fa5d 	bl	80013e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a19      	ldr	r2, [pc, #100]	@ (8000fb8 <HAL_UART_MspInit+0x84>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12c      	bne.n	8000fb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <HAL_UART_MspInit+0x88>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	4a17      	ldr	r2, [pc, #92]	@ (8000fbc <HAL_UART_MspInit+0x88>)
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_UART_MspInit+0x88>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <HAL_UART_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a10      	ldr	r2, [pc, #64]	@ (8000fbc <HAL_UART_MspInit+0x88>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_UART_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000fac:	f000 fa42 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	@ 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	@ 0x38
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4b33      	ldr	r3, [pc, #204]	@ (80010a8 <HAL_InitTick+0xe4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a32      	ldr	r2, [pc, #200]	@ (80010a8 <HAL_InitTick+0xe4>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b30      	ldr	r3, [pc, #192]	@ (80010a8 <HAL_InitTick+0xe4>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff0:	f107 0210 	add.w	r2, r7, #16
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 f8c8 	bl	8002190 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800100a:	f001 f899 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 800100e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001010:	e004      	b.n	800101c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001012:	f001 f895 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8001016:	4603      	mov	r3, r0
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800101c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101e:	4a23      	ldr	r2, [pc, #140]	@ (80010ac <HAL_InitTick+0xe8>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9b      	lsrs	r3, r3, #18
 8001026:	3b01      	subs	r3, #1
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800102a:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <HAL_InitTick+0xec>)
 800102c:	4a21      	ldr	r2, [pc, #132]	@ (80010b4 <HAL_InitTick+0xf0>)
 800102e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001030:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <HAL_InitTick+0xec>)
 8001032:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001036:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001038:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <HAL_InitTick+0xec>)
 800103a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800103e:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <HAL_InitTick+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <HAL_InitTick+0xec>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_InitTick+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001050:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <HAL_InitTick+0xec>)
 8001052:	f001 f8cf 	bl	80021f4 <HAL_TIM_Base_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800105c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001060:	2b00      	cmp	r3, #0
 8001062:	d11b      	bne.n	800109c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001064:	4812      	ldr	r0, [pc, #72]	@ (80010b0 <HAL_InitTick+0xec>)
 8001066:	f001 f91f 	bl	80022a8 <HAL_TIM_Base_Start_IT>
 800106a:	4603      	mov	r3, r0
 800106c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001070:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001074:	2b00      	cmp	r3, #0
 8001076:	d111      	bne.n	800109c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001078:	2032      	movs	r0, #50	@ 0x32
 800107a:	f000 f9cd 	bl	8001418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d808      	bhi.n	8001096 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	2032      	movs	r0, #50	@ 0x32
 800108a:	f000 f9a9 	bl	80013e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_InitTick+0xf4>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	e002      	b.n	800109c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3738      	adds	r7, #56	@ 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	431bde83 	.word	0x431bde83
 80010b0:	20000330 	.word	0x20000330
 80010b4:	40000c00 	.word	0x40000c00
 80010b8:	20000004 	.word	0x20000004

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <NMI_Handler+0x4>

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <MemManage_Handler+0x4>

080010d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <TIM5_IRQHandler+0x10>)
 80010fa:	f001 f945 	bl	8002388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000330 	.word	0x20000330

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f003 fe84 	bl	8004e44 <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20030000 	.word	0x20030000
 8001168:	00000400 	.word	0x00000400
 800116c:	20000378 	.word	0x20000378
 8001170:	20004220 	.word	0x20004220

08001174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119c:	f7ff ffea 	bl	8001174 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f003 fe43 	bl	8004e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff f9fb 	bl	80005c4 <main>
  bx  lr    
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011dc:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 80011e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011e4:	2000421c 	.word	0x2000421c

080011e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <HAL_Init+0x40>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_Init+0x40>)
 8001202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	@ (800122c <HAL_Init+0x40>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f8d8 	bl	80013ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	200f      	movs	r0, #15
 800121c:	f7ff fed2 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fe5c 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023c00 	.word	0x40023c00

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008
 8001254:	2000037c 	.word	0x2000037c

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000037c 	.word	0x2000037c

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	@ (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	@ (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	@ (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff4c 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f2:	f7ff ff61 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 80013f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f7ff ffb1 	bl	8001364 <NVIC_EncodePriority>
 8001402:	4602      	mov	r2, r0
 8001404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff80 	bl	8001310 <__NVIC_SetPriority>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff54 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e177      	b.n	8001740 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8166 	bne.w	800173a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d005      	beq.n	8001486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	2b02      	cmp	r3, #2
 8001484:	d130      	bne.n	80014e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80c0 	beq.w	800173a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b66      	ldr	r3, [pc, #408]	@ (8001758 <HAL_GPIO_Init+0x324>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	4a65      	ldr	r2, [pc, #404]	@ (8001758 <HAL_GPIO_Init+0x324>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ca:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <HAL_GPIO_Init+0x324>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a61      	ldr	r2, [pc, #388]	@ (800175c <HAL_GPIO_Init+0x328>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a58      	ldr	r2, [pc, #352]	@ (8001760 <HAL_GPIO_Init+0x32c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d037      	beq.n	8001672 <HAL_GPIO_Init+0x23e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a57      	ldr	r2, [pc, #348]	@ (8001764 <HAL_GPIO_Init+0x330>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d031      	beq.n	800166e <HAL_GPIO_Init+0x23a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a56      	ldr	r2, [pc, #344]	@ (8001768 <HAL_GPIO_Init+0x334>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d02b      	beq.n	800166a <HAL_GPIO_Init+0x236>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a55      	ldr	r2, [pc, #340]	@ (800176c <HAL_GPIO_Init+0x338>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d025      	beq.n	8001666 <HAL_GPIO_Init+0x232>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a54      	ldr	r2, [pc, #336]	@ (8001770 <HAL_GPIO_Init+0x33c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01f      	beq.n	8001662 <HAL_GPIO_Init+0x22e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a53      	ldr	r2, [pc, #332]	@ (8001774 <HAL_GPIO_Init+0x340>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d019      	beq.n	800165e <HAL_GPIO_Init+0x22a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a52      	ldr	r2, [pc, #328]	@ (8001778 <HAL_GPIO_Init+0x344>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x226>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a51      	ldr	r2, [pc, #324]	@ (800177c <HAL_GPIO_Init+0x348>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x222>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a50      	ldr	r2, [pc, #320]	@ (8001780 <HAL_GPIO_Init+0x34c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x21e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4f      	ldr	r2, [pc, #316]	@ (8001784 <HAL_GPIO_Init+0x350>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x21a>
 800164a:	2309      	movs	r3, #9
 800164c:	e012      	b.n	8001674 <HAL_GPIO_Init+0x240>
 800164e:	230a      	movs	r3, #10
 8001650:	e010      	b.n	8001674 <HAL_GPIO_Init+0x240>
 8001652:	2308      	movs	r3, #8
 8001654:	e00e      	b.n	8001674 <HAL_GPIO_Init+0x240>
 8001656:	2307      	movs	r3, #7
 8001658:	e00c      	b.n	8001674 <HAL_GPIO_Init+0x240>
 800165a:	2306      	movs	r3, #6
 800165c:	e00a      	b.n	8001674 <HAL_GPIO_Init+0x240>
 800165e:	2305      	movs	r3, #5
 8001660:	e008      	b.n	8001674 <HAL_GPIO_Init+0x240>
 8001662:	2304      	movs	r3, #4
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x240>
 8001666:	2303      	movs	r3, #3
 8001668:	e004      	b.n	8001674 <HAL_GPIO_Init+0x240>
 800166a:	2302      	movs	r3, #2
 800166c:	e002      	b.n	8001674 <HAL_GPIO_Init+0x240>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x240>
 8001672:	2300      	movs	r3, #0
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f002 0203 	and.w	r2, r2, #3
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	4093      	lsls	r3, r2
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001684:	4935      	ldr	r1, [pc, #212]	@ (800175c <HAL_GPIO_Init+0x328>)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001692:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_GPIO_Init+0x354>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b6:	4a34      	ldr	r2, [pc, #208]	@ (8001788 <HAL_GPIO_Init+0x354>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016bc:	4b32      	ldr	r3, [pc, #200]	@ (8001788 <HAL_GPIO_Init+0x354>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e0:	4a29      	ldr	r2, [pc, #164]	@ (8001788 <HAL_GPIO_Init+0x354>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e6:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <HAL_GPIO_Init+0x354>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170a:	4a1f      	ldr	r2, [pc, #124]	@ (8001788 <HAL_GPIO_Init+0x354>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001710:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_GPIO_Init+0x354>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001734:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <HAL_GPIO_Init+0x354>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3301      	adds	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	f67f ae84 	bls.w	8001450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40013800 	.word	0x40013800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	40020c00 	.word	0x40020c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40021400 	.word	0x40021400
 8001778:	40021800 	.word	0x40021800
 800177c:	40021c00 	.word	0x40021c00
 8001780:	40022000 	.word	0x40022000
 8001784:	40022400 	.word	0x40022400
 8001788:	40013c00 	.word	0x40013c00

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <HAL_PWREx_EnableOverDrive+0x90>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001850 <HAL_PWREx_EnableOverDrive+0x90>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <HAL_PWREx_EnableOverDrive+0x90>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_PWREx_EnableOverDrive+0x94>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ec:	f7ff fd34 	bl	8001258 <HAL_GetTick>
 80017f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017f2:	e009      	b.n	8001808 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017f4:	f7ff fd30 	bl	8001258 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001802:	d901      	bls.n	8001808 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e01f      	b.n	8001848 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <HAL_PWREx_EnableOverDrive+0x98>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001814:	d1ee      	bne.n	80017f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181c:	f7ff fd1c 	bl	8001258 <HAL_GetTick>
 8001820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001822:	e009      	b.n	8001838 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001824:	f7ff fd18 	bl	8001258 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001832:	d901      	bls.n	8001838 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e007      	b.n	8001848 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001838:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <HAL_PWREx_EnableOverDrive+0x98>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001844:	d1ee      	bne.n	8001824 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	420e0040 	.word	0x420e0040
 8001858:	40007000 	.word	0x40007000
 800185c:	420e0044 	.word	0x420e0044

08001860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e267      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d075      	beq.n	800196a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800187e:	4b88      	ldr	r3, [pc, #544]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b04      	cmp	r3, #4
 8001888:	d00c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b85      	ldr	r3, [pc, #532]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001892:	2b08      	cmp	r3, #8
 8001894:	d112      	bne.n	80018bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001896:	4b82      	ldr	r3, [pc, #520]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018a2:	d10b      	bne.n	80018bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d05b      	beq.n	8001968 <HAL_RCC_OscConfig+0x108>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d157      	bne.n	8001968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e242      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x74>
 80018c6:	4b76      	ldr	r3, [pc, #472]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a75      	ldr	r2, [pc, #468]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0xb0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x98>
 80018de:	4b70      	ldr	r3, [pc, #448]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6f      	ldr	r2, [pc, #444]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6c      	ldr	r2, [pc, #432]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0xb0>
 80018f8:	4b69      	ldr	r3, [pc, #420]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a68      	ldr	r2, [pc, #416]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b66      	ldr	r3, [pc, #408]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a65      	ldr	r2, [pc, #404]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fc9e 	bl	8001258 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fc9a 	bl	8001258 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	@ 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e207      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xc0>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fc8a 	bl	8001258 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fc86 	bl	8001258 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	@ 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1f3      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	4b51      	ldr	r3, [pc, #324]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0xe8>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d063      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001976:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b47      	ldr	r3, [pc, #284]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d11c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198e:	4b44      	ldr	r3, [pc, #272]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d116      	bne.n	80019c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	4b41      	ldr	r3, [pc, #260]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x152>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1c7      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4937      	ldr	r1, [pc, #220]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e03a      	b.n	8001a3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <HAL_RCC_OscConfig+0x244>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff fc3f 	bl	8001258 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff fc3b 	bl	8001258 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1a8      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b28      	ldr	r3, [pc, #160]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4925      	ldr	r1, [pc, #148]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_RCC_OscConfig+0x244>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fc1e 	bl	8001258 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff fc1a 	bl	8001258 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e187      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d036      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_RCC_OscConfig+0x248>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff fbfe 	bl	8001258 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff fbfa 	bl	8001258 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e167      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x200>
 8001a7e:	e01b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_RCC_OscConfig+0x248>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fbe7 	bl	8001258 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	e00e      	b.n	8001aac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fbe3 	bl	8001258 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d907      	bls.n	8001aac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e150      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	42470000 	.word	0x42470000
 8001aa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b88      	ldr	r3, [pc, #544]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ea      	bne.n	8001a8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8097 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b81      	ldr	r3, [pc, #516]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	4a7c      	ldr	r2, [pc, #496]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae6:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af6:	4b77      	ldr	r3, [pc, #476]	@ (8001cd4 <HAL_RCC_OscConfig+0x474>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b02:	4b74      	ldr	r3, [pc, #464]	@ (8001cd4 <HAL_RCC_OscConfig+0x474>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a73      	ldr	r2, [pc, #460]	@ (8001cd4 <HAL_RCC_OscConfig+0x474>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fba3 	bl	8001258 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7ff fb9f 	bl	8001258 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e10c      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <HAL_RCC_OscConfig+0x474>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2ea>
 8001b3c:	4b64      	ldr	r3, [pc, #400]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b40:	4a63      	ldr	r2, [pc, #396]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x324>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x30c>
 8001b52:	4b5f      	ldr	r3, [pc, #380]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b56:	4a5e      	ldr	r2, [pc, #376]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b62:	4a5b      	ldr	r2, [pc, #364]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x324>
 8001b6c:	4b58      	ldr	r3, [pc, #352]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b70:	4a57      	ldr	r2, [pc, #348]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b78:	4b55      	ldr	r3, [pc, #340]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7c:	4a54      	ldr	r2, [pc, #336]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	f023 0304 	bic.w	r3, r3, #4
 8001b82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d015      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fb64 	bl	8001258 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff fb60 	bl	8001258 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0cb      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	4b49      	ldr	r3, [pc, #292]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ee      	beq.n	8001b94 <HAL_RCC_OscConfig+0x334>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fb4e 	bl	8001258 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fb4a 	bl	8001258 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e0b5      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b39      	ldr	r3, [pc, #228]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	4a38      	ldr	r2, [pc, #224]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a1 	beq.w	8001d40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d05c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d141      	bne.n	8001c96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <HAL_RCC_OscConfig+0x478>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fb1e 	bl	8001258 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff fb1a 	bl	8001258 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e087      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	3b01      	subs	r3, #1
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	491b      	ldr	r1, [pc, #108]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_RCC_OscConfig+0x478>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff faf3 	bl	8001258 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c76:	f7ff faef 	bl	8001258 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e05c      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x416>
 8001c94:	e054      	b.n	8001d40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_RCC_OscConfig+0x478>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fadc 	bl	8001258 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff fad8 	bl	8001258 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e045      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x444>
 8001cc2:	e03d      	b.n	8001d40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e038      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <HAL_RCC_OscConfig+0x4ec>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d028      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d121      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d11a      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	3b01      	subs	r3, #1
 8001d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0cc      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b68      	ldr	r3, [pc, #416]	@ (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d90c      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b65      	ldr	r3, [pc, #404]	@ (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b63      	ldr	r3, [pc, #396]	@ (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b8      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da4:	4b59      	ldr	r3, [pc, #356]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a58      	ldr	r2, [pc, #352]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dbc:	4b53      	ldr	r3, [pc, #332]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b50      	ldr	r3, [pc, #320]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	494d      	ldr	r1, [pc, #308]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d044      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d119      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e067      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b37      	ldr	r3, [pc, #220]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4934      	ldr	r1, [pc, #208]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e40:	f7ff fa0a 	bl	8001258 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff fa06 	bl	8001258 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e04f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d20c      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e032      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4916      	ldr	r1, [pc, #88]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec2:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	490e      	ldr	r1, [pc, #56]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ed6:	f000 f821 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001eda:	4602      	mov	r2, r0
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	490a      	ldr	r1, [pc, #40]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	5ccb      	ldrb	r3, [r1, r3]
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	4a09      	ldr	r2, [pc, #36]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f864 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	08005954 	.word	0x08005954
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f20:	b094      	sub	sp, #80	@ 0x50
 8001f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f28:	2300      	movs	r3, #0
 8001f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f34:	4b79      	ldr	r3, [pc, #484]	@ (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d00d      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x40>
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	f200 80e1 	bhi.w	8002108 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x34>
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f4e:	e0db      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b73      	ldr	r3, [pc, #460]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f52:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001f54:	e0db      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f56:	4b73      	ldr	r3, [pc, #460]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f5a:	e0d8      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f64:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f66:	4b6d      	ldr	r3, [pc, #436]	@ (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b6a      	ldr	r3, [pc, #424]	@ (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	2200      	movs	r2, #0
 8001f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f86:	2300      	movs	r3, #0
 8001f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f8e:	4622      	mov	r2, r4
 8001f90:	462b      	mov	r3, r5
 8001f92:	f04f 0000 	mov.w	r0, #0
 8001f96:	f04f 0100 	mov.w	r1, #0
 8001f9a:	0159      	lsls	r1, r3, #5
 8001f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa0:	0150      	lsls	r0, r2, #5
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	1a51      	subs	r1, r2, r1
 8001faa:	6139      	str	r1, [r7, #16]
 8001fac:	4629      	mov	r1, r5
 8001fae:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fc0:	4659      	mov	r1, fp
 8001fc2:	018b      	lsls	r3, r1, #6
 8001fc4:	4651      	mov	r1, sl
 8001fc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fca:	4651      	mov	r1, sl
 8001fcc:	018a      	lsls	r2, r1, #6
 8001fce:	4651      	mov	r1, sl
 8001fd0:	ebb2 0801 	subs.w	r8, r2, r1
 8001fd4:	4659      	mov	r1, fp
 8001fd6:	eb63 0901 	sbc.w	r9, r3, r1
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fee:	4690      	mov	r8, r2
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	eb18 0303 	adds.w	r3, r8, r3
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	462b      	mov	r3, r5
 8001ffc:	eb49 0303 	adc.w	r3, r9, r3
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800200e:	4629      	mov	r1, r5
 8002010:	024b      	lsls	r3, r1, #9
 8002012:	4621      	mov	r1, r4
 8002014:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002018:	4621      	mov	r1, r4
 800201a:	024a      	lsls	r2, r1, #9
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002022:	2200      	movs	r2, #0
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800202c:	f7fe f938 	bl	80002a0 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4613      	mov	r3, r2
 8002036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002038:	e058      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203a:	4b38      	ldr	r3, [pc, #224]	@ (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	099b      	lsrs	r3, r3, #6
 8002040:	2200      	movs	r2, #0
 8002042:	4618      	mov	r0, r3
 8002044:	4611      	mov	r1, r2
 8002046:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002050:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002054:	4642      	mov	r2, r8
 8002056:	464b      	mov	r3, r9
 8002058:	f04f 0000 	mov.w	r0, #0
 800205c:	f04f 0100 	mov.w	r1, #0
 8002060:	0159      	lsls	r1, r3, #5
 8002062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002066:	0150      	lsls	r0, r2, #5
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4641      	mov	r1, r8
 800206e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002072:	4649      	mov	r1, r9
 8002074:	eb63 0b01 	sbc.w	fp, r3, r1
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002084:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002088:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800208c:	ebb2 040a 	subs.w	r4, r2, sl
 8002090:	eb63 050b 	sbc.w	r5, r3, fp
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	00eb      	lsls	r3, r5, #3
 800209e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a2:	00e2      	lsls	r2, r4, #3
 80020a4:	4614      	mov	r4, r2
 80020a6:	461d      	mov	r5, r3
 80020a8:	4643      	mov	r3, r8
 80020aa:	18e3      	adds	r3, r4, r3
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	464b      	mov	r3, r9
 80020b0:	eb45 0303 	adc.w	r3, r5, r3
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c2:	4629      	mov	r1, r5
 80020c4:	028b      	lsls	r3, r1, #10
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020cc:	4621      	mov	r1, r4
 80020ce:	028a      	lsls	r2, r1, #10
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020d6:	2200      	movs	r2, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	61fa      	str	r2, [r7, #28]
 80020dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e0:	f7fe f8de 	bl	80002a0 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4613      	mov	r3, r2
 80020ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80020fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x204>)
 800210a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002110:	4618      	mov	r0, r3
 8002112:	3750      	adds	r7, #80	@ 0x50
 8002114:	46bd      	mov	sp, r7
 8002116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	00f42400 	.word	0x00f42400
 8002124:	007a1200 	.word	0x007a1200

08002128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002144:	f7ff fff0 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0a9b      	lsrs	r3, r3, #10
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	08005964 	.word	0x08005964

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff ffdc 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0b5b      	lsrs	r3, r3, #13
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	@ (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	08005964 	.word	0x08005964

08002190 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	220f      	movs	r2, #15
 800219e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021ac:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021c4:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <HAL_RCC_GetClockConfig+0x60>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e041      	b.n	800228a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f839 	bl	8002292 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 f9c0 	bl	80025b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d001      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e04e      	b.n	800235e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <HAL_TIM_Base_Start_IT+0xc4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d022      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x80>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ea:	d01d      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x80>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002370 <HAL_TIM_Base_Start_IT+0xc8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d018      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x80>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002374 <HAL_TIM_Base_Start_IT+0xcc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x80>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <HAL_TIM_Base_Start_IT+0xd0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00e      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x80>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1b      	ldr	r2, [pc, #108]	@ (800237c <HAL_TIM_Base_Start_IT+0xd4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x80>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <HAL_TIM_Base_Start_IT+0xd8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x80>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a18      	ldr	r2, [pc, #96]	@ (8002384 <HAL_TIM_Base_Start_IT+0xdc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b06      	cmp	r3, #6
 8002338:	d010      	beq.n	800235c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	e007      	b.n	800235c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40010000 	.word	0x40010000
 8002370:	40000400 	.word	0x40000400
 8002374:	40000800 	.word	0x40000800
 8002378:	40000c00 	.word	0x40000c00
 800237c:	40010400 	.word	0x40010400
 8002380:	40014000 	.word	0x40014000
 8002384:	40001800 	.word	0x40001800

08002388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d020      	beq.n	80023ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01b      	beq.n	80023ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0202 	mvn.w	r2, #2
 80023bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8d2 	bl	800257c <HAL_TIM_IC_CaptureCallback>
 80023d8:	e005      	b.n	80023e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8c4 	bl	8002568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f8d5 	bl	8002590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d020      	beq.n	8002438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01b      	beq.n	8002438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0204 	mvn.w	r2, #4
 8002408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f8ac 	bl	800257c <HAL_TIM_IC_CaptureCallback>
 8002424:	e005      	b.n	8002432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f89e 	bl	8002568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f8af 	bl	8002590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d020      	beq.n	8002484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01b      	beq.n	8002484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0208 	mvn.w	r2, #8
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f886 	bl	800257c <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f878 	bl	8002568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f889 	bl	8002590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d020      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0210 	mvn.w	r2, #16
 80024a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2208      	movs	r2, #8
 80024a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f860 	bl	800257c <HAL_TIM_IC_CaptureCallback>
 80024bc:	e005      	b.n	80024ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f852 	bl	8002568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f863 	bl	8002590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0201 	mvn.w	r2, #1
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fcdc 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f906 	bl	8002724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f834 	bl	80025a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00c      	beq.n	8002560 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0220 	mvn.w	r2, #32
 8002558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8d8 	bl	8002710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a46      	ldr	r2, [pc, #280]	@ (80026e4 <TIM_Base_SetConfig+0x12c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d013      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d6:	d00f      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a43      	ldr	r2, [pc, #268]	@ (80026e8 <TIM_Base_SetConfig+0x130>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00b      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a42      	ldr	r2, [pc, #264]	@ (80026ec <TIM_Base_SetConfig+0x134>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a41      	ldr	r2, [pc, #260]	@ (80026f0 <TIM_Base_SetConfig+0x138>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d003      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a40      	ldr	r2, [pc, #256]	@ (80026f4 <TIM_Base_SetConfig+0x13c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d108      	bne.n	800260a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a35      	ldr	r2, [pc, #212]	@ (80026e4 <TIM_Base_SetConfig+0x12c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02b      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002618:	d027      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a32      	ldr	r2, [pc, #200]	@ (80026e8 <TIM_Base_SetConfig+0x130>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d023      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a31      	ldr	r2, [pc, #196]	@ (80026ec <TIM_Base_SetConfig+0x134>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a30      	ldr	r2, [pc, #192]	@ (80026f0 <TIM_Base_SetConfig+0x138>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01b      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a2f      	ldr	r2, [pc, #188]	@ (80026f4 <TIM_Base_SetConfig+0x13c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d017      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a2e      	ldr	r2, [pc, #184]	@ (80026f8 <TIM_Base_SetConfig+0x140>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a2d      	ldr	r2, [pc, #180]	@ (80026fc <TIM_Base_SetConfig+0x144>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00f      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a2c      	ldr	r2, [pc, #176]	@ (8002700 <TIM_Base_SetConfig+0x148>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a2b      	ldr	r2, [pc, #172]	@ (8002704 <TIM_Base_SetConfig+0x14c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a2a      	ldr	r2, [pc, #168]	@ (8002708 <TIM_Base_SetConfig+0x150>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a29      	ldr	r2, [pc, #164]	@ (800270c <TIM_Base_SetConfig+0x154>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a10      	ldr	r2, [pc, #64]	@ (80026e4 <TIM_Base_SetConfig+0x12c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d003      	beq.n	80026b0 <TIM_Base_SetConfig+0xf8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <TIM_Base_SetConfig+0x13c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d103      	bne.n	80026b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f023 0201 	bic.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]
  }
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800
 80026f0:	40000c00 	.word	0x40000c00
 80026f4:	40010400 	.word	0x40010400
 80026f8:	40014000 	.word	0x40014000
 80026fc:	40014400 	.word	0x40014400
 8002700:	40014800 	.word	0x40014800
 8002704:	40001800 	.word	0x40001800
 8002708:	40001c00 	.word	0x40001c00
 800270c:	40002000 	.word	0x40002000

08002710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e042      	b.n	80027d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fbe8 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	@ 0x24
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800277a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f973 	bl	8002a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d175      	bne.n	80028e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_UART_Transmit+0x2c>
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e06e      	b.n	80028e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2221      	movs	r2, #33	@ 0x21
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002816:	f7fe fd1f 	bl	8001258 <HAL_GetTick>
 800281a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002830:	d108      	bne.n	8002844 <HAL_UART_Transmit+0x6c>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d104      	bne.n	8002844 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e003      	b.n	800284c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800284c:	e02e      	b.n	80028ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f848 	bl	80028ee <UART_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e03a      	b.n	80028e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10b      	bne.n	800288e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	3302      	adds	r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	e007      	b.n	800289e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	3301      	adds	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1cb      	bne.n	800284e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	2140      	movs	r1, #64	@ 0x40
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f814 	bl	80028ee <UART_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e006      	b.n	80028e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fe:	e03b      	b.n	8002978 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002906:	d037      	beq.n	8002978 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002908:	f7fe fca6 	bl	8001258 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	429a      	cmp	r2, r3
 8002916:	d302      	bcc.n	800291e <UART_WaitOnFlagUntilTimeout+0x30>
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e03a      	b.n	8002998 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b80      	cmp	r3, #128	@ 0x80
 8002934:	d020      	beq.n	8002978 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d01d      	beq.n	8002978 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d116      	bne.n	8002978 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f81d 	bl	80029a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2208      	movs	r2, #8
 800296a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e00f      	b.n	8002998 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4013      	ands	r3, r2
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	429a      	cmp	r2, r3
 8002994:	d0b4      	beq.n	8002900 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b095      	sub	sp, #84	@ 0x54
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029d0:	e841 2300 	strex	r3, r2, [r1]
 80029d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1e5      	bne.n	80029a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3314      	adds	r3, #20
 80029fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d119      	bne.n	8002a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f023 0310 	bic.w	r3, r3, #16
 8002a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a38:	61ba      	str	r2, [r7, #24]
 8002a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6979      	ldr	r1, [r7, #20]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	613b      	str	r3, [r7, #16]
   return(result);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a5a:	bf00      	nop
 8002a5c:	3754      	adds	r7, #84	@ 0x54
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a6c:	b0c0      	sub	sp, #256	@ 0x100
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	ea40 0301 	orr.w	r3, r0, r1
 8002a90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ac0:	f021 010c 	bic.w	r1, r1, #12
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae2:	6999      	ldr	r1, [r3, #24]
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	ea40 0301 	orr.w	r3, r0, r1
 8002aee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b8f      	ldr	r3, [pc, #572]	@ (8002d34 <UART_SetConfig+0x2cc>)
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d005      	beq.n	8002b08 <UART_SetConfig+0xa0>
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b8d      	ldr	r3, [pc, #564]	@ (8002d38 <UART_SetConfig+0x2d0>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d104      	bne.n	8002b12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b08:	f7ff fb2e 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002b0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b10:	e003      	b.n	8002b1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b12:	f7ff fb15 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8002b16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b24:	f040 810c 	bne.w	8002d40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	1891      	adds	r1, r2, r2
 8002b40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b42:	415b      	adcs	r3, r3
 8002b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	eb12 0801 	adds.w	r8, r2, r1
 8002b50:	4629      	mov	r1, r5
 8002b52:	eb43 0901 	adc.w	r9, r3, r1
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6a:	4690      	mov	r8, r2
 8002b6c:	4699      	mov	r9, r3
 8002b6e:	4623      	mov	r3, r4
 8002b70:	eb18 0303 	adds.w	r3, r8, r3
 8002b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b78:	462b      	mov	r3, r5
 8002b7a:	eb49 0303 	adc.w	r3, r9, r3
 8002b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b96:	460b      	mov	r3, r1
 8002b98:	18db      	adds	r3, r3, r3
 8002b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	eb42 0303 	adc.w	r3, r2, r3
 8002ba2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bac:	f7fd fb78 	bl	80002a0 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4b61      	ldr	r3, [pc, #388]	@ (8002d3c <UART_SetConfig+0x2d4>)
 8002bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	011c      	lsls	r4, r3, #4
 8002bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	1891      	adds	r1, r2, r2
 8002bd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bd8:	415b      	adcs	r3, r3
 8002bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002be0:	4641      	mov	r1, r8
 8002be2:	eb12 0a01 	adds.w	sl, r2, r1
 8002be6:	4649      	mov	r1, r9
 8002be8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c00:	4692      	mov	sl, r2
 8002c02:	469b      	mov	fp, r3
 8002c04:	4643      	mov	r3, r8
 8002c06:	eb1a 0303 	adds.w	r3, sl, r3
 8002c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c0e:	464b      	mov	r3, r9
 8002c10:	eb4b 0303 	adc.w	r3, fp, r3
 8002c14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	18db      	adds	r3, r3, r3
 8002c30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c32:	4613      	mov	r3, r2
 8002c34:	eb42 0303 	adc.w	r3, r2, r3
 8002c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c42:	f7fd fb2d 	bl	80002a0 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <UART_SetConfig+0x2d4>)
 8002c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2264      	movs	r2, #100	@ 0x64
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	1acb      	subs	r3, r1, r3
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c62:	4b36      	ldr	r3, [pc, #216]	@ (8002d3c <UART_SetConfig+0x2d4>)
 8002c64:	fba3 2302 	umull	r2, r3, r3, r2
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c70:	441c      	add	r4, r3
 8002c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	1891      	adds	r1, r2, r2
 8002c8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c94:	4641      	mov	r1, r8
 8002c96:	1851      	adds	r1, r2, r1
 8002c98:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	414b      	adcs	r3, r1
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cac:	4659      	mov	r1, fp
 8002cae:	00cb      	lsls	r3, r1, #3
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	00ca      	lsls	r2, r1, #3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cc8:	464b      	mov	r3, r9
 8002cca:	460a      	mov	r2, r1
 8002ccc:	eb42 0303 	adc.w	r3, r2, r3
 8002cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ce0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ce8:	460b      	mov	r3, r1
 8002cea:	18db      	adds	r3, r3, r3
 8002cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cee:	4613      	mov	r3, r2
 8002cf0:	eb42 0303 	adc.w	r3, r2, r3
 8002cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cfe:	f7fd facf 	bl	80002a0 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <UART_SetConfig+0x2d4>)
 8002d08:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	2164      	movs	r1, #100	@ 0x64
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3332      	adds	r3, #50	@ 0x32
 8002d1a:	4a08      	ldr	r2, [pc, #32]	@ (8002d3c <UART_SetConfig+0x2d4>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	f003 0207 	and.w	r2, r3, #7
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4422      	add	r2, r4
 8002d2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d30:	e106      	b.n	8002f40 <UART_SetConfig+0x4d8>
 8002d32:	bf00      	nop
 8002d34:	40011000 	.word	0x40011000
 8002d38:	40011400 	.word	0x40011400
 8002d3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d52:	4642      	mov	r2, r8
 8002d54:	464b      	mov	r3, r9
 8002d56:	1891      	adds	r1, r2, r2
 8002d58:	6239      	str	r1, [r7, #32]
 8002d5a:	415b      	adcs	r3, r3
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d62:	4641      	mov	r1, r8
 8002d64:	1854      	adds	r4, r2, r1
 8002d66:	4649      	mov	r1, r9
 8002d68:	eb43 0501 	adc.w	r5, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	00eb      	lsls	r3, r5, #3
 8002d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7a:	00e2      	lsls	r2, r4, #3
 8002d7c:	4614      	mov	r4, r2
 8002d7e:	461d      	mov	r5, r3
 8002d80:	4643      	mov	r3, r8
 8002d82:	18e3      	adds	r3, r4, r3
 8002d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d88:	464b      	mov	r3, r9
 8002d8a:	eb45 0303 	adc.w	r3, r5, r3
 8002d8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dae:	4629      	mov	r1, r5
 8002db0:	008b      	lsls	r3, r1, #2
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db8:	4621      	mov	r1, r4
 8002dba:	008a      	lsls	r2, r1, #2
 8002dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002dc0:	f7fd fa6e 	bl	80002a0 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4b60      	ldr	r3, [pc, #384]	@ (8002f4c <UART_SetConfig+0x4e4>)
 8002dca:	fba3 2302 	umull	r2, r3, r3, r2
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	011c      	lsls	r4, r3, #4
 8002dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ddc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002de0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	1891      	adds	r1, r2, r2
 8002dea:	61b9      	str	r1, [r7, #24]
 8002dec:	415b      	adcs	r3, r3
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df4:	4641      	mov	r1, r8
 8002df6:	1851      	adds	r1, r2, r1
 8002df8:	6139      	str	r1, [r7, #16]
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	414b      	adcs	r3, r1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e0c:	4659      	mov	r1, fp
 8002e0e:	00cb      	lsls	r3, r1, #3
 8002e10:	4651      	mov	r1, sl
 8002e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e16:	4651      	mov	r1, sl
 8002e18:	00ca      	lsls	r2, r1, #3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4642      	mov	r2, r8
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e28:	464b      	mov	r3, r9
 8002e2a:	460a      	mov	r2, r1
 8002e2c:	eb42 0303 	adc.w	r3, r2, r3
 8002e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	008b      	lsls	r3, r1, #2
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e56:	4641      	mov	r1, r8
 8002e58:	008a      	lsls	r2, r1, #2
 8002e5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e5e:	f7fd fa1f 	bl	80002a0 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4611      	mov	r1, r2
 8002e68:	4b38      	ldr	r3, [pc, #224]	@ (8002f4c <UART_SetConfig+0x4e4>)
 8002e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	2264      	movs	r2, #100	@ 0x64
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	1acb      	subs	r3, r1, r3
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	3332      	adds	r3, #50	@ 0x32
 8002e7c:	4a33      	ldr	r2, [pc, #204]	@ (8002f4c <UART_SetConfig+0x4e4>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e88:	441c      	add	r4, r3
 8002e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8e:	2200      	movs	r2, #0
 8002e90:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e92:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e98:	4642      	mov	r2, r8
 8002e9a:	464b      	mov	r3, r9
 8002e9c:	1891      	adds	r1, r2, r2
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	415b      	adcs	r3, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	1851      	adds	r1, r2, r1
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	4649      	mov	r1, r9
 8002eb0:	414b      	adcs	r3, r1
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	00cb      	lsls	r3, r1, #3
 8002ec4:	4651      	mov	r1, sl
 8002ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eca:	4651      	mov	r1, sl
 8002ecc:	00ca      	lsls	r2, r1, #3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	189b      	adds	r3, r3, r2
 8002ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eda:	464b      	mov	r3, r9
 8002edc:	460a      	mov	r2, r1
 8002ede:	eb42 0303 	adc.w	r3, r2, r3
 8002ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eee:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002efc:	4649      	mov	r1, r9
 8002efe:	008b      	lsls	r3, r1, #2
 8002f00:	4641      	mov	r1, r8
 8002f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f06:	4641      	mov	r1, r8
 8002f08:	008a      	lsls	r2, r1, #2
 8002f0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f0e:	f7fd f9c7 	bl	80002a0 <__aeabi_uldivmod>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <UART_SetConfig+0x4e4>)
 8002f18:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	2164      	movs	r1, #100	@ 0x64
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	3332      	adds	r3, #50	@ 0x32
 8002f2a:	4a08      	ldr	r2, [pc, #32]	@ (8002f4c <UART_SetConfig+0x4e4>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4422      	add	r2, r4
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f46:	46bd      	mov	sp, r7
 8002f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4c:	51eb851f 	.word	0x51eb851f

08002f50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f103 0208 	add.w	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f103 0208 	add.w	r2, r3, #8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f103 0208 	add.w	r2, r3, #8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003008:	d103      	bne.n	8003012 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e00c      	b.n	800302c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3308      	adds	r3, #8
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e002      	b.n	8003020 <vListInsert+0x2e>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	429a      	cmp	r2, r3
 800302a:	d2f6      	bcs.n	800301a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	601a      	str	r2, [r3, #0]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6892      	ldr	r2, [r2, #8]
 800307a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6852      	ldr	r2, [r2, #4]
 8003084:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d103      	bne.n	8003098 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030e4:	f001 fbb8 	bl	8004858 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	68f9      	ldr	r1, [r7, #12]
 80030f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	441a      	add	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	3b01      	subs	r3, #1
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	441a      	add	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	22ff      	movs	r2, #255	@ 0xff
 8003128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	22ff      	movs	r2, #255	@ 0xff
 8003130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d114      	bne.n	8003164 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01a      	beq.n	8003178 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3310      	adds	r3, #16
 8003146:	4618      	mov	r0, r3
 8003148:	f000 ff86 	bl	8004058 <xTaskRemoveFromEventList>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003152:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <xQueueGenericReset+0xd0>)
 8003154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	e009      	b.n	8003178 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3310      	adds	r3, #16
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fef1 	bl	8002f50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3324      	adds	r3, #36	@ 0x24
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff feec 	bl	8002f50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003178:	f001 fba0 	bl	80048bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800317c:	2301      	movs	r3, #1
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	e000ed04 	.word	0xe000ed04

0800318c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	@ 0x28
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	613b      	str	r3, [r7, #16]
}
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3348      	adds	r3, #72	@ 0x48
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fc26 	bl	8004a18 <pvPortMalloc>
 80031cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d011      	beq.n	80031f8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3348      	adds	r3, #72	@ 0x48
 80031dc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031e6:	79fa      	ldrb	r2, [r7, #7]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f805 	bl	8003202 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031f8:	69bb      	ldr	r3, [r7, #24]
	}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e002      	b.n	8003224 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003230:	2101      	movs	r1, #1
 8003232:	69b8      	ldr	r0, [r7, #24]
 8003234:	f7ff ff40 	bl	80030b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08e      	sub	sp, #56	@ 0x38
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800324e:	2300      	movs	r3, #0
 8003250:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <xQueueGenericSend+0x34>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d103      	bne.n	8003282 <xQueueGenericSend+0x42>
 800327a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <xQueueGenericSend+0x46>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <xQueueGenericSend+0x48>
 8003286:	2300      	movs	r3, #0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <xQueueGenericSend+0x64>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d103      	bne.n	80032b2 <xQueueGenericSend+0x72>
 80032aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <xQueueGenericSend+0x76>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <xQueueGenericSend+0x78>
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10b      	bne.n	80032d4 <xQueueGenericSend+0x94>
	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	623b      	str	r3, [r7, #32]
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032d4:	f001 f880 	bl	80043d8 <xTaskGetSchedulerState>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <xQueueGenericSend+0xa4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <xQueueGenericSend+0xa8>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <xQueueGenericSend+0xaa>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <xQueueGenericSend+0xc6>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	61fb      	str	r3, [r7, #28]
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003306:	f001 faa7 	bl	8004858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800330e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <xQueueGenericSend+0xdc>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d129      	bne.n	8003370 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003322:	f000 f971 	bl	8003608 <prvCopyDataToQueue>
 8003326:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	3324      	adds	r3, #36	@ 0x24
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fe8f 	bl	8004058 <xTaskRemoveFromEventList>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003340:	4b3f      	ldr	r3, [pc, #252]	@ (8003440 <xQueueGenericSend+0x200>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	e00a      	b.n	8003368 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003358:	4b39      	ldr	r3, [pc, #228]	@ (8003440 <xQueueGenericSend+0x200>)
 800335a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003368:	f001 faa8 	bl	80048bc <vPortExitCritical>
				return pdPASS;
 800336c:	2301      	movs	r3, #1
 800336e:	e063      	b.n	8003438 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003376:	f001 faa1 	bl	80048bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800337a:	2300      	movs	r3, #0
 800337c:	e05c      	b.n	8003438 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800337e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fec9 	bl	8004120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800338e:	2301      	movs	r3, #1
 8003390:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003392:	f001 fa93 	bl	80048bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003396:	f000 fc77 	bl	8003c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800339a:	f001 fa5d 	bl	8004858 <vPortEnterCritical>
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033a4:	b25b      	sxtb	r3, r3
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033aa:	d103      	bne.n	80033b4 <xQueueGenericSend+0x174>
 80033ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c0:	d103      	bne.n	80033ca <xQueueGenericSend+0x18a>
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033ca:	f001 fa77 	bl	80048bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033ce:	1d3a      	adds	r2, r7, #4
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 feb8 	bl	800414c <xTaskCheckForTimeOut>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d124      	bne.n	800342c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033e4:	f000 fa08 	bl	80037f8 <prvIsQueueFull>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	3310      	adds	r3, #16
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fe08 	bl	800400c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033fe:	f000 f993 	bl	8003728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003402:	f000 fc4f 	bl	8003ca4 <xTaskResumeAll>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	f47f af7c 	bne.w	8003306 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800340e:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <xQueueGenericSend+0x200>)
 8003410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	e772      	b.n	8003306 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003422:	f000 f981 	bl	8003728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003426:	f000 fc3d 	bl	8003ca4 <xTaskResumeAll>
 800342a:	e76c      	b.n	8003306 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800342c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800342e:	f000 f97b 	bl	8003728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003432:	f000 fc37 	bl	8003ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003436:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003438:	4618      	mov	r0, r3
 800343a:	3738      	adds	r7, #56	@ 0x38
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	@ 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <xQueueReceive+0x32>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	623b      	str	r3, [r7, #32]
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	e7fd      	b.n	8003472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <xQueueReceive+0x40>
 800347c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <xQueueReceive+0x44>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <xQueueReceive+0x46>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <xQueueReceive+0x62>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	61fb      	str	r3, [r7, #28]
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	e7fd      	b.n	80034a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a6:	f000 ff97 	bl	80043d8 <xTaskGetSchedulerState>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <xQueueReceive+0x72>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <xQueueReceive+0x76>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <xQueueReceive+0x78>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xQueueReceive+0x94>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	61bb      	str	r3, [r7, #24]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d8:	f001 f9be 	bl	8004858 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01f      	beq.n	8003528 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ec:	f000 f8f6 	bl	80036dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00f      	beq.n	8003520 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	3310      	adds	r3, #16
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fda7 	bl	8004058 <xTaskRemoveFromEventList>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003510:	4b3c      	ldr	r3, [pc, #240]	@ (8003604 <xQueueReceive+0x1c0>)
 8003512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003520:	f001 f9cc 	bl	80048bc <vPortExitCritical>
				return pdPASS;
 8003524:	2301      	movs	r3, #1
 8003526:	e069      	b.n	80035fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800352e:	f001 f9c5 	bl	80048bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003532:	2300      	movs	r3, #0
 8003534:	e062      	b.n	80035fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800353c:	f107 0310 	add.w	r3, r7, #16
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fded 	bl	8004120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003546:	2301      	movs	r3, #1
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800354a:	f001 f9b7 	bl	80048bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800354e:	f000 fb9b 	bl	8003c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003552:	f001 f981 	bl	8004858 <vPortEnterCritical>
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800355c:	b25b      	sxtb	r3, r3
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003562:	d103      	bne.n	800356c <xQueueReceive+0x128>
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003572:	b25b      	sxtb	r3, r3
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003578:	d103      	bne.n	8003582 <xQueueReceive+0x13e>
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003582:	f001 f99b 	bl	80048bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003586:	1d3a      	adds	r2, r7, #4
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fddc 	bl	800414c <xTaskCheckForTimeOut>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d123      	bne.n	80035e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800359a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800359c:	f000 f916 	bl	80037cc <prvIsQueueEmpty>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	3324      	adds	r3, #36	@ 0x24
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fd2c 	bl	800400c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035b6:	f000 f8b7 	bl	8003728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035ba:	f000 fb73 	bl	8003ca4 <xTaskResumeAll>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d189      	bne.n	80034d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80035c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <xQueueReceive+0x1c0>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	e780      	b.n	80034d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035d8:	f000 f8a6 	bl	8003728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035dc:	f000 fb62 	bl	8003ca4 <xTaskResumeAll>
 80035e0:	e77a      	b.n	80034d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035e4:	f000 f8a0 	bl	8003728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e8:	f000 fb5c 	bl	8003ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ee:	f000 f8ed 	bl	80037cc <prvIsQueueEmpty>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f43f af6f 	beq.w	80034d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3730      	adds	r7, #48	@ 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d14d      	bne.n	80036ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 feee 	bl	8004414 <xTaskPriorityDisinherit>
 8003638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	e043      	b.n	80036ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d119      	bne.n	800367c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6858      	ldr	r0, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	461a      	mov	r2, r3
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	f001 fc22 	bl	8004e9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d32b      	bcc.n	80036ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e026      	b.n	80036ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68d8      	ldr	r0, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	461a      	mov	r2, r3
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	f001 fc08 	bl	8004e9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	425b      	negs	r3, r3
 8003696:	441a      	add	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d207      	bcs.n	80036b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	425b      	negs	r3, r3
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d105      	bne.n	80036ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036d2:	697b      	ldr	r3, [r7, #20]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d018      	beq.n	8003720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	441a      	add	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d303      	bcc.n	8003710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68d9      	ldr	r1, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	461a      	mov	r2, r3
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f001 fbbe 	bl	8004e9c <memcpy>
	}
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003730:	f001 f892 	bl	8004858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800373a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800373c:	e011      	b.n	8003762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3324      	adds	r3, #36	@ 0x24
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fc84 	bl	8004058 <xTaskRemoveFromEventList>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003756:	f000 fd5d 	bl	8004214 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	3b01      	subs	r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dce9      	bgt.n	800373e <prvUnlockQueue+0x16>
 800376a:	e000      	b.n	800376e <prvUnlockQueue+0x46>
					break;
 800376c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	22ff      	movs	r2, #255	@ 0xff
 8003772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003776:	f001 f8a1 	bl	80048bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800377a:	f001 f86d 	bl	8004858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003786:	e011      	b.n	80037ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3310      	adds	r3, #16
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fc5f 	bl	8004058 <xTaskRemoveFromEventList>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037a0:	f000 fd38 	bl	8004214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037a4:	7bbb      	ldrb	r3, [r7, #14]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	dce9      	bgt.n	8003788 <prvUnlockQueue+0x60>
 80037b4:	e000      	b.n	80037b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	22ff      	movs	r2, #255	@ 0xff
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037c0:	f001 f87c 	bl	80048bc <vPortExitCritical>
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037d4:	f001 f840 	bl	8004858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037e0:	2301      	movs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e001      	b.n	80037ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ea:	f001 f867 	bl	80048bc <vPortExitCritical>

	return xReturn;
 80037ee:	68fb      	ldr	r3, [r7, #12]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003800:	f001 f82a 	bl	8004858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380c:	429a      	cmp	r2, r3
 800380e:	d102      	bne.n	8003816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e001      	b.n	800381a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800381a:	f001 f84f 	bl	80048bc <vPortExitCritical>

	return xReturn;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	@ 0x38
 800382c:	af04      	add	r7, sp, #16
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <xTaskCreateStatic+0x2c>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	623b      	str	r3, [r7, #32]
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <xTaskCreateStatic+0x4a>
	__asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	61fb      	str	r3, [r7, #28]
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	e7fd      	b.n	800386e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003872:	2354      	movs	r3, #84	@ 0x54
 8003874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b54      	cmp	r3, #84	@ 0x54
 800387a:	d00b      	beq.n	8003894 <xTaskCreateStatic+0x6c>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	61bb      	str	r3, [r7, #24]
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003894:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01e      	beq.n	80038da <xTaskCreateStatic+0xb2>
 800389c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01b      	beq.n	80038da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038b4:	2300      	movs	r3, #0
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f850 	bl	8003972 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038d4:	f000 f8d6 	bl	8003a84 <prvAddNewTaskToReadyList>
 80038d8:	e001      	b.n	80038de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038de:	697b      	ldr	r3, [r7, #20]
	}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3728      	adds	r7, #40	@ 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	@ 0x30
 80038ec:	af04      	add	r7, sp, #16
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f88b 	bl	8004a18 <pvPortMalloc>
 8003902:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00e      	beq.n	8003928 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800390a:	2054      	movs	r0, #84	@ 0x54
 800390c:	f001 f884 	bl	8004a18 <pvPortMalloc>
 8003910:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
 800391e:	e005      	b.n	800392c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f001 f947 	bl	8004bb4 <vPortFree>
 8003926:	e001      	b.n	800392c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d017      	beq.n	8003962 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	2300      	movs	r3, #0
 800393e:	9303      	str	r3, [sp, #12]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	9302      	str	r3, [sp, #8]
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f80e 	bl	8003972 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003956:	69f8      	ldr	r0, [r7, #28]
 8003958:	f000 f894 	bl	8003a84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800395c:	2301      	movs	r3, #1
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e002      	b.n	8003968 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003966:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003968:	69bb      	ldr	r3, [r7, #24]
	}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b088      	sub	sp, #32
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800398a:	3b01      	subs	r3, #1
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f023 0307 	bic.w	r3, r3, #7
 8003998:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	617b      	str	r3, [r7, #20]
}
 80039b6:	bf00      	nop
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01f      	beq.n	8003a02 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	e012      	b.n	80039ee <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	4413      	add	r3, r2
 80039ce:	7819      	ldrb	r1, [r3, #0]
 80039d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	3334      	adds	r3, #52	@ 0x34
 80039d8:	460a      	mov	r2, r1
 80039da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d006      	beq.n	80039f6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3301      	adds	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b0f      	cmp	r3, #15
 80039f2:	d9e9      	bls.n	80039c8 <prvInitialiseNewTask+0x56>
 80039f4:	e000      	b.n	80039f8 <prvInitialiseNewTask+0x86>
			{
				break;
 80039f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a00:	e003      	b.n	8003a0a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	2b06      	cmp	r3, #6
 8003a0e:	d901      	bls.n	8003a14 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a10:	2306      	movs	r3, #6
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a18:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	2200      	movs	r2, #0
 8003a24:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fab0 	bl	8002f90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a32:	3318      	adds	r3, #24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff faab 	bl	8002f90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	f1c3 0207 	rsb	r2, r3, #7
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a4e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	2200      	movs	r2, #0
 8003a54:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	69b8      	ldr	r0, [r7, #24]
 8003a64:	f000 fdc4 	bl	80045f0 <pxPortInitialiseStack>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a7a:	bf00      	nop
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a8c:	f000 fee4 	bl	8004858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a90:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <prvAddNewTaskToReadyList+0xb8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a29      	ldr	r2, [pc, #164]	@ (8003b3c <prvAddNewTaskToReadyList+0xb8>)
 8003a98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a9a:	4b29      	ldr	r3, [pc, #164]	@ (8003b40 <prvAddNewTaskToReadyList+0xbc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aa2:	4a27      	ldr	r2, [pc, #156]	@ (8003b40 <prvAddNewTaskToReadyList+0xbc>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003aa8:	4b24      	ldr	r3, [pc, #144]	@ (8003b3c <prvAddNewTaskToReadyList+0xb8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d110      	bne.n	8003ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ab0:	f000 fbd4 	bl	800425c <prvInitialiseTaskLists>
 8003ab4:	e00d      	b.n	8003ad2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ab6:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <prvAddNewTaskToReadyList+0xc0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003abe:	4b20      	ldr	r3, [pc, #128]	@ (8003b40 <prvAddNewTaskToReadyList+0xbc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d802      	bhi.n	8003ad2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003acc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b40 <prvAddNewTaskToReadyList+0xbc>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b48 <prvAddNewTaskToReadyList+0xc4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <prvAddNewTaskToReadyList+0xc4>)
 8003ada:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <prvAddNewTaskToReadyList+0xc8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	4a18      	ldr	r2, [pc, #96]	@ (8003b4c <prvAddNewTaskToReadyList+0xc8>)
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4a15      	ldr	r2, [pc, #84]	@ (8003b50 <prvAddNewTaskToReadyList+0xcc>)
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7ff fa50 	bl	8002faa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b0a:	f000 fed7 	bl	80048bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <prvAddNewTaskToReadyList+0xc0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00e      	beq.n	8003b34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b16:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <prvAddNewTaskToReadyList+0xbc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d207      	bcs.n	8003b34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b24:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <prvAddNewTaskToReadyList+0xd0>)
 8003b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000480 	.word	0x20000480
 8003b40:	20000380 	.word	0x20000380
 8003b44:	2000048c 	.word	0x2000048c
 8003b48:	2000049c 	.word	0x2000049c
 8003b4c:	20000488 	.word	0x20000488
 8003b50:	20000384 	.word	0x20000384
 8003b54:	e000ed04 	.word	0xe000ed04

08003b58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d018      	beq.n	8003b9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b6a:	4b14      	ldr	r3, [pc, #80]	@ (8003bbc <vTaskDelay+0x64>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <vTaskDelay+0x32>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	60bb      	str	r3, [r7, #8]
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	e7fd      	b.n	8003b86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b8a:	f000 f87d 	bl	8003c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b8e:	2100      	movs	r1, #0
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fcc7 	bl	8004524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b96:	f000 f885 	bl	8003ca4 <xTaskResumeAll>
 8003b9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d107      	bne.n	8003bb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ba2:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <vTaskDelay+0x68>)
 8003ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	200004a8 	.word	0x200004a8
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	@ 0x28
 8003bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bd2:	463a      	mov	r2, r7
 8003bd4:	1d39      	adds	r1, r7, #4
 8003bd6:	f107 0308 	add.w	r3, r7, #8
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fc fcd8 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003be0:	6839      	ldr	r1, [r7, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	9202      	str	r2, [sp, #8]
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	2300      	movs	r3, #0
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	460a      	mov	r2, r1
 8003bf2:	491f      	ldr	r1, [pc, #124]	@ (8003c70 <vTaskStartScheduler+0xac>)
 8003bf4:	481f      	ldr	r0, [pc, #124]	@ (8003c74 <vTaskStartScheduler+0xb0>)
 8003bf6:	f7ff fe17 	bl	8003828 <xTaskCreateStatic>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8003c78 <vTaskStartScheduler+0xb4>)
 8003bfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <vTaskStartScheduler+0xb4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e001      	b.n	8003c12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d116      	bne.n	8003c46 <vTaskStartScheduler+0x82>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	613b      	str	r3, [r7, #16]
}
 8003c2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c2c:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <vTaskStartScheduler+0xb8>)
 8003c2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c34:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <vTaskStartScheduler+0xbc>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c3a:	4b12      	ldr	r3, [pc, #72]	@ (8003c84 <vTaskStartScheduler+0xc0>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c40:	f000 fd66 	bl	8004710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c44:	e00f      	b.n	8003c66 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c4c:	d10b      	bne.n	8003c66 <vTaskStartScheduler+0xa2>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	60fb      	str	r3, [r7, #12]
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	e7fd      	b.n	8003c62 <vTaskStartScheduler+0x9e>
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	0800594c 	.word	0x0800594c
 8003c74:	0800422d 	.word	0x0800422d
 8003c78:	200004a4 	.word	0x200004a4
 8003c7c:	200004a0 	.word	0x200004a0
 8003c80:	2000048c 	.word	0x2000048c
 8003c84:	20000484 	.word	0x20000484

08003c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ca0 <vTaskSuspendAll+0x18>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a03      	ldr	r2, [pc, #12]	@ (8003ca0 <vTaskSuspendAll+0x18>)
 8003c94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	200004a8 	.word	0x200004a8

08003ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cb2:	4b42      	ldr	r3, [pc, #264]	@ (8003dbc <xTaskResumeAll+0x118>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	603b      	str	r3, [r7, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cd2:	f000 fdc1 	bl	8004858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cd6:	4b39      	ldr	r3, [pc, #228]	@ (8003dbc <xTaskResumeAll+0x118>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	4a37      	ldr	r2, [pc, #220]	@ (8003dbc <xTaskResumeAll+0x118>)
 8003cde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce0:	4b36      	ldr	r3, [pc, #216]	@ (8003dbc <xTaskResumeAll+0x118>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d161      	bne.n	8003dac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ce8:	4b35      	ldr	r3, [pc, #212]	@ (8003dc0 <xTaskResumeAll+0x11c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05d      	beq.n	8003dac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cf0:	e02e      	b.n	8003d50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf2:	4b34      	ldr	r3, [pc, #208]	@ (8003dc4 <xTaskResumeAll+0x120>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff f9b0 	bl	8003064 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff f9ab 	bl	8003064 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	2201      	movs	r2, #1
 8003d14:	409a      	lsls	r2, r3
 8003d16:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc8 <xTaskResumeAll+0x124>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc8 <xTaskResumeAll+0x124>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a27      	ldr	r2, [pc, #156]	@ (8003dcc <xTaskResumeAll+0x128>)
 8003d2e:	441a      	add	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7ff f937 	bl	8002faa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d40:	4b23      	ldr	r3, [pc, #140]	@ (8003dd0 <xTaskResumeAll+0x12c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d4a:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <xTaskResumeAll+0x130>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d50:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc4 <xTaskResumeAll+0x120>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1cc      	bne.n	8003cf2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d5e:	f000 fb1b 	bl	8004398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d62:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <xTaskResumeAll+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d010      	beq.n	8003d90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d6e:	f000 f837 	bl	8003de0 <xTaskIncrementTick>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d78:	4b16      	ldr	r3, [pc, #88]	@ (8003dd4 <xTaskResumeAll+0x130>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f1      	bne.n	8003d6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d8a:	4b13      	ldr	r3, [pc, #76]	@ (8003dd8 <xTaskResumeAll+0x134>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d90:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <xTaskResumeAll+0x130>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ddc <xTaskResumeAll+0x138>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dac:	f000 fd86 	bl	80048bc <vPortExitCritical>

	return xAlreadyYielded;
 8003db0:	68bb      	ldr	r3, [r7, #8]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200004a8 	.word	0x200004a8
 8003dc0:	20000480 	.word	0x20000480
 8003dc4:	20000440 	.word	0x20000440
 8003dc8:	20000488 	.word	0x20000488
 8003dcc:	20000384 	.word	0x20000384
 8003dd0:	20000380 	.word	0x20000380
 8003dd4:	20000494 	.word	0x20000494
 8003dd8:	20000490 	.word	0x20000490
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dea:	4b4f      	ldr	r3, [pc, #316]	@ (8003f28 <xTaskIncrementTick+0x148>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 808f 	bne.w	8003f12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003df4:	4b4d      	ldr	r3, [pc, #308]	@ (8003f2c <xTaskIncrementTick+0x14c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8003f2c <xTaskIncrementTick+0x14c>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d121      	bne.n	8003e4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e08:	4b49      	ldr	r3, [pc, #292]	@ (8003f30 <xTaskIncrementTick+0x150>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	603b      	str	r3, [r7, #0]
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <xTaskIncrementTick+0x46>
 8003e2a:	4b41      	ldr	r3, [pc, #260]	@ (8003f30 <xTaskIncrementTick+0x150>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	4b40      	ldr	r3, [pc, #256]	@ (8003f34 <xTaskIncrementTick+0x154>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3e      	ldr	r2, [pc, #248]	@ (8003f30 <xTaskIncrementTick+0x150>)
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4a3e      	ldr	r2, [pc, #248]	@ (8003f34 <xTaskIncrementTick+0x154>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f38 <xTaskIncrementTick+0x158>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a3c      	ldr	r2, [pc, #240]	@ (8003f38 <xTaskIncrementTick+0x158>)
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	f000 faa6 	bl	8004398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f3c <xTaskIncrementTick+0x15c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d348      	bcc.n	8003ee8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e56:	4b36      	ldr	r3, [pc, #216]	@ (8003f30 <xTaskIncrementTick+0x150>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e60:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <xTaskIncrementTick+0x15c>)
 8003e62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e66:	601a      	str	r2, [r3, #0]
					break;
 8003e68:	e03e      	b.n	8003ee8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e6a:	4b31      	ldr	r3, [pc, #196]	@ (8003f30 <xTaskIncrementTick+0x150>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d203      	bcs.n	8003e8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e82:	4a2e      	ldr	r2, [pc, #184]	@ (8003f3c <xTaskIncrementTick+0x15c>)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e88:	e02e      	b.n	8003ee8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f8e8 	bl	8003064 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3318      	adds	r3, #24
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff f8df 	bl	8003064 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	2201      	movs	r2, #1
 8003eac:	409a      	lsls	r2, r3
 8003eae:	4b24      	ldr	r3, [pc, #144]	@ (8003f40 <xTaskIncrementTick+0x160>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	4a22      	ldr	r2, [pc, #136]	@ (8003f40 <xTaskIncrementTick+0x160>)
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <xTaskIncrementTick+0x164>)
 8003ec6:	441a      	add	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f7ff f86b 	bl	8002faa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f48 <xTaskIncrementTick+0x168>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d3b9      	bcc.n	8003e56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee6:	e7b6      	b.n	8003e56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ee8:	4b17      	ldr	r3, [pc, #92]	@ (8003f48 <xTaskIncrementTick+0x168>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eee:	4915      	ldr	r1, [pc, #84]	@ (8003f44 <xTaskIncrementTick+0x164>)
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d901      	bls.n	8003f04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f04:	4b11      	ldr	r3, [pc, #68]	@ (8003f4c <xTaskIncrementTick+0x16c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e004      	b.n	8003f1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f12:	4b0f      	ldr	r3, [pc, #60]	@ (8003f50 <xTaskIncrementTick+0x170>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	4a0d      	ldr	r2, [pc, #52]	@ (8003f50 <xTaskIncrementTick+0x170>)
 8003f1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f1c:	697b      	ldr	r3, [r7, #20]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200004a8 	.word	0x200004a8
 8003f2c:	20000484 	.word	0x20000484
 8003f30:	20000438 	.word	0x20000438
 8003f34:	2000043c 	.word	0x2000043c
 8003f38:	20000498 	.word	0x20000498
 8003f3c:	200004a0 	.word	0x200004a0
 8003f40:	20000488 	.word	0x20000488
 8003f44:	20000384 	.word	0x20000384
 8003f48:	20000380 	.word	0x20000380
 8003f4c:	20000494 	.word	0x20000494
 8003f50:	20000490 	.word	0x20000490

08003f54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f5a:	4b27      	ldr	r3, [pc, #156]	@ (8003ff8 <vTaskSwitchContext+0xa4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f62:	4b26      	ldr	r3, [pc, #152]	@ (8003ffc <vTaskSwitchContext+0xa8>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f68:	e040      	b.n	8003fec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003f6a:	4b24      	ldr	r3, [pc, #144]	@ (8003ffc <vTaskSwitchContext+0xa8>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f70:	4b23      	ldr	r3, [pc, #140]	@ (8004000 <vTaskSwitchContext+0xac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	f1c3 031f 	rsb	r3, r3, #31
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	491f      	ldr	r1, [pc, #124]	@ (8004004 <vTaskSwitchContext+0xb0>)
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	607b      	str	r3, [r7, #4]
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	e7fd      	b.n	8003fae <vTaskSwitchContext+0x5a>
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4a11      	ldr	r2, [pc, #68]	@ (8004004 <vTaskSwitchContext+0xb0>)
 8003fbe:	4413      	add	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d104      	bne.n	8003fe2 <vTaskSwitchContext+0x8e>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a07      	ldr	r2, [pc, #28]	@ (8004008 <vTaskSwitchContext+0xb4>)
 8003fea:	6013      	str	r3, [r2, #0]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	200004a8 	.word	0x200004a8
 8003ffc:	20000494 	.word	0x20000494
 8004000:	20000488 	.word	0x20000488
 8004004:	20000384 	.word	0x20000384
 8004008:	20000380 	.word	0x20000380

0800400c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	60fb      	str	r3, [r7, #12]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004034:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <vTaskPlaceOnEventList+0x48>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3318      	adds	r3, #24
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7fe ffd8 	bl	8002ff2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004042:	2101      	movs	r1, #1
 8004044:	6838      	ldr	r0, [r7, #0]
 8004046:	f000 fa6d 	bl	8004524 <prvAddCurrentTaskToDelayedList>
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000380 	.word	0x20000380

08004058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10b      	bne.n	8004086 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60fb      	str	r3, [r7, #12]
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	e7fd      	b.n	8004082 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	3318      	adds	r3, #24
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe ffea 	bl	8003064 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004090:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <xTaskRemoveFromEventList+0xb0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11c      	bne.n	80040d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	3304      	adds	r3, #4
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe ffe1 	bl	8003064 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	2201      	movs	r2, #1
 80040a8:	409a      	lsls	r2, r3
 80040aa:	4b18      	ldr	r3, [pc, #96]	@ (800410c <xTaskRemoveFromEventList+0xb4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	4a16      	ldr	r2, [pc, #88]	@ (800410c <xTaskRemoveFromEventList+0xb4>)
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4a13      	ldr	r2, [pc, #76]	@ (8004110 <xTaskRemoveFromEventList+0xb8>)
 80040c2:	441a      	add	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7fe ff6d 	bl	8002faa <vListInsertEnd>
 80040d0:	e005      	b.n	80040de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3318      	adds	r3, #24
 80040d6:	4619      	mov	r1, r3
 80040d8:	480e      	ldr	r0, [pc, #56]	@ (8004114 <xTaskRemoveFromEventList+0xbc>)
 80040da:	f7fe ff66 	bl	8002faa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <xTaskRemoveFromEventList+0xc0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d905      	bls.n	80040f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <xTaskRemoveFromEventList+0xc4>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e001      	b.n	80040fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040fc:	697b      	ldr	r3, [r7, #20]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200004a8 	.word	0x200004a8
 800410c:	20000488 	.word	0x20000488
 8004110:	20000384 	.word	0x20000384
 8004114:	20000440 	.word	0x20000440
 8004118:	20000380 	.word	0x20000380
 800411c:	20000494 	.word	0x20000494

08004120 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004128:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <vTaskInternalSetTimeOutState+0x24>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004130:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <vTaskInternalSetTimeOutState+0x28>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	605a      	str	r2, [r3, #4]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	20000498 	.word	0x20000498
 8004148:	20000484 	.word	0x20000484

0800414c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	613b      	str	r3, [r7, #16]
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10b      	bne.n	8004192 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	60fb      	str	r3, [r7, #12]
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	e7fd      	b.n	800418e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004192:	f000 fb61 	bl	8004858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004196:	4b1d      	ldr	r3, [pc, #116]	@ (800420c <xTaskCheckForTimeOut+0xc0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ae:	d102      	bne.n	80041b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	e023      	b.n	80041fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <xTaskCheckForTimeOut+0xc4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d007      	beq.n	80041d2 <xTaskCheckForTimeOut+0x86>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e015      	b.n	80041fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d20b      	bcs.n	80041f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad2      	subs	r2, r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff99 	bl	8004120 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e004      	b.n	80041fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041fe:	f000 fb5d 	bl	80048bc <vPortExitCritical>

	return xReturn;
 8004202:	69fb      	ldr	r3, [r7, #28]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000484 	.word	0x20000484
 8004210:	20000498 	.word	0x20000498

08004214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004218:	4b03      	ldr	r3, [pc, #12]	@ (8004228 <vTaskMissedYield+0x14>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	20000494 	.word	0x20000494

0800422c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004234:	f000 f852 	bl	80042dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004238:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <prvIdleTask+0x28>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d9f9      	bls.n	8004234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004240:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <prvIdleTask+0x2c>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004250:	e7f0      	b.n	8004234 <prvIdleTask+0x8>
 8004252:	bf00      	nop
 8004254:	20000384 	.word	0x20000384
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	e00c      	b.n	8004282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <prvInitialiseTaskLists+0x60>)
 8004274:	4413      	add	r3, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fe6a 	bl	8002f50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3301      	adds	r3, #1
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b06      	cmp	r3, #6
 8004286:	d9ef      	bls.n	8004268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004288:	480d      	ldr	r0, [pc, #52]	@ (80042c0 <prvInitialiseTaskLists+0x64>)
 800428a:	f7fe fe61 	bl	8002f50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800428e:	480d      	ldr	r0, [pc, #52]	@ (80042c4 <prvInitialiseTaskLists+0x68>)
 8004290:	f7fe fe5e 	bl	8002f50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004294:	480c      	ldr	r0, [pc, #48]	@ (80042c8 <prvInitialiseTaskLists+0x6c>)
 8004296:	f7fe fe5b 	bl	8002f50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800429a:	480c      	ldr	r0, [pc, #48]	@ (80042cc <prvInitialiseTaskLists+0x70>)
 800429c:	f7fe fe58 	bl	8002f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042a0:	480b      	ldr	r0, [pc, #44]	@ (80042d0 <prvInitialiseTaskLists+0x74>)
 80042a2:	f7fe fe55 	bl	8002f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <prvInitialiseTaskLists+0x78>)
 80042a8:	4a05      	ldr	r2, [pc, #20]	@ (80042c0 <prvInitialiseTaskLists+0x64>)
 80042aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <prvInitialiseTaskLists+0x7c>)
 80042ae:	4a05      	ldr	r2, [pc, #20]	@ (80042c4 <prvInitialiseTaskLists+0x68>)
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000384 	.word	0x20000384
 80042c0:	20000410 	.word	0x20000410
 80042c4:	20000424 	.word	0x20000424
 80042c8:	20000440 	.word	0x20000440
 80042cc:	20000454 	.word	0x20000454
 80042d0:	2000046c 	.word	0x2000046c
 80042d4:	20000438 	.word	0x20000438
 80042d8:	2000043c 	.word	0x2000043c

080042dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042e2:	e019      	b.n	8004318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042e4:	f000 fab8 	bl	8004858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <prvCheckTasksWaitingTermination+0x50>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe feb5 	bl	8003064 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <prvCheckTasksWaitingTermination+0x54>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a0b      	ldr	r2, [pc, #44]	@ (8004330 <prvCheckTasksWaitingTermination+0x54>)
 8004302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004304:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <prvCheckTasksWaitingTermination+0x58>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3b01      	subs	r3, #1
 800430a:	4a0a      	ldr	r2, [pc, #40]	@ (8004334 <prvCheckTasksWaitingTermination+0x58>)
 800430c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800430e:	f000 fad5 	bl	80048bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f810 	bl	8004338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <prvCheckTasksWaitingTermination+0x58>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e1      	bne.n	80042e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000454 	.word	0x20000454
 8004330:	20000480 	.word	0x20000480
 8004334:	20000468 	.word	0x20000468

08004338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004346:	2b00      	cmp	r3, #0
 8004348:	d108      	bne.n	800435c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fc30 	bl	8004bb4 <vPortFree>
				vPortFree( pxTCB );
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fc2d 	bl	8004bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800435a:	e019      	b.n	8004390 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004362:	2b01      	cmp	r3, #1
 8004364:	d103      	bne.n	800436e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fc24 	bl	8004bb4 <vPortFree>
	}
 800436c:	e010      	b.n	8004390 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004374:	2b02      	cmp	r3, #2
 8004376:	d00b      	beq.n	8004390 <prvDeleteTCB+0x58>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	60fb      	str	r3, [r7, #12]
}
 800438a:	bf00      	nop
 800438c:	bf00      	nop
 800438e:	e7fd      	b.n	800438c <prvDeleteTCB+0x54>
	}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <prvResetNextTaskUnblockTime+0x38>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <prvResetNextTaskUnblockTime+0x3c>)
 80043aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043b0:	e008      	b.n	80043c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b2:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <prvResetNextTaskUnblockTime+0x38>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4a04      	ldr	r2, [pc, #16]	@ (80043d4 <prvResetNextTaskUnblockTime+0x3c>)
 80043c2:	6013      	str	r3, [r2, #0]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000438 	.word	0x20000438
 80043d4:	200004a0 	.word	0x200004a0

080043d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043de:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <xTaskGetSchedulerState+0x34>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043e6:	2301      	movs	r3, #1
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	e008      	b.n	80043fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ec:	4b08      	ldr	r3, [pc, #32]	@ (8004410 <xTaskGetSchedulerState+0x38>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043f4:	2302      	movs	r3, #2
 80043f6:	607b      	str	r3, [r7, #4]
 80043f8:	e001      	b.n	80043fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043fe:	687b      	ldr	r3, [r7, #4]
	}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	2000048c 	.word	0x2000048c
 8004410:	200004a8 	.word	0x200004a8

08004414 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d070      	beq.n	800450c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800442a:	4b3b      	ldr	r3, [pc, #236]	@ (8004518 <xTaskPriorityDisinherit+0x104>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d00b      	beq.n	800444c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	e7fd      	b.n	8004448 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	60bb      	str	r3, [r7, #8]
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	e7fd      	b.n	8004468 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447e:	429a      	cmp	r2, r3
 8004480:	d044      	beq.n	800450c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004486:	2b00      	cmp	r3, #0
 8004488:	d140      	bne.n	800450c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fde8 	bl	8003064 <uxListRemove>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d115      	bne.n	80044c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449e:	491f      	ldr	r1, [pc, #124]	@ (800451c <xTaskPriorityDisinherit+0x108>)
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <xTaskPriorityDisinherit+0xb2>
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	2201      	movs	r2, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43da      	mvns	r2, r3
 80044bc:	4b18      	ldr	r3, [pc, #96]	@ (8004520 <xTaskPriorityDisinherit+0x10c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4013      	ands	r3, r2
 80044c2:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <xTaskPriorityDisinherit+0x10c>)
 80044c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	f1c3 0207 	rsb	r2, r3, #7
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	2201      	movs	r2, #1
 80044e0:	409a      	lsls	r2, r3
 80044e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004520 <xTaskPriorityDisinherit+0x10c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004520 <xTaskPriorityDisinherit+0x10c>)
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4a08      	ldr	r2, [pc, #32]	@ (800451c <xTaskPriorityDisinherit+0x108>)
 80044fa:	441a      	add	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f7fe fd51 	bl	8002faa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800450c:	697b      	ldr	r3, [r7, #20]
	}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000380 	.word	0x20000380
 800451c:	20000384 	.word	0x20000384
 8004520:	20000488 	.word	0x20000488

08004524 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800452e:	4b29      	ldr	r3, [pc, #164]	@ (80045d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004534:	4b28      	ldr	r3, [pc, #160]	@ (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fd92 	bl	8003064 <uxListRemove>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004546:	4b24      	ldr	r3, [pc, #144]	@ (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	2201      	movs	r2, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43da      	mvns	r2, r3
 8004554:	4b21      	ldr	r3, [pc, #132]	@ (80045dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4013      	ands	r3, r2
 800455a:	4a20      	ldr	r2, [pc, #128]	@ (80045dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800455c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004564:	d10a      	bne.n	800457c <prvAddCurrentTaskToDelayedList+0x58>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800456c:	4b1a      	ldr	r3, [pc, #104]	@ (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3304      	adds	r3, #4
 8004572:	4619      	mov	r1, r3
 8004574:	481a      	ldr	r0, [pc, #104]	@ (80045e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004576:	f7fe fd18 	bl	8002faa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800457a:	e026      	b.n	80045ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004584:	4b14      	ldr	r3, [pc, #80]	@ (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	429a      	cmp	r2, r3
 8004592:	d209      	bcs.n	80045a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004594:	4b13      	ldr	r3, [pc, #76]	@ (80045e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b0f      	ldr	r3, [pc, #60]	@ (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3304      	adds	r3, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f7fe fd26 	bl	8002ff2 <vListInsert>
}
 80045a6:	e010      	b.n	80045ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045a8:	4b0f      	ldr	r3, [pc, #60]	@ (80045e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f7fe fd1c 	bl	8002ff2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045ba:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d202      	bcs.n	80045ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045c4:	4a09      	ldr	r2, [pc, #36]	@ (80045ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6013      	str	r3, [r2, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000484 	.word	0x20000484
 80045d8:	20000380 	.word	0x20000380
 80045dc:	20000488 	.word	0x20000488
 80045e0:	2000046c 	.word	0x2000046c
 80045e4:	2000043c 	.word	0x2000043c
 80045e8:	20000438 	.word	0x20000438
 80045ec:	200004a0 	.word	0x200004a0

080045f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3b04      	subs	r3, #4
 8004600:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3b04      	subs	r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3b04      	subs	r3, #4
 800461e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004620:	4a0c      	ldr	r2, [pc, #48]	@ (8004654 <pxPortInitialiseStack+0x64>)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b14      	subs	r3, #20
 800462a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3b04      	subs	r3, #4
 8004636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f06f 0202 	mvn.w	r2, #2
 800463e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3b20      	subs	r3, #32
 8004644:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004646:	68fb      	ldr	r3, [r7, #12]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	08004659 	.word	0x08004659

08004658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004662:	4b13      	ldr	r3, [pc, #76]	@ (80046b0 <prvTaskExitError+0x58>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800466a:	d00b      	beq.n	8004684 <prvTaskExitError+0x2c>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60fb      	str	r3, [r7, #12]
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <prvTaskExitError+0x28>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60bb      	str	r3, [r7, #8]
}
 8004696:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004698:	bf00      	nop
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0fc      	beq.n	800469a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2000000c 	.word	0x2000000c
	...

080046c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <pxCurrentTCBConst2>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	6808      	ldr	r0, [r1, #0]
 80046c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	f380 8809 	msr	PSP, r0
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8811 	msr	BASEPRI, r0
 80046da:	4770      	bx	lr
 80046dc:	f3af 8000 	nop.w

080046e0 <pxCurrentTCBConst2>:
 80046e0:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046e8:	4808      	ldr	r0, [pc, #32]	@ (800470c <prvPortStartFirstTask+0x24>)
 80046ea:	6800      	ldr	r0, [r0, #0]
 80046ec:	6800      	ldr	r0, [r0, #0]
 80046ee:	f380 8808 	msr	MSP, r0
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8814 	msr	CONTROL, r0
 80046fa:	b662      	cpsie	i
 80046fc:	b661      	cpsie	f
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	df00      	svc	0
 8004708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800470a:	bf00      	nop
 800470c:	e000ed08 	.word	0xe000ed08

08004710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004716:	4b47      	ldr	r3, [pc, #284]	@ (8004834 <xPortStartScheduler+0x124>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a47      	ldr	r2, [pc, #284]	@ (8004838 <xPortStartScheduler+0x128>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10b      	bne.n	8004738 <xPortStartScheduler+0x28>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	613b      	str	r3, [r7, #16]
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004738:	4b3e      	ldr	r3, [pc, #248]	@ (8004834 <xPortStartScheduler+0x124>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3f      	ldr	r2, [pc, #252]	@ (800483c <xPortStartScheduler+0x12c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10b      	bne.n	800475a <xPortStartScheduler+0x4a>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60fb      	str	r3, [r7, #12]
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800475a:	4b39      	ldr	r3, [pc, #228]	@ (8004840 <xPortStartScheduler+0x130>)
 800475c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	22ff      	movs	r2, #255	@ 0xff
 800476a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800477c:	b2da      	uxtb	r2, r3
 800477e:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <xPortStartScheduler+0x134>)
 8004780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004782:	4b31      	ldr	r3, [pc, #196]	@ (8004848 <xPortStartScheduler+0x138>)
 8004784:	2207      	movs	r2, #7
 8004786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004788:	e009      	b.n	800479e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800478a:	4b2f      	ldr	r3, [pc, #188]	@ (8004848 <xPortStartScheduler+0x138>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3b01      	subs	r3, #1
 8004790:	4a2d      	ldr	r2, [pc, #180]	@ (8004848 <xPortStartScheduler+0x138>)
 8004792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800479e:	78fb      	ldrb	r3, [r7, #3]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a6:	2b80      	cmp	r3, #128	@ 0x80
 80047a8:	d0ef      	beq.n	800478a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047aa:	4b27      	ldr	r3, [pc, #156]	@ (8004848 <xPortStartScheduler+0x138>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1c3 0307 	rsb	r3, r3, #7
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d00b      	beq.n	80047ce <xPortStartScheduler+0xbe>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	60bb      	str	r3, [r7, #8]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004848 <xPortStartScheduler+0x138>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <xPortStartScheduler+0x138>)
 80047d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <xPortStartScheduler+0x138>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047e0:	4a19      	ldr	r2, [pc, #100]	@ (8004848 <xPortStartScheduler+0x138>)
 80047e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047ec:	4b17      	ldr	r3, [pc, #92]	@ (800484c <xPortStartScheduler+0x13c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a16      	ldr	r2, [pc, #88]	@ (800484c <xPortStartScheduler+0x13c>)
 80047f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047f8:	4b14      	ldr	r3, [pc, #80]	@ (800484c <xPortStartScheduler+0x13c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a13      	ldr	r2, [pc, #76]	@ (800484c <xPortStartScheduler+0x13c>)
 80047fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004804:	f000 f8da 	bl	80049bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004808:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <xPortStartScheduler+0x140>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800480e:	f000 f8f9 	bl	8004a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <xPortStartScheduler+0x144>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a0f      	ldr	r2, [pc, #60]	@ (8004854 <xPortStartScheduler+0x144>)
 8004818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800481c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800481e:	f7ff ff63 	bl	80046e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004822:	f7ff fb97 	bl	8003f54 <vTaskSwitchContext>
	prvTaskExitError();
 8004826:	f7ff ff17 	bl	8004658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	e000ed00 	.word	0xe000ed00
 8004838:	410fc271 	.word	0x410fc271
 800483c:	410fc270 	.word	0x410fc270
 8004840:	e000e400 	.word	0xe000e400
 8004844:	200004ac 	.word	0x200004ac
 8004848:	200004b0 	.word	0x200004b0
 800484c:	e000ed20 	.word	0xe000ed20
 8004850:	2000000c 	.word	0x2000000c
 8004854:	e000ef34 	.word	0xe000ef34

08004858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	607b      	str	r3, [r7, #4]
}
 8004870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004872:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <vPortEnterCritical+0x5c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	4a0e      	ldr	r2, [pc, #56]	@ (80048b4 <vPortEnterCritical+0x5c>)
 800487a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800487c:	4b0d      	ldr	r3, [pc, #52]	@ (80048b4 <vPortEnterCritical+0x5c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d110      	bne.n	80048a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004884:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <vPortEnterCritical+0x60>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	603b      	str	r3, [r7, #0]
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	e7fd      	b.n	80048a2 <vPortEnterCritical+0x4a>
	}
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048c2:	4b12      	ldr	r3, [pc, #72]	@ (800490c <vPortExitCritical+0x50>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <vPortExitCritical+0x26>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	607b      	str	r3, [r7, #4]
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	e7fd      	b.n	80048de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048e2:	4b0a      	ldr	r3, [pc, #40]	@ (800490c <vPortExitCritical+0x50>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	4a08      	ldr	r2, [pc, #32]	@ (800490c <vPortExitCritical+0x50>)
 80048ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048ec:	4b07      	ldr	r3, [pc, #28]	@ (800490c <vPortExitCritical+0x50>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <vPortExitCritical+0x44>
 80048f4:	2300      	movs	r3, #0
 80048f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	2000000c 	.word	0x2000000c

08004910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004910:	f3ef 8009 	mrs	r0, PSP
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <pxCurrentTCBConst>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f01e 0f10 	tst.w	lr, #16
 8004920:	bf08      	it	eq
 8004922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004934:	f380 8811 	msr	BASEPRI, r0
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f7ff fb08 	bl	8003f54 <vTaskSwitchContext>
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f380 8811 	msr	BASEPRI, r0
 800494c:	bc09      	pop	{r0, r3}
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004956:	f01e 0f10 	tst.w	lr, #16
 800495a:	bf08      	it	eq
 800495c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004960:	f380 8809 	msr	PSP, r0
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst>:
 8004970:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
}
 8004990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004992:	f7ff fa25 	bl	8003de0 <xTaskIncrementTick>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800499c:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <SysTick_Handler+0x40>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f383 8811 	msr	BASEPRI, r3
}
 80049ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049c6:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <vPortSetupTimerInterrupt+0x38>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049cc:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <vPortSetupTimerInterrupt+0x3c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0a      	ldr	r2, [pc, #40]	@ (80049fc <vPortSetupTimerInterrupt+0x40>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	4a09      	ldr	r2, [pc, #36]	@ (8004a00 <vPortSetupTimerInterrupt+0x44>)
 80049da:	3b01      	subs	r3, #1
 80049dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049de:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049e0:	2207      	movs	r2, #7
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000e010 	.word	0xe000e010
 80049f4:	e000e018 	.word	0xe000e018
 80049f8:	20000000 	.word	0x20000000
 80049fc:	10624dd3 	.word	0x10624dd3
 8004a00:	e000e014 	.word	0xe000e014

08004a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a14 <vPortEnableVFP+0x10>
 8004a08:	6801      	ldr	r1, [r0, #0]
 8004a0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a0e:	6001      	str	r1, [r0, #0]
 8004a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a12:	bf00      	nop
 8004a14:	e000ed88 	.word	0xe000ed88

08004a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	@ 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a24:	f7ff f930 	bl	8003c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a28:	4b5c      	ldr	r3, [pc, #368]	@ (8004b9c <pvPortMalloc+0x184>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a30:	f000 f924 	bl	8004c7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a34:	4b5a      	ldr	r3, [pc, #360]	@ (8004ba0 <pvPortMalloc+0x188>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 8095 	bne.w	8004b6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01e      	beq.n	8004a86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a48:	2208      	movs	r2, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d015      	beq.n	8004a86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	3308      	adds	r3, #8
 8004a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <pvPortMalloc+0x6e>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	617b      	str	r3, [r7, #20]
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d06f      	beq.n	8004b6c <pvPortMalloc+0x154>
 8004a8c:	4b45      	ldr	r3, [pc, #276]	@ (8004ba4 <pvPortMalloc+0x18c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d86a      	bhi.n	8004b6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a96:	4b44      	ldr	r3, [pc, #272]	@ (8004ba8 <pvPortMalloc+0x190>)
 8004a98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a9a:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <pvPortMalloc+0x190>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa0:	e004      	b.n	8004aac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d903      	bls.n	8004abe <pvPortMalloc+0xa6>
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f1      	bne.n	8004aa2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004abe:	4b37      	ldr	r3, [pc, #220]	@ (8004b9c <pvPortMalloc+0x184>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d051      	beq.n	8004b6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2208      	movs	r2, #8
 8004ace:	4413      	add	r3, r2
 8004ad0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	1ad2      	subs	r2, r2, r3
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d920      	bls.n	8004b2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <pvPortMalloc+0xfc>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	613b      	str	r3, [r7, #16]
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	e7fd      	b.n	8004b10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad2      	subs	r2, r2, r3
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b26:	69b8      	ldr	r0, [r7, #24]
 8004b28:	f000 f90a 	bl	8004d40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba4 <pvPortMalloc+0x18c>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba4 <pvPortMalloc+0x18c>)
 8004b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba4 <pvPortMalloc+0x18c>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bac <pvPortMalloc+0x194>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d203      	bcs.n	8004b4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b46:	4b17      	ldr	r3, [pc, #92]	@ (8004ba4 <pvPortMalloc+0x18c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a18      	ldr	r2, [pc, #96]	@ (8004bac <pvPortMalloc+0x194>)
 8004b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <pvPortMalloc+0x188>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b62:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <pvPortMalloc+0x198>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	4a11      	ldr	r2, [pc, #68]	@ (8004bb0 <pvPortMalloc+0x198>)
 8004b6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b6c:	f7ff f89a 	bl	8003ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <pvPortMalloc+0x17a>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60fb      	str	r3, [r7, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	e7fd      	b.n	8004b8e <pvPortMalloc+0x176>
	return pvReturn;
 8004b92:	69fb      	ldr	r3, [r7, #28]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3728      	adds	r7, #40	@ 0x28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	200040bc 	.word	0x200040bc
 8004ba0:	200040d0 	.word	0x200040d0
 8004ba4:	200040c0 	.word	0x200040c0
 8004ba8:	200040b4 	.word	0x200040b4
 8004bac:	200040c4 	.word	0x200040c4
 8004bb0:	200040c8 	.word	0x200040c8

08004bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d04f      	beq.n	8004c66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	425b      	negs	r3, r3
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4413      	add	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4b25      	ldr	r3, [pc, #148]	@ (8004c70 <vPortFree+0xbc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <vPortFree+0x46>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	60fb      	str	r3, [r7, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	e7fd      	b.n	8004bf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <vPortFree+0x66>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60bb      	str	r3, [r7, #8]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	4b14      	ldr	r3, [pc, #80]	@ (8004c70 <vPortFree+0xbc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01e      	beq.n	8004c66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d11a      	bne.n	8004c66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4b0e      	ldr	r3, [pc, #56]	@ (8004c70 <vPortFree+0xbc>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c40:	f7ff f822 	bl	8003c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <vPortFree+0xc0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	4a09      	ldr	r2, [pc, #36]	@ (8004c74 <vPortFree+0xc0>)
 8004c50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c52:	6938      	ldr	r0, [r7, #16]
 8004c54:	f000 f874 	bl	8004d40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c58:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <vPortFree+0xc4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a06      	ldr	r2, [pc, #24]	@ (8004c78 <vPortFree+0xc4>)
 8004c60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c62:	f7ff f81f 	bl	8003ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c66:	bf00      	nop
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	200040d0 	.word	0x200040d0
 8004c74:	200040c0 	.word	0x200040c0
 8004c78:	200040cc 	.word	0x200040cc

08004c7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004c86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c88:	4b27      	ldr	r3, [pc, #156]	@ (8004d28 <prvHeapInit+0xac>)
 8004c8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00c      	beq.n	8004cb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3307      	adds	r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	4a1f      	ldr	r2, [pc, #124]	@ (8004d28 <prvHeapInit+0xac>)
 8004cac:	4413      	add	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d2c <prvHeapInit+0xb0>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cba:	4b1c      	ldr	r3, [pc, #112]	@ (8004d2c <prvHeapInit+0xb0>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cc8:	2208      	movs	r2, #8
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a15      	ldr	r2, [pc, #84]	@ (8004d30 <prvHeapInit+0xb4>)
 8004cdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cde:	4b14      	ldr	r3, [pc, #80]	@ (8004d30 <prvHeapInit+0xb4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ce6:	4b12      	ldr	r3, [pc, #72]	@ (8004d30 <prvHeapInit+0xb4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d30 <prvHeapInit+0xb4>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a0a      	ldr	r2, [pc, #40]	@ (8004d34 <prvHeapInit+0xb8>)
 8004d0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a09      	ldr	r2, [pc, #36]	@ (8004d38 <prvHeapInit+0xbc>)
 8004d12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d14:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <prvHeapInit+0xc0>)
 8004d16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d1a:	601a      	str	r2, [r3, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	200004b4 	.word	0x200004b4
 8004d2c:	200040b4 	.word	0x200040b4
 8004d30:	200040bc 	.word	0x200040bc
 8004d34:	200040c4 	.word	0x200040c4
 8004d38:	200040c0 	.word	0x200040c0
 8004d3c:	200040d0 	.word	0x200040d0

08004d40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d48:	4b28      	ldr	r3, [pc, #160]	@ (8004dec <prvInsertBlockIntoFreeList+0xac>)
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e002      	b.n	8004d54 <prvInsertBlockIntoFreeList+0x14>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d8f7      	bhi.n	8004d4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4413      	add	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d108      	bne.n	8004d82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	441a      	add	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	441a      	add	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d118      	bne.n	8004dc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b15      	ldr	r3, [pc, #84]	@ (8004df0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d00d      	beq.n	8004dbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e008      	b.n	8004dd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e003      	b.n	8004dd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d002      	beq.n	8004dde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	200040b4 	.word	0x200040b4
 8004df0:	200040bc 	.word	0x200040bc

08004df4 <siprintf>:
 8004df4:	b40e      	push	{r1, r2, r3}
 8004df6:	b500      	push	{lr}
 8004df8:	b09c      	sub	sp, #112	@ 0x70
 8004dfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8004dfc:	9002      	str	r0, [sp, #8]
 8004dfe:	9006      	str	r0, [sp, #24]
 8004e00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e04:	4809      	ldr	r0, [pc, #36]	@ (8004e2c <siprintf+0x38>)
 8004e06:	9107      	str	r1, [sp, #28]
 8004e08:	9104      	str	r1, [sp, #16]
 8004e0a:	4909      	ldr	r1, [pc, #36]	@ (8004e30 <siprintf+0x3c>)
 8004e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e10:	9105      	str	r1, [sp, #20]
 8004e12:	6800      	ldr	r0, [r0, #0]
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	a902      	add	r1, sp, #8
 8004e18:	f000 f9a2 	bl	8005160 <_svfiprintf_r>
 8004e1c:	9b02      	ldr	r3, [sp, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	b01c      	add	sp, #112	@ 0x70
 8004e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e28:	b003      	add	sp, #12
 8004e2a:	4770      	bx	lr
 8004e2c:	20000010 	.word	0x20000010
 8004e30:	ffff0208 	.word	0xffff0208

08004e34 <memset>:
 8004e34:	4402      	add	r2, r0
 8004e36:	4603      	mov	r3, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <__errno>:
 8004e44:	4b01      	ldr	r3, [pc, #4]	@ (8004e4c <__errno+0x8>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000010 	.word	0x20000010

08004e50 <__libc_init_array>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4d0d      	ldr	r5, [pc, #52]	@ (8004e88 <__libc_init_array+0x38>)
 8004e54:	4c0d      	ldr	r4, [pc, #52]	@ (8004e8c <__libc_init_array+0x3c>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	42a6      	cmp	r6, r4
 8004e5e:	d109      	bne.n	8004e74 <__libc_init_array+0x24>
 8004e60:	4d0b      	ldr	r5, [pc, #44]	@ (8004e90 <__libc_init_array+0x40>)
 8004e62:	4c0c      	ldr	r4, [pc, #48]	@ (8004e94 <__libc_init_array+0x44>)
 8004e64:	f000 fc66 	bl	8005734 <_init>
 8004e68:	1b64      	subs	r4, r4, r5
 8004e6a:	10a4      	asrs	r4, r4, #2
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	42a6      	cmp	r6, r4
 8004e70:	d105      	bne.n	8004e7e <__libc_init_array+0x2e>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e78:	4798      	blx	r3
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e7ee      	b.n	8004e5c <__libc_init_array+0xc>
 8004e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e82:	4798      	blx	r3
 8004e84:	3601      	adds	r6, #1
 8004e86:	e7f2      	b.n	8004e6e <__libc_init_array+0x1e>
 8004e88:	080059a8 	.word	0x080059a8
 8004e8c:	080059a8 	.word	0x080059a8
 8004e90:	080059a8 	.word	0x080059a8
 8004e94:	080059ac 	.word	0x080059ac

08004e98 <__retarget_lock_acquire_recursive>:
 8004e98:	4770      	bx	lr

08004e9a <__retarget_lock_release_recursive>:
 8004e9a:	4770      	bx	lr

08004e9c <memcpy>:
 8004e9c:	440a      	add	r2, r1
 8004e9e:	4291      	cmp	r1, r2
 8004ea0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004ea4:	d100      	bne.n	8004ea8 <memcpy+0xc>
 8004ea6:	4770      	bx	lr
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb2:	4291      	cmp	r1, r2
 8004eb4:	d1f9      	bne.n	8004eaa <memcpy+0xe>
 8004eb6:	bd10      	pop	{r4, pc}

08004eb8 <_free_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4605      	mov	r5, r0
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	d041      	beq.n	8004f44 <_free_r+0x8c>
 8004ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec4:	1f0c      	subs	r4, r1, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bfb8      	it	lt
 8004eca:	18e4      	addlt	r4, r4, r3
 8004ecc:	f000 f8e0 	bl	8005090 <__malloc_lock>
 8004ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <_free_r+0x90>)
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	b933      	cbnz	r3, 8004ee4 <_free_r+0x2c>
 8004ed6:	6063      	str	r3, [r4, #4]
 8004ed8:	6014      	str	r4, [r2, #0]
 8004eda:	4628      	mov	r0, r5
 8004edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee0:	f000 b8dc 	b.w	800509c <__malloc_unlock>
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	d908      	bls.n	8004efa <_free_r+0x42>
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	1821      	adds	r1, r4, r0
 8004eec:	428b      	cmp	r3, r1
 8004eee:	bf01      	itttt	eq
 8004ef0:	6819      	ldreq	r1, [r3, #0]
 8004ef2:	685b      	ldreq	r3, [r3, #4]
 8004ef4:	1809      	addeq	r1, r1, r0
 8004ef6:	6021      	streq	r1, [r4, #0]
 8004ef8:	e7ed      	b.n	8004ed6 <_free_r+0x1e>
 8004efa:	461a      	mov	r2, r3
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b10b      	cbz	r3, 8004f04 <_free_r+0x4c>
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	d9fa      	bls.n	8004efa <_free_r+0x42>
 8004f04:	6811      	ldr	r1, [r2, #0]
 8004f06:	1850      	adds	r0, r2, r1
 8004f08:	42a0      	cmp	r0, r4
 8004f0a:	d10b      	bne.n	8004f24 <_free_r+0x6c>
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	4401      	add	r1, r0
 8004f10:	1850      	adds	r0, r2, r1
 8004f12:	4283      	cmp	r3, r0
 8004f14:	6011      	str	r1, [r2, #0]
 8004f16:	d1e0      	bne.n	8004eda <_free_r+0x22>
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	6053      	str	r3, [r2, #4]
 8004f1e:	4408      	add	r0, r1
 8004f20:	6010      	str	r0, [r2, #0]
 8004f22:	e7da      	b.n	8004eda <_free_r+0x22>
 8004f24:	d902      	bls.n	8004f2c <_free_r+0x74>
 8004f26:	230c      	movs	r3, #12
 8004f28:	602b      	str	r3, [r5, #0]
 8004f2a:	e7d6      	b.n	8004eda <_free_r+0x22>
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	1821      	adds	r1, r4, r0
 8004f30:	428b      	cmp	r3, r1
 8004f32:	bf04      	itt	eq
 8004f34:	6819      	ldreq	r1, [r3, #0]
 8004f36:	685b      	ldreq	r3, [r3, #4]
 8004f38:	6063      	str	r3, [r4, #4]
 8004f3a:	bf04      	itt	eq
 8004f3c:	1809      	addeq	r1, r1, r0
 8004f3e:	6021      	streq	r1, [r4, #0]
 8004f40:	6054      	str	r4, [r2, #4]
 8004f42:	e7ca      	b.n	8004eda <_free_r+0x22>
 8004f44:	bd38      	pop	{r3, r4, r5, pc}
 8004f46:	bf00      	nop
 8004f48:	20004218 	.word	0x20004218

08004f4c <sbrk_aligned>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4e0f      	ldr	r6, [pc, #60]	@ (8004f8c <sbrk_aligned+0x40>)
 8004f50:	460c      	mov	r4, r1
 8004f52:	6831      	ldr	r1, [r6, #0]
 8004f54:	4605      	mov	r5, r0
 8004f56:	b911      	cbnz	r1, 8004f5e <sbrk_aligned+0x12>
 8004f58:	f000 fba6 	bl	80056a8 <_sbrk_r>
 8004f5c:	6030      	str	r0, [r6, #0]
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 fba1 	bl	80056a8 <_sbrk_r>
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	d103      	bne.n	8004f72 <sbrk_aligned+0x26>
 8004f6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004f6e:	4620      	mov	r0, r4
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
 8004f72:	1cc4      	adds	r4, r0, #3
 8004f74:	f024 0403 	bic.w	r4, r4, #3
 8004f78:	42a0      	cmp	r0, r4
 8004f7a:	d0f8      	beq.n	8004f6e <sbrk_aligned+0x22>
 8004f7c:	1a21      	subs	r1, r4, r0
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 fb92 	bl	80056a8 <_sbrk_r>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d1f2      	bne.n	8004f6e <sbrk_aligned+0x22>
 8004f88:	e7ef      	b.n	8004f6a <sbrk_aligned+0x1e>
 8004f8a:	bf00      	nop
 8004f8c:	20004214 	.word	0x20004214

08004f90 <_malloc_r>:
 8004f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f94:	1ccd      	adds	r5, r1, #3
 8004f96:	f025 0503 	bic.w	r5, r5, #3
 8004f9a:	3508      	adds	r5, #8
 8004f9c:	2d0c      	cmp	r5, #12
 8004f9e:	bf38      	it	cc
 8004fa0:	250c      	movcc	r5, #12
 8004fa2:	2d00      	cmp	r5, #0
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	db01      	blt.n	8004fac <_malloc_r+0x1c>
 8004fa8:	42a9      	cmp	r1, r5
 8004faa:	d904      	bls.n	8004fb6 <_malloc_r+0x26>
 8004fac:	230c      	movs	r3, #12
 8004fae:	6033      	str	r3, [r6, #0]
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800508c <_malloc_r+0xfc>
 8004fba:	f000 f869 	bl	8005090 <__malloc_lock>
 8004fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc2:	461c      	mov	r4, r3
 8004fc4:	bb44      	cbnz	r4, 8005018 <_malloc_r+0x88>
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f7ff ffbf 	bl	8004f4c <sbrk_aligned>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	d158      	bne.n	8005086 <_malloc_r+0xf6>
 8004fd4:	f8d8 4000 	ldr.w	r4, [r8]
 8004fd8:	4627      	mov	r7, r4
 8004fda:	2f00      	cmp	r7, #0
 8004fdc:	d143      	bne.n	8005066 <_malloc_r+0xd6>
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	d04b      	beq.n	800507a <_malloc_r+0xea>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	eb04 0903 	add.w	r9, r4, r3
 8004fec:	f000 fb5c 	bl	80056a8 <_sbrk_r>
 8004ff0:	4581      	cmp	r9, r0
 8004ff2:	d142      	bne.n	800507a <_malloc_r+0xea>
 8004ff4:	6821      	ldr	r1, [r4, #0]
 8004ff6:	1a6d      	subs	r5, r5, r1
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f7ff ffa6 	bl	8004f4c <sbrk_aligned>
 8005000:	3001      	adds	r0, #1
 8005002:	d03a      	beq.n	800507a <_malloc_r+0xea>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	442b      	add	r3, r5
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	f8d8 3000 	ldr.w	r3, [r8]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	bb62      	cbnz	r2, 800506c <_malloc_r+0xdc>
 8005012:	f8c8 7000 	str.w	r7, [r8]
 8005016:	e00f      	b.n	8005038 <_malloc_r+0xa8>
 8005018:	6822      	ldr	r2, [r4, #0]
 800501a:	1b52      	subs	r2, r2, r5
 800501c:	d420      	bmi.n	8005060 <_malloc_r+0xd0>
 800501e:	2a0b      	cmp	r2, #11
 8005020:	d917      	bls.n	8005052 <_malloc_r+0xc2>
 8005022:	1961      	adds	r1, r4, r5
 8005024:	42a3      	cmp	r3, r4
 8005026:	6025      	str	r5, [r4, #0]
 8005028:	bf18      	it	ne
 800502a:	6059      	strne	r1, [r3, #4]
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	bf08      	it	eq
 8005030:	f8c8 1000 	streq.w	r1, [r8]
 8005034:	5162      	str	r2, [r4, r5]
 8005036:	604b      	str	r3, [r1, #4]
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f82f 	bl	800509c <__malloc_unlock>
 800503e:	f104 000b 	add.w	r0, r4, #11
 8005042:	1d23      	adds	r3, r4, #4
 8005044:	f020 0007 	bic.w	r0, r0, #7
 8005048:	1ac2      	subs	r2, r0, r3
 800504a:	bf1c      	itt	ne
 800504c:	1a1b      	subne	r3, r3, r0
 800504e:	50a3      	strne	r3, [r4, r2]
 8005050:	e7af      	b.n	8004fb2 <_malloc_r+0x22>
 8005052:	6862      	ldr	r2, [r4, #4]
 8005054:	42a3      	cmp	r3, r4
 8005056:	bf0c      	ite	eq
 8005058:	f8c8 2000 	streq.w	r2, [r8]
 800505c:	605a      	strne	r2, [r3, #4]
 800505e:	e7eb      	b.n	8005038 <_malloc_r+0xa8>
 8005060:	4623      	mov	r3, r4
 8005062:	6864      	ldr	r4, [r4, #4]
 8005064:	e7ae      	b.n	8004fc4 <_malloc_r+0x34>
 8005066:	463c      	mov	r4, r7
 8005068:	687f      	ldr	r7, [r7, #4]
 800506a:	e7b6      	b.n	8004fda <_malloc_r+0x4a>
 800506c:	461a      	mov	r2, r3
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	42a3      	cmp	r3, r4
 8005072:	d1fb      	bne.n	800506c <_malloc_r+0xdc>
 8005074:	2300      	movs	r3, #0
 8005076:	6053      	str	r3, [r2, #4]
 8005078:	e7de      	b.n	8005038 <_malloc_r+0xa8>
 800507a:	230c      	movs	r3, #12
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	4630      	mov	r0, r6
 8005080:	f000 f80c 	bl	800509c <__malloc_unlock>
 8005084:	e794      	b.n	8004fb0 <_malloc_r+0x20>
 8005086:	6005      	str	r5, [r0, #0]
 8005088:	e7d6      	b.n	8005038 <_malloc_r+0xa8>
 800508a:	bf00      	nop
 800508c:	20004218 	.word	0x20004218

08005090 <__malloc_lock>:
 8005090:	4801      	ldr	r0, [pc, #4]	@ (8005098 <__malloc_lock+0x8>)
 8005092:	f7ff bf01 	b.w	8004e98 <__retarget_lock_acquire_recursive>
 8005096:	bf00      	nop
 8005098:	20004210 	.word	0x20004210

0800509c <__malloc_unlock>:
 800509c:	4801      	ldr	r0, [pc, #4]	@ (80050a4 <__malloc_unlock+0x8>)
 800509e:	f7ff befc 	b.w	8004e9a <__retarget_lock_release_recursive>
 80050a2:	bf00      	nop
 80050a4:	20004210 	.word	0x20004210

080050a8 <__ssputs_r>:
 80050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	688e      	ldr	r6, [r1, #8]
 80050ae:	461f      	mov	r7, r3
 80050b0:	42be      	cmp	r6, r7
 80050b2:	680b      	ldr	r3, [r1, #0]
 80050b4:	4682      	mov	sl, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	4690      	mov	r8, r2
 80050ba:	d82d      	bhi.n	8005118 <__ssputs_r+0x70>
 80050bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050c4:	d026      	beq.n	8005114 <__ssputs_r+0x6c>
 80050c6:	6965      	ldr	r5, [r4, #20]
 80050c8:	6909      	ldr	r1, [r1, #16]
 80050ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050ce:	eba3 0901 	sub.w	r9, r3, r1
 80050d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050d6:	1c7b      	adds	r3, r7, #1
 80050d8:	444b      	add	r3, r9
 80050da:	106d      	asrs	r5, r5, #1
 80050dc:	429d      	cmp	r5, r3
 80050de:	bf38      	it	cc
 80050e0:	461d      	movcc	r5, r3
 80050e2:	0553      	lsls	r3, r2, #21
 80050e4:	d527      	bpl.n	8005136 <__ssputs_r+0x8e>
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7ff ff52 	bl	8004f90 <_malloc_r>
 80050ec:	4606      	mov	r6, r0
 80050ee:	b360      	cbz	r0, 800514a <__ssputs_r+0xa2>
 80050f0:	6921      	ldr	r1, [r4, #16]
 80050f2:	464a      	mov	r2, r9
 80050f4:	f7ff fed2 	bl	8004e9c <memcpy>
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005102:	81a3      	strh	r3, [r4, #12]
 8005104:	6126      	str	r6, [r4, #16]
 8005106:	6165      	str	r5, [r4, #20]
 8005108:	444e      	add	r6, r9
 800510a:	eba5 0509 	sub.w	r5, r5, r9
 800510e:	6026      	str	r6, [r4, #0]
 8005110:	60a5      	str	r5, [r4, #8]
 8005112:	463e      	mov	r6, r7
 8005114:	42be      	cmp	r6, r7
 8005116:	d900      	bls.n	800511a <__ssputs_r+0x72>
 8005118:	463e      	mov	r6, r7
 800511a:	6820      	ldr	r0, [r4, #0]
 800511c:	4632      	mov	r2, r6
 800511e:	4641      	mov	r1, r8
 8005120:	f000 faa8 	bl	8005674 <memmove>
 8005124:	68a3      	ldr	r3, [r4, #8]
 8005126:	1b9b      	subs	r3, r3, r6
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	4433      	add	r3, r6
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	2000      	movs	r0, #0
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	462a      	mov	r2, r5
 8005138:	f000 fac6 	bl	80056c8 <_realloc_r>
 800513c:	4606      	mov	r6, r0
 800513e:	2800      	cmp	r0, #0
 8005140:	d1e0      	bne.n	8005104 <__ssputs_r+0x5c>
 8005142:	6921      	ldr	r1, [r4, #16]
 8005144:	4650      	mov	r0, sl
 8005146:	f7ff feb7 	bl	8004eb8 <_free_r>
 800514a:	230c      	movs	r3, #12
 800514c:	f8ca 3000 	str.w	r3, [sl]
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800515c:	e7e9      	b.n	8005132 <__ssputs_r+0x8a>
	...

08005160 <_svfiprintf_r>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	4698      	mov	r8, r3
 8005166:	898b      	ldrh	r3, [r1, #12]
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	b09d      	sub	sp, #116	@ 0x74
 800516c:	4607      	mov	r7, r0
 800516e:	460d      	mov	r5, r1
 8005170:	4614      	mov	r4, r2
 8005172:	d510      	bpl.n	8005196 <_svfiprintf_r+0x36>
 8005174:	690b      	ldr	r3, [r1, #16]
 8005176:	b973      	cbnz	r3, 8005196 <_svfiprintf_r+0x36>
 8005178:	2140      	movs	r1, #64	@ 0x40
 800517a:	f7ff ff09 	bl	8004f90 <_malloc_r>
 800517e:	6028      	str	r0, [r5, #0]
 8005180:	6128      	str	r0, [r5, #16]
 8005182:	b930      	cbnz	r0, 8005192 <_svfiprintf_r+0x32>
 8005184:	230c      	movs	r3, #12
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800518c:	b01d      	add	sp, #116	@ 0x74
 800518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005192:	2340      	movs	r3, #64	@ 0x40
 8005194:	616b      	str	r3, [r5, #20]
 8005196:	2300      	movs	r3, #0
 8005198:	9309      	str	r3, [sp, #36]	@ 0x24
 800519a:	2320      	movs	r3, #32
 800519c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051a4:	2330      	movs	r3, #48	@ 0x30
 80051a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005344 <_svfiprintf_r+0x1e4>
 80051aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051ae:	f04f 0901 	mov.w	r9, #1
 80051b2:	4623      	mov	r3, r4
 80051b4:	469a      	mov	sl, r3
 80051b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ba:	b10a      	cbz	r2, 80051c0 <_svfiprintf_r+0x60>
 80051bc:	2a25      	cmp	r2, #37	@ 0x25
 80051be:	d1f9      	bne.n	80051b4 <_svfiprintf_r+0x54>
 80051c0:	ebba 0b04 	subs.w	fp, sl, r4
 80051c4:	d00b      	beq.n	80051de <_svfiprintf_r+0x7e>
 80051c6:	465b      	mov	r3, fp
 80051c8:	4622      	mov	r2, r4
 80051ca:	4629      	mov	r1, r5
 80051cc:	4638      	mov	r0, r7
 80051ce:	f7ff ff6b 	bl	80050a8 <__ssputs_r>
 80051d2:	3001      	adds	r0, #1
 80051d4:	f000 80a7 	beq.w	8005326 <_svfiprintf_r+0x1c6>
 80051d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051da:	445a      	add	r2, fp
 80051dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80051de:	f89a 3000 	ldrb.w	r3, [sl]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 809f 	beq.w	8005326 <_svfiprintf_r+0x1c6>
 80051e8:	2300      	movs	r3, #0
 80051ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051f2:	f10a 0a01 	add.w	sl, sl, #1
 80051f6:	9304      	str	r3, [sp, #16]
 80051f8:	9307      	str	r3, [sp, #28]
 80051fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005200:	4654      	mov	r4, sl
 8005202:	2205      	movs	r2, #5
 8005204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005208:	484e      	ldr	r0, [pc, #312]	@ (8005344 <_svfiprintf_r+0x1e4>)
 800520a:	f7fa fff9 	bl	8000200 <memchr>
 800520e:	9a04      	ldr	r2, [sp, #16]
 8005210:	b9d8      	cbnz	r0, 800524a <_svfiprintf_r+0xea>
 8005212:	06d0      	lsls	r0, r2, #27
 8005214:	bf44      	itt	mi
 8005216:	2320      	movmi	r3, #32
 8005218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800521c:	0711      	lsls	r1, r2, #28
 800521e:	bf44      	itt	mi
 8005220:	232b      	movmi	r3, #43	@ 0x2b
 8005222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005226:	f89a 3000 	ldrb.w	r3, [sl]
 800522a:	2b2a      	cmp	r3, #42	@ 0x2a
 800522c:	d015      	beq.n	800525a <_svfiprintf_r+0xfa>
 800522e:	9a07      	ldr	r2, [sp, #28]
 8005230:	4654      	mov	r4, sl
 8005232:	2000      	movs	r0, #0
 8005234:	f04f 0c0a 	mov.w	ip, #10
 8005238:	4621      	mov	r1, r4
 800523a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800523e:	3b30      	subs	r3, #48	@ 0x30
 8005240:	2b09      	cmp	r3, #9
 8005242:	d94b      	bls.n	80052dc <_svfiprintf_r+0x17c>
 8005244:	b1b0      	cbz	r0, 8005274 <_svfiprintf_r+0x114>
 8005246:	9207      	str	r2, [sp, #28]
 8005248:	e014      	b.n	8005274 <_svfiprintf_r+0x114>
 800524a:	eba0 0308 	sub.w	r3, r0, r8
 800524e:	fa09 f303 	lsl.w	r3, r9, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	9304      	str	r3, [sp, #16]
 8005256:	46a2      	mov	sl, r4
 8005258:	e7d2      	b.n	8005200 <_svfiprintf_r+0xa0>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	1d19      	adds	r1, r3, #4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	9103      	str	r1, [sp, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	bfbb      	ittet	lt
 8005266:	425b      	neglt	r3, r3
 8005268:	f042 0202 	orrlt.w	r2, r2, #2
 800526c:	9307      	strge	r3, [sp, #28]
 800526e:	9307      	strlt	r3, [sp, #28]
 8005270:	bfb8      	it	lt
 8005272:	9204      	strlt	r2, [sp, #16]
 8005274:	7823      	ldrb	r3, [r4, #0]
 8005276:	2b2e      	cmp	r3, #46	@ 0x2e
 8005278:	d10a      	bne.n	8005290 <_svfiprintf_r+0x130>
 800527a:	7863      	ldrb	r3, [r4, #1]
 800527c:	2b2a      	cmp	r3, #42	@ 0x2a
 800527e:	d132      	bne.n	80052e6 <_svfiprintf_r+0x186>
 8005280:	9b03      	ldr	r3, [sp, #12]
 8005282:	1d1a      	adds	r2, r3, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	9203      	str	r2, [sp, #12]
 8005288:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800528c:	3402      	adds	r4, #2
 800528e:	9305      	str	r3, [sp, #20]
 8005290:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005354 <_svfiprintf_r+0x1f4>
 8005294:	7821      	ldrb	r1, [r4, #0]
 8005296:	2203      	movs	r2, #3
 8005298:	4650      	mov	r0, sl
 800529a:	f7fa ffb1 	bl	8000200 <memchr>
 800529e:	b138      	cbz	r0, 80052b0 <_svfiprintf_r+0x150>
 80052a0:	9b04      	ldr	r3, [sp, #16]
 80052a2:	eba0 000a 	sub.w	r0, r0, sl
 80052a6:	2240      	movs	r2, #64	@ 0x40
 80052a8:	4082      	lsls	r2, r0
 80052aa:	4313      	orrs	r3, r2
 80052ac:	3401      	adds	r4, #1
 80052ae:	9304      	str	r3, [sp, #16]
 80052b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b4:	4824      	ldr	r0, [pc, #144]	@ (8005348 <_svfiprintf_r+0x1e8>)
 80052b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052ba:	2206      	movs	r2, #6
 80052bc:	f7fa ffa0 	bl	8000200 <memchr>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d036      	beq.n	8005332 <_svfiprintf_r+0x1d2>
 80052c4:	4b21      	ldr	r3, [pc, #132]	@ (800534c <_svfiprintf_r+0x1ec>)
 80052c6:	bb1b      	cbnz	r3, 8005310 <_svfiprintf_r+0x1b0>
 80052c8:	9b03      	ldr	r3, [sp, #12]
 80052ca:	3307      	adds	r3, #7
 80052cc:	f023 0307 	bic.w	r3, r3, #7
 80052d0:	3308      	adds	r3, #8
 80052d2:	9303      	str	r3, [sp, #12]
 80052d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d6:	4433      	add	r3, r6
 80052d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80052da:	e76a      	b.n	80051b2 <_svfiprintf_r+0x52>
 80052dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80052e0:	460c      	mov	r4, r1
 80052e2:	2001      	movs	r0, #1
 80052e4:	e7a8      	b.n	8005238 <_svfiprintf_r+0xd8>
 80052e6:	2300      	movs	r3, #0
 80052e8:	3401      	adds	r4, #1
 80052ea:	9305      	str	r3, [sp, #20]
 80052ec:	4619      	mov	r1, r3
 80052ee:	f04f 0c0a 	mov.w	ip, #10
 80052f2:	4620      	mov	r0, r4
 80052f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052f8:	3a30      	subs	r2, #48	@ 0x30
 80052fa:	2a09      	cmp	r2, #9
 80052fc:	d903      	bls.n	8005306 <_svfiprintf_r+0x1a6>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0c6      	beq.n	8005290 <_svfiprintf_r+0x130>
 8005302:	9105      	str	r1, [sp, #20]
 8005304:	e7c4      	b.n	8005290 <_svfiprintf_r+0x130>
 8005306:	fb0c 2101 	mla	r1, ip, r1, r2
 800530a:	4604      	mov	r4, r0
 800530c:	2301      	movs	r3, #1
 800530e:	e7f0      	b.n	80052f2 <_svfiprintf_r+0x192>
 8005310:	ab03      	add	r3, sp, #12
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	462a      	mov	r2, r5
 8005316:	4b0e      	ldr	r3, [pc, #56]	@ (8005350 <_svfiprintf_r+0x1f0>)
 8005318:	a904      	add	r1, sp, #16
 800531a:	4638      	mov	r0, r7
 800531c:	f3af 8000 	nop.w
 8005320:	1c42      	adds	r2, r0, #1
 8005322:	4606      	mov	r6, r0
 8005324:	d1d6      	bne.n	80052d4 <_svfiprintf_r+0x174>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	065b      	lsls	r3, r3, #25
 800532a:	f53f af2d 	bmi.w	8005188 <_svfiprintf_r+0x28>
 800532e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005330:	e72c      	b.n	800518c <_svfiprintf_r+0x2c>
 8005332:	ab03      	add	r3, sp, #12
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	462a      	mov	r2, r5
 8005338:	4b05      	ldr	r3, [pc, #20]	@ (8005350 <_svfiprintf_r+0x1f0>)
 800533a:	a904      	add	r1, sp, #16
 800533c:	4638      	mov	r0, r7
 800533e:	f000 f879 	bl	8005434 <_printf_i>
 8005342:	e7ed      	b.n	8005320 <_svfiprintf_r+0x1c0>
 8005344:	0800596c 	.word	0x0800596c
 8005348:	08005976 	.word	0x08005976
 800534c:	00000000 	.word	0x00000000
 8005350:	080050a9 	.word	0x080050a9
 8005354:	08005972 	.word	0x08005972

08005358 <_printf_common>:
 8005358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	4616      	mov	r6, r2
 800535e:	4698      	mov	r8, r3
 8005360:	688a      	ldr	r2, [r1, #8]
 8005362:	690b      	ldr	r3, [r1, #16]
 8005364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005368:	4293      	cmp	r3, r2
 800536a:	bfb8      	it	lt
 800536c:	4613      	movlt	r3, r2
 800536e:	6033      	str	r3, [r6, #0]
 8005370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005374:	4607      	mov	r7, r0
 8005376:	460c      	mov	r4, r1
 8005378:	b10a      	cbz	r2, 800537e <_printf_common+0x26>
 800537a:	3301      	adds	r3, #1
 800537c:	6033      	str	r3, [r6, #0]
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	0699      	lsls	r1, r3, #26
 8005382:	bf42      	ittt	mi
 8005384:	6833      	ldrmi	r3, [r6, #0]
 8005386:	3302      	addmi	r3, #2
 8005388:	6033      	strmi	r3, [r6, #0]
 800538a:	6825      	ldr	r5, [r4, #0]
 800538c:	f015 0506 	ands.w	r5, r5, #6
 8005390:	d106      	bne.n	80053a0 <_printf_common+0x48>
 8005392:	f104 0a19 	add.w	sl, r4, #25
 8005396:	68e3      	ldr	r3, [r4, #12]
 8005398:	6832      	ldr	r2, [r6, #0]
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	42ab      	cmp	r3, r5
 800539e:	dc26      	bgt.n	80053ee <_printf_common+0x96>
 80053a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	3b00      	subs	r3, #0
 80053a8:	bf18      	it	ne
 80053aa:	2301      	movne	r3, #1
 80053ac:	0692      	lsls	r2, r2, #26
 80053ae:	d42b      	bmi.n	8005408 <_printf_common+0xb0>
 80053b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053b4:	4641      	mov	r1, r8
 80053b6:	4638      	mov	r0, r7
 80053b8:	47c8      	blx	r9
 80053ba:	3001      	adds	r0, #1
 80053bc:	d01e      	beq.n	80053fc <_printf_common+0xa4>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	f003 0306 	and.w	r3, r3, #6
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	bf02      	ittt	eq
 80053ca:	68e5      	ldreq	r5, [r4, #12]
 80053cc:	6833      	ldreq	r3, [r6, #0]
 80053ce:	1aed      	subeq	r5, r5, r3
 80053d0:	68a3      	ldr	r3, [r4, #8]
 80053d2:	bf0c      	ite	eq
 80053d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053d8:	2500      	movne	r5, #0
 80053da:	4293      	cmp	r3, r2
 80053dc:	bfc4      	itt	gt
 80053de:	1a9b      	subgt	r3, r3, r2
 80053e0:	18ed      	addgt	r5, r5, r3
 80053e2:	2600      	movs	r6, #0
 80053e4:	341a      	adds	r4, #26
 80053e6:	42b5      	cmp	r5, r6
 80053e8:	d11a      	bne.n	8005420 <_printf_common+0xc8>
 80053ea:	2000      	movs	r0, #0
 80053ec:	e008      	b.n	8005400 <_printf_common+0xa8>
 80053ee:	2301      	movs	r3, #1
 80053f0:	4652      	mov	r2, sl
 80053f2:	4641      	mov	r1, r8
 80053f4:	4638      	mov	r0, r7
 80053f6:	47c8      	blx	r9
 80053f8:	3001      	adds	r0, #1
 80053fa:	d103      	bne.n	8005404 <_printf_common+0xac>
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005404:	3501      	adds	r5, #1
 8005406:	e7c6      	b.n	8005396 <_printf_common+0x3e>
 8005408:	18e1      	adds	r1, r4, r3
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	2030      	movs	r0, #48	@ 0x30
 800540e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005412:	4422      	add	r2, r4
 8005414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800541c:	3302      	adds	r3, #2
 800541e:	e7c7      	b.n	80053b0 <_printf_common+0x58>
 8005420:	2301      	movs	r3, #1
 8005422:	4622      	mov	r2, r4
 8005424:	4641      	mov	r1, r8
 8005426:	4638      	mov	r0, r7
 8005428:	47c8      	blx	r9
 800542a:	3001      	adds	r0, #1
 800542c:	d0e6      	beq.n	80053fc <_printf_common+0xa4>
 800542e:	3601      	adds	r6, #1
 8005430:	e7d9      	b.n	80053e6 <_printf_common+0x8e>
	...

08005434 <_printf_i>:
 8005434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005438:	7e0f      	ldrb	r7, [r1, #24]
 800543a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800543c:	2f78      	cmp	r7, #120	@ 0x78
 800543e:	4691      	mov	r9, r2
 8005440:	4680      	mov	r8, r0
 8005442:	460c      	mov	r4, r1
 8005444:	469a      	mov	sl, r3
 8005446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800544a:	d807      	bhi.n	800545c <_printf_i+0x28>
 800544c:	2f62      	cmp	r7, #98	@ 0x62
 800544e:	d80a      	bhi.n	8005466 <_printf_i+0x32>
 8005450:	2f00      	cmp	r7, #0
 8005452:	f000 80d2 	beq.w	80055fa <_printf_i+0x1c6>
 8005456:	2f58      	cmp	r7, #88	@ 0x58
 8005458:	f000 80b9 	beq.w	80055ce <_printf_i+0x19a>
 800545c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005464:	e03a      	b.n	80054dc <_printf_i+0xa8>
 8005466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800546a:	2b15      	cmp	r3, #21
 800546c:	d8f6      	bhi.n	800545c <_printf_i+0x28>
 800546e:	a101      	add	r1, pc, #4	@ (adr r1, 8005474 <_printf_i+0x40>)
 8005470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005474:	080054cd 	.word	0x080054cd
 8005478:	080054e1 	.word	0x080054e1
 800547c:	0800545d 	.word	0x0800545d
 8005480:	0800545d 	.word	0x0800545d
 8005484:	0800545d 	.word	0x0800545d
 8005488:	0800545d 	.word	0x0800545d
 800548c:	080054e1 	.word	0x080054e1
 8005490:	0800545d 	.word	0x0800545d
 8005494:	0800545d 	.word	0x0800545d
 8005498:	0800545d 	.word	0x0800545d
 800549c:	0800545d 	.word	0x0800545d
 80054a0:	080055e1 	.word	0x080055e1
 80054a4:	0800550b 	.word	0x0800550b
 80054a8:	0800559b 	.word	0x0800559b
 80054ac:	0800545d 	.word	0x0800545d
 80054b0:	0800545d 	.word	0x0800545d
 80054b4:	08005603 	.word	0x08005603
 80054b8:	0800545d 	.word	0x0800545d
 80054bc:	0800550b 	.word	0x0800550b
 80054c0:	0800545d 	.word	0x0800545d
 80054c4:	0800545d 	.word	0x0800545d
 80054c8:	080055a3 	.word	0x080055a3
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	1d1a      	adds	r2, r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6032      	str	r2, [r6, #0]
 80054d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054dc:	2301      	movs	r3, #1
 80054de:	e09d      	b.n	800561c <_printf_i+0x1e8>
 80054e0:	6833      	ldr	r3, [r6, #0]
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	1d19      	adds	r1, r3, #4
 80054e6:	6031      	str	r1, [r6, #0]
 80054e8:	0606      	lsls	r6, r0, #24
 80054ea:	d501      	bpl.n	80054f0 <_printf_i+0xbc>
 80054ec:	681d      	ldr	r5, [r3, #0]
 80054ee:	e003      	b.n	80054f8 <_printf_i+0xc4>
 80054f0:	0645      	lsls	r5, r0, #25
 80054f2:	d5fb      	bpl.n	80054ec <_printf_i+0xb8>
 80054f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054f8:	2d00      	cmp	r5, #0
 80054fa:	da03      	bge.n	8005504 <_printf_i+0xd0>
 80054fc:	232d      	movs	r3, #45	@ 0x2d
 80054fe:	426d      	negs	r5, r5
 8005500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005504:	4859      	ldr	r0, [pc, #356]	@ (800566c <_printf_i+0x238>)
 8005506:	230a      	movs	r3, #10
 8005508:	e011      	b.n	800552e <_printf_i+0xfa>
 800550a:	6821      	ldr	r1, [r4, #0]
 800550c:	6833      	ldr	r3, [r6, #0]
 800550e:	0608      	lsls	r0, r1, #24
 8005510:	f853 5b04 	ldr.w	r5, [r3], #4
 8005514:	d402      	bmi.n	800551c <_printf_i+0xe8>
 8005516:	0649      	lsls	r1, r1, #25
 8005518:	bf48      	it	mi
 800551a:	b2ad      	uxthmi	r5, r5
 800551c:	2f6f      	cmp	r7, #111	@ 0x6f
 800551e:	4853      	ldr	r0, [pc, #332]	@ (800566c <_printf_i+0x238>)
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	bf14      	ite	ne
 8005524:	230a      	movne	r3, #10
 8005526:	2308      	moveq	r3, #8
 8005528:	2100      	movs	r1, #0
 800552a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800552e:	6866      	ldr	r6, [r4, #4]
 8005530:	60a6      	str	r6, [r4, #8]
 8005532:	2e00      	cmp	r6, #0
 8005534:	bfa2      	ittt	ge
 8005536:	6821      	ldrge	r1, [r4, #0]
 8005538:	f021 0104 	bicge.w	r1, r1, #4
 800553c:	6021      	strge	r1, [r4, #0]
 800553e:	b90d      	cbnz	r5, 8005544 <_printf_i+0x110>
 8005540:	2e00      	cmp	r6, #0
 8005542:	d04b      	beq.n	80055dc <_printf_i+0x1a8>
 8005544:	4616      	mov	r6, r2
 8005546:	fbb5 f1f3 	udiv	r1, r5, r3
 800554a:	fb03 5711 	mls	r7, r3, r1, r5
 800554e:	5dc7      	ldrb	r7, [r0, r7]
 8005550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005554:	462f      	mov	r7, r5
 8005556:	42bb      	cmp	r3, r7
 8005558:	460d      	mov	r5, r1
 800555a:	d9f4      	bls.n	8005546 <_printf_i+0x112>
 800555c:	2b08      	cmp	r3, #8
 800555e:	d10b      	bne.n	8005578 <_printf_i+0x144>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	07df      	lsls	r7, r3, #31
 8005564:	d508      	bpl.n	8005578 <_printf_i+0x144>
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	6861      	ldr	r1, [r4, #4]
 800556a:	4299      	cmp	r1, r3
 800556c:	bfde      	ittt	le
 800556e:	2330      	movle	r3, #48	@ 0x30
 8005570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005574:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005578:	1b92      	subs	r2, r2, r6
 800557a:	6122      	str	r2, [r4, #16]
 800557c:	f8cd a000 	str.w	sl, [sp]
 8005580:	464b      	mov	r3, r9
 8005582:	aa03      	add	r2, sp, #12
 8005584:	4621      	mov	r1, r4
 8005586:	4640      	mov	r0, r8
 8005588:	f7ff fee6 	bl	8005358 <_printf_common>
 800558c:	3001      	adds	r0, #1
 800558e:	d14a      	bne.n	8005626 <_printf_i+0x1f2>
 8005590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005594:	b004      	add	sp, #16
 8005596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f043 0320 	orr.w	r3, r3, #32
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	4833      	ldr	r0, [pc, #204]	@ (8005670 <_printf_i+0x23c>)
 80055a4:	2778      	movs	r7, #120	@ 0x78
 80055a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	6831      	ldr	r1, [r6, #0]
 80055ae:	061f      	lsls	r7, r3, #24
 80055b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80055b4:	d402      	bmi.n	80055bc <_printf_i+0x188>
 80055b6:	065f      	lsls	r7, r3, #25
 80055b8:	bf48      	it	mi
 80055ba:	b2ad      	uxthmi	r5, r5
 80055bc:	6031      	str	r1, [r6, #0]
 80055be:	07d9      	lsls	r1, r3, #31
 80055c0:	bf44      	itt	mi
 80055c2:	f043 0320 	orrmi.w	r3, r3, #32
 80055c6:	6023      	strmi	r3, [r4, #0]
 80055c8:	b11d      	cbz	r5, 80055d2 <_printf_i+0x19e>
 80055ca:	2310      	movs	r3, #16
 80055cc:	e7ac      	b.n	8005528 <_printf_i+0xf4>
 80055ce:	4827      	ldr	r0, [pc, #156]	@ (800566c <_printf_i+0x238>)
 80055d0:	e7e9      	b.n	80055a6 <_printf_i+0x172>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	f023 0320 	bic.w	r3, r3, #32
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	e7f6      	b.n	80055ca <_printf_i+0x196>
 80055dc:	4616      	mov	r6, r2
 80055de:	e7bd      	b.n	800555c <_printf_i+0x128>
 80055e0:	6833      	ldr	r3, [r6, #0]
 80055e2:	6825      	ldr	r5, [r4, #0]
 80055e4:	6961      	ldr	r1, [r4, #20]
 80055e6:	1d18      	adds	r0, r3, #4
 80055e8:	6030      	str	r0, [r6, #0]
 80055ea:	062e      	lsls	r6, r5, #24
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	d501      	bpl.n	80055f4 <_printf_i+0x1c0>
 80055f0:	6019      	str	r1, [r3, #0]
 80055f2:	e002      	b.n	80055fa <_printf_i+0x1c6>
 80055f4:	0668      	lsls	r0, r5, #25
 80055f6:	d5fb      	bpl.n	80055f0 <_printf_i+0x1bc>
 80055f8:	8019      	strh	r1, [r3, #0]
 80055fa:	2300      	movs	r3, #0
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	4616      	mov	r6, r2
 8005600:	e7bc      	b.n	800557c <_printf_i+0x148>
 8005602:	6833      	ldr	r3, [r6, #0]
 8005604:	1d1a      	adds	r2, r3, #4
 8005606:	6032      	str	r2, [r6, #0]
 8005608:	681e      	ldr	r6, [r3, #0]
 800560a:	6862      	ldr	r2, [r4, #4]
 800560c:	2100      	movs	r1, #0
 800560e:	4630      	mov	r0, r6
 8005610:	f7fa fdf6 	bl	8000200 <memchr>
 8005614:	b108      	cbz	r0, 800561a <_printf_i+0x1e6>
 8005616:	1b80      	subs	r0, r0, r6
 8005618:	6060      	str	r0, [r4, #4]
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	2300      	movs	r3, #0
 8005620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005624:	e7aa      	b.n	800557c <_printf_i+0x148>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	4632      	mov	r2, r6
 800562a:	4649      	mov	r1, r9
 800562c:	4640      	mov	r0, r8
 800562e:	47d0      	blx	sl
 8005630:	3001      	adds	r0, #1
 8005632:	d0ad      	beq.n	8005590 <_printf_i+0x15c>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	079b      	lsls	r3, r3, #30
 8005638:	d413      	bmi.n	8005662 <_printf_i+0x22e>
 800563a:	68e0      	ldr	r0, [r4, #12]
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	4298      	cmp	r0, r3
 8005640:	bfb8      	it	lt
 8005642:	4618      	movlt	r0, r3
 8005644:	e7a6      	b.n	8005594 <_printf_i+0x160>
 8005646:	2301      	movs	r3, #1
 8005648:	4632      	mov	r2, r6
 800564a:	4649      	mov	r1, r9
 800564c:	4640      	mov	r0, r8
 800564e:	47d0      	blx	sl
 8005650:	3001      	adds	r0, #1
 8005652:	d09d      	beq.n	8005590 <_printf_i+0x15c>
 8005654:	3501      	adds	r5, #1
 8005656:	68e3      	ldr	r3, [r4, #12]
 8005658:	9903      	ldr	r1, [sp, #12]
 800565a:	1a5b      	subs	r3, r3, r1
 800565c:	42ab      	cmp	r3, r5
 800565e:	dcf2      	bgt.n	8005646 <_printf_i+0x212>
 8005660:	e7eb      	b.n	800563a <_printf_i+0x206>
 8005662:	2500      	movs	r5, #0
 8005664:	f104 0619 	add.w	r6, r4, #25
 8005668:	e7f5      	b.n	8005656 <_printf_i+0x222>
 800566a:	bf00      	nop
 800566c:	0800597d 	.word	0x0800597d
 8005670:	0800598e 	.word	0x0800598e

08005674 <memmove>:
 8005674:	4288      	cmp	r0, r1
 8005676:	b510      	push	{r4, lr}
 8005678:	eb01 0402 	add.w	r4, r1, r2
 800567c:	d902      	bls.n	8005684 <memmove+0x10>
 800567e:	4284      	cmp	r4, r0
 8005680:	4623      	mov	r3, r4
 8005682:	d807      	bhi.n	8005694 <memmove+0x20>
 8005684:	1e43      	subs	r3, r0, #1
 8005686:	42a1      	cmp	r1, r4
 8005688:	d008      	beq.n	800569c <memmove+0x28>
 800568a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800568e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005692:	e7f8      	b.n	8005686 <memmove+0x12>
 8005694:	4402      	add	r2, r0
 8005696:	4601      	mov	r1, r0
 8005698:	428a      	cmp	r2, r1
 800569a:	d100      	bne.n	800569e <memmove+0x2a>
 800569c:	bd10      	pop	{r4, pc}
 800569e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056a6:	e7f7      	b.n	8005698 <memmove+0x24>

080056a8 <_sbrk_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	4d06      	ldr	r5, [pc, #24]	@ (80056c4 <_sbrk_r+0x1c>)
 80056ac:	2300      	movs	r3, #0
 80056ae:	4604      	mov	r4, r0
 80056b0:	4608      	mov	r0, r1
 80056b2:	602b      	str	r3, [r5, #0]
 80056b4:	f7fb fd28 	bl	8001108 <_sbrk>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d102      	bne.n	80056c2 <_sbrk_r+0x1a>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	b103      	cbz	r3, 80056c2 <_sbrk_r+0x1a>
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	2000420c 	.word	0x2000420c

080056c8 <_realloc_r>:
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	4680      	mov	r8, r0
 80056ce:	4615      	mov	r5, r2
 80056d0:	460c      	mov	r4, r1
 80056d2:	b921      	cbnz	r1, 80056de <_realloc_r+0x16>
 80056d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d8:	4611      	mov	r1, r2
 80056da:	f7ff bc59 	b.w	8004f90 <_malloc_r>
 80056de:	b92a      	cbnz	r2, 80056ec <_realloc_r+0x24>
 80056e0:	f7ff fbea 	bl	8004eb8 <_free_r>
 80056e4:	2400      	movs	r4, #0
 80056e6:	4620      	mov	r0, r4
 80056e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ec:	f000 f81a 	bl	8005724 <_malloc_usable_size_r>
 80056f0:	4285      	cmp	r5, r0
 80056f2:	4606      	mov	r6, r0
 80056f4:	d802      	bhi.n	80056fc <_realloc_r+0x34>
 80056f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056fa:	d8f4      	bhi.n	80056e6 <_realloc_r+0x1e>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4640      	mov	r0, r8
 8005700:	f7ff fc46 	bl	8004f90 <_malloc_r>
 8005704:	4607      	mov	r7, r0
 8005706:	2800      	cmp	r0, #0
 8005708:	d0ec      	beq.n	80056e4 <_realloc_r+0x1c>
 800570a:	42b5      	cmp	r5, r6
 800570c:	462a      	mov	r2, r5
 800570e:	4621      	mov	r1, r4
 8005710:	bf28      	it	cs
 8005712:	4632      	movcs	r2, r6
 8005714:	f7ff fbc2 	bl	8004e9c <memcpy>
 8005718:	4621      	mov	r1, r4
 800571a:	4640      	mov	r0, r8
 800571c:	f7ff fbcc 	bl	8004eb8 <_free_r>
 8005720:	463c      	mov	r4, r7
 8005722:	e7e0      	b.n	80056e6 <_realloc_r+0x1e>

08005724 <_malloc_usable_size_r>:
 8005724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005728:	1f18      	subs	r0, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	bfbc      	itt	lt
 800572e:	580b      	ldrlt	r3, [r1, r0]
 8005730:	18c0      	addlt	r0, r0, r3
 8005732:	4770      	bx	lr

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	bf00      	nop
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr
